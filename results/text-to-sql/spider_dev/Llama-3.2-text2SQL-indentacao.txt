 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name,        Country,        Age FROM singer ORDER BY Age DESC 
 SELECT Name,        Country,        Age FROM singer ORDER BY Age DESC 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT Song_Name,        Song_release_year FROM singer ORDER BY Age ASC LIMIT 1 
 SELECT Song_Name,        Song_release_year FROM singer ORDER BY Age ASC LIMIT 1 
 SELECT DISTINCT Country FROM singer WHERE Age > 20 
 SELECT DISTINCT Country FROM singer WHERE Age > 20 
 SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
 SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
 SELECT Song_Name FROM singer WHERE Age > (SELECT avg(Age)           FROM singer) 
 SELECT Song_Name FROM singer WHERE Age > (SELECT avg(Age)           FROM singer) 
 SELECT LOCATION,        Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,        Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),        avg(capacity) FROM stadium 
 SELECT avg(capacity),        max(capacity) FROM stadium 
 SELECT name,        capacity FROM stadium ORDER BY avg(capacity) DESC LIMIT 1 
 SELECT name,        capacity FROM stadium ORDER BY avg(capacity) DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT T1.Name,        count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID 
 SELECT T1.Name,        count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name 
 SELECT T1.name,        T1.capacity,        T2.year FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T2.year HAVING T2.year >= 2014 
 SELECT T2.name,        T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year > 2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT Country FROM singer WHERE Age > 40   OR Age < 30 
 SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = 2014 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert      WHERE YEAR = 2014) 
 SELECT T1.concert_name,        T1.theme,        COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.concert_name,          T1.theme 
 SELECT T1.concert_name,        T2.theme,        count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.concert_name 
 SELECT T2.Name,        COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID 
 SELECT T2.Name,        COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID 
 SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.year = 2014 
 SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.year = 2014 
 SELECT T2.Name,        T2.Country FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_Name LIKE '%Hey%' ; 
 SELECT T2.Name,        T2.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Song_Name LIKE "%Hey%%" 
 SELECT T1.Name,        T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.year = 2014 INTERSECT   SELECT T1.Name,          T1.Location   FROM stadium AS T1   JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.year = 2015 
 SELECT T1.Name,        T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.year = 2014 INTERSECT   SELECT T1.Name,          T1.Location   FROM stadium AS T1   JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.year = 2015 
 SELECT count(*) FROM concert WHERE Stadium_ID =     (SELECT Stadium_ID      FROM stadium      ORDER BY Capacity DESC      LIMIT 1) 
 SELECT count(*) FROM concert WHERE Stadium_ID =     (SELECT Stadium_ID      FROM stadium      ORDER BY Capacity DESC      LIMIT 1) 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT min(weight) FROM Pets WHERE pet_age =     (SELECT min(pet_age)      FROM Pets) 
 SELECT min(weight) FROM Pets WHERE pet_age =     (SELECT min(pet_age)      FROM Pets) 
 SELECT max(weight),        pettype FROM Pets GROUP BY pettype 
 SELECT max(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT count(*) FROM Has_Pet WHERE StuID IN     (SELECT StuID      FROM Student      WHERE age > 20) 
 SELECT count(*) FROM Has_Pet WHERE StuID IN     (SELECT StuID      FROM Student      WHERE age > 20) 
 SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_type = "dog"   AND T1.sex = "F" 
 SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_type = "dog"   AND T1.sex = "female" 
 SELECT count(DISTINCT pettype) FROM Pets 
 SELECT count(DISTINCT pettype) FROM Pets 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pettype = "Cat"   OR T3.pettype = "Dog" 
 SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_type = 'Cat'   OR T3.pet_type = 'Dog' 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.pettype = 'Cat' INTERSECT   SELECT T1.fname   FROM Student AS T1   JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.pettype = 'Dog' 
 SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_type = 'cat' INTERSECT   SELECT T1.Fname   FROM Student AS T1   JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID   JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_type = 'dog' 
 SELECT major,        age FROM student EXCEPT SELECT major,        age FROM has_pet WHERE pettype = 'cat' 
 SELECT T1.major,        T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype!= 'cat' 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetType = 'Cat' 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetType = 'Cat' 
 SELECT T1.fname,        T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.pettype = 'Dog' EXCEPT SELECT T1.fname,        T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.pettype = 'Cat' 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pettype = "Dog" EXCEPT SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pettype = "Cat" 
 SELECT pet_type,        weight FROM Pets ORDER BY pet_age LIMIT 1 
 SELECT pet_type,        min(pet_age) FROM Pets GROUP BY pet_type ORDER BY pet_age LIMIT 1 
 SELECT pet_id,        weight FROM Pets WHERE pet_age > 1 
 SELECT pet_id,        weight FROM Pets WHERE pet_age > 1 
 SELECT avg(T2.pet_age),        max(T2.pet_age),        T3.pettype FROM Pets AS T1 JOIN Pets AS T2 ON T1.petid = T2.petid JOIN Students AS T3 ON T3.StuID = T1.StuID GROUP BY T3.pettype 
 SELECT pet_type,        avg(pet_age),        max(pet_age) FROM Pets GROUP BY pet_type 
 SELECT pettype,        avg(weight) FROM Pets GROUP BY pettype 
 SELECT pet_type,        avg(weight) FROM Pets GROUP BY pet_type 
 SELECT T1.fname,        T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID 
 SELECT DISTINCT T1.Fname,                 T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID 
 SELECT T1.PetID FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.LName = 'Smith' 
 SELECT T1.PetID FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.LName = 'Smith' 
 SELECT T1.StuID,        count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID 
 SELECT T1.StuID,        count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID 
 SELECT T1.fname,        T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING count(*) > 1 
 SELECT T1.fname,        T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING count(*) > 1 
 SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3   AND T3.pettype = "cat" 
 SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3 
 SELECT avg(age) FROM student WHERE StuID NOT IN     (SELECT StuID      FROM has_pet) 
 SELECT avg(age) FROM student WHERE StuID NOT IN     (SELECT StuID      FROM has_pet) 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT T1.continent,        T2.continent,        count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent = T2.continent GROUP BY T1.continent 
 SELECT continent,        count(*),        COUNT(*) FROM continents GROUP BY continent 
 SELECT count(*) FROM countries 
 SELECT count(*) FROM countries 
 SELECT T1.Maker,        T1.Id,        COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker 
 SELECT T1.Maker,        T1.Id,        COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.Horsepower LIMIT 1 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId ORDER BY T2.Horsepower LIMIT 1 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T2.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T2.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Year = 1970 
 SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Year = 1970 
 SELECT T1.make,        T2.year FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid 
 SELECT T1.Maker,        T2.year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T3.Year =     (SELECT min(YEAR)      FROM car_names      WHERE make = T1.Maker) 
 SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T2.Year > 1980 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Year > 1980 
 SELECT T1.continent,        count(*) FROM continents AS T1 JOIN car_makers AS T2 ON T1.continent = T2.country GROUP BY T1.continent 
 SELECT T1.continent,        count(*) FROM continents AS T1 JOIN car_makers AS T2 ON T1.continent = T2.country GROUP BY T1.continent 
 SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country GROUP BY T2.Country ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Maker,        COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker 
 SELECT T1.Maker,        T1.FullName,        COUNT(*),        T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker 
 SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.MakeId = T2.Id WHERE T2.Maker = "amc hornet sportabout (sw)"; 
 SELECT T1.accelerate FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.makeid = T2.id WHERE T2.makename = "amc hornet sportabout (sw)" 
 SELECT count(*) FROM car_makers WHERE country = 'France' 
 SELECT count(*) FROM car_makers AS t1 JOIN countries AS t2 ON t1.Country = t2.CountryId WHERE t2.CountryName = "France"   AND t1.Maker = "care"; 
 SELECT count(*) FROM car_makers AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.country = 'USA' 
 SELECT count(*) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T1.Country = 'United States' 
 SELECT avg(Edispl) FROM car_names WHERE Cylinders = 4 
 SELECT avg(Edispl) FROM car_names WHERE Cylinders = 4 
 SELECT min(Weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974 
 SELECT min(Weight) FROM cars_data WHERE YEAR = 1974   AND Cylinders = 8 
 SELECT DISTINCT T1.Maker,                 T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker 
 SELECT T1.Maker,        T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.MakeId 
 SELECT T2.CountryName,        T1.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.CountryId HAVING COUNT(*) >= 1 
 SELECT T1.CountryName,        T2.Id FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT avg(Weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT avg(Weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.Country = 'Europe' GROUP BY T1.Country HAVING COUNT(*) >= 3 
 SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country WHERE T2.Country = 'Europe' GROUP BY T1.CountryName HAVING COUNT(*) >= 3 
 SELECT max(Horsepower),        T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Cylinders = 3 
 SELECT T1.Horsepower,        T2.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T2.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1 
 SELECT T1.Model FROM car_names AS T1 JOIN car_names AS T2 ON T1.Make = T2.Make WHERE T1.Horsepower =     (SELECT max(Horsepower)      FROM car_names      WHERE T1.Horsepower =          (SELECT max(Horsepower)           FROM car_names           WHERE T1.Horsepower =               (SELECT max(Horsepower)                FROM car_names                WHERE T1.Horsepower =                    (SELECT max(Horsepower)                     FROM car_names                     WHERE T1.Horsepower =                         (SELECT max(Horsepower)                      FROM car_names                      WHERE T1.Horsepower =                          (SELECT max(Horsepower)                       FROM car_names                       WHERE T1.Horsepower =                           (SELECT max(Horsepower)                            FROM car_names                            WHERE T1.Horsepower =                                (SELECT max(Horsepower)                               FROM car_names                               WHERE T1.Horsepower =                                   (SELECT max(Horsepower)                                  FROM car_names                                  WHERE T1.Horsepower =                                      (SELECT max(Horsepower)                                       FROM car_names                                       WHERE T1.Horsepower =                                           (SELECT
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.MPG DESC LIMIT 1 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Edispl) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make = T2.Make WHERE T1.Model = "volvo" 
 SELECT avg(Edispl) FROM car_names WHERE Make = "Volkswagen" 
 SELECT max(Accelerate),        Cylinders FROM car_names GROUP BY Cylinders 
 SELECT max(Accelerate) FROM car_names GROUP BY Cylinders 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId GROUP BY T1.Model ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model GROUP BY T2.Model ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM car_names WHERE Cylinders > 4 
 SELECT count(*) FROM car_names WHERE Cylinders > 4 
 SELECT count(*) FROM car_names WHERE YEAR = 1980 
 SELECT count(*) FROM car_makers WHERE YEAR = 1980 
 SELECT count(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker WHERE t1.fullname = "American Motor Company" 
 SELECT count(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker WHERE t1.name = "American Motor Company" 
 SELECT T1.Maker,        T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING COUNT(*) > 3 
 SELECT T1.Maker,        T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3 
 SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN car_makers AS T2 ON T1.MakeId = T2.Id WHERE T2.FullName = "General Motors"   OR T2.Weight > 3500 
 SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'General Motors'   OR T3.Weight > 3500 
 SELECT YEAR FROM cars_data WHERE Weight >= 3000 INTERSECT   SELECT YEAR   FROM cars_data WHERE Weight <= 4000 
 SELECT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT   SELECT YEAR   FROM cars_data WHERE Weight > 3000 
 SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.Id ORDER BY T1.Accelerate DESC LIMIT 1 
 SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.Id ORDER BY T1.Accelerate DESC LIMIT 1 
 SELECT count(*),        T1.cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id = T2.id WHERE T1.make = "volvo" GROUP BY T1.cylinders ORDER BY T2.accelerate LIMIT 1 
 SELECT count(*) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make = T2.Make WHERE T1.Model = "volvo"   AND T2.Horsepower =     (SELECT min(Horsepower)      FROM cars_data      WHERE T1.Model = "volvo") 
 SELECT count(*) FROM cars_data WHERE accelerate >     (SELECT max(horsepower)      FROM cars_data) 
 SELECT count(*) FROM cars_data WHERE accelerate >     (SELECT max(horsepower)      FROM cars_data) 
 SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.Maker = "Toyota" GROUP BY T2.CountryId HAVING count(*) > 2 
 SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country HAVING count(*) > 2 
 SELECT count(*) FROM car_names WHERE Cylinders > 6 
 SELECT count(*) FROM car_names WHERE Cylinders > 6 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T2.Horsepower =     (SELECT max(Horsepower)      FROM cars_data      WHERE Cylinders = 4) 
 SELECT T1.Model FROM car_names AS T1 JOIN car_names AS T2 ON T1.Make = T2.Make WHERE T1.Cylinders = 4 GROUP BY T1.Model ORDER BY T2.Horsepower DESC LIMIT 1 
 SELECT T1.makeid,        T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid = T2.makeid WHERE T2.Horsepower >     (SELECT min(Horsepower)      FROM cars_data      WHERE Cylinders > 3) 
 SELECT T1.make,        T1.name FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid = T2.makeid WHERE T2.Horsepower < 4 
 SELECT max(Edispl) FROM car_names WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT max(Edispl) FROM car_names WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make = T2.Make WHERE T2.Weight < 3500 EXCEPT SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make = T2.Make WHERE T2.Make = 'Ford Motor Company' 
 SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId WHERE T2.Weight < 3500 EXCEPT SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.MakeId JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = "Ford" 
 SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country 
 SELECT CountryName FROM countries WHERE CountryId NOT IN     (SELECT CountryId      FROM car_makers) 
 SELECT T1.id,        T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) >= 2 INTERSECT SELECT T1.id,        T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) > 3 
 SELECT T1.id,        T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) >= 2 INTERSECT SELECT T1.id,        T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) >= 3 
 SELECT T1.CountryId,        T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = 'Fiat'   OR T2.Maker = 'Fiat' GROUP BY T1.CountryId HAVING count(*) > 3 
 SELECT T1.CountryId,        T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country WHERE T2.Maker = 'Fiat' UNION SELECT T1.CountryId,        T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Country WHERE T2.Maker = 'Toyota' 
 SELECT Country FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Country FROM airlines WHERE Airline = "Jetblue Airways" 
 SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways" 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = "USA" 
 SELECT T1.Airline,        T1.Abbreviation FROM airlines AS T1 JOIN airports AS T2 ON T1.Airline = T2.AirportCode WHERE T2.Country = 'USA' 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM flights 
 SELECT count(*) FROM flights 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
 SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
 SELECT AirportName FROM airports WHERE AirportName = 'AKO' 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE City = 'Aberdeen' 
 SELECT AirportName FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport WHERE T1.city = 'APG' 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport WHERE T1.city = 'APG' 
 SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport WHERE T1.airportname = "ATO" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.city = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportName = T2.DestAirport WHERE T1.City = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.city = "Aberdeen" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = 'Aberdeen'   AND T1.destairport = 'Ashley' 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportName = T2.DestAirport WHERE T1.City = "Aberdeen"   AND T2.DestAirport = "Ashley" 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.Airline WHERE T2.Airline = 'JetBlue Airways' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "Jetblue Airways" 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines'   AND T1.DestAirport = 'ASY' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United"   AND T1.DestAirport = "ASY" 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines'   AND T1.sourceairport = 'AHD' 
 SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline WHERE t1.abbreviation = "United"   AND t2.sourceairport = "AHD" 
 SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline WHERE t1.Airline = 'United'   AND t2.DestAirport = 'Aberdeen' 
 SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline WHERE t1.Airline = "United"   AND t2.DestAirport = "Aberdeen" 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY count(*) ASC LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) ASC LIMIT 1 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.abbrev,        T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T2.airline ORDER BY count(*) ASC LIMIT 1 
 SELECT T1.abbreviation,        T2.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T2.airline ORDER BY count(*) ASC LIMIT 1 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.sourceairport = 'AHD' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.sourceairport = "AHD" 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = "AHD" 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT   SELECT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'CVO' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.sourceairport = "APG" INTERSECT   SELECT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.destairport = "CVO" 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' 
 SELECT Airline FROM airlines WHERE SourceAirport = "CVO" EXCEPT SELECT Airline FROM airlines WHERE SourceAirport = "APG" 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.Airline WHERE T2.Airline = "United Airlines" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.City WHERE T2.City = "Aberdeen" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = "Aberdeen" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.City WHERE T2.City = "Aberdeen" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.sourceairport WHERE T1.city = "Aberdeen"   OR T1.city = "Abilene" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode = T2.destairport WHERE T1.city = "Aberdeen"   OR T1.city = "Abilene" 
 SELECT AirportName FROM airports WHERE AirportCode NOT IN     (SELECT SourceAirport      FROM flights) 
 SELECT AirportName FROM airports WHERE AirportCode NOT IN     (SELECT SourceAirport      FROM flights)   OR AirportCode NOT IN     (SELECT DestAirport      FROM flights) 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee 
 SELECT name FROM employee ORDER BY age 
 SELECT name FROM employee ORDER BY age 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT T2.name,        T2.district FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id ORDER BY T1.number_products DESC LIMIT 1 
 SELECT T2.name,        T2.district FROM shop AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.name = (SELECT name                 FROM shop                 GROUP BY name                 ORDER BY sum(number_products) DESC                 LIMIT 1) 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id ORDER BY T1.Bonus DESC LIMIT 1 
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id ORDER BY T1.Bonus DESC LIMIT 1 
 SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation) 
 SELECT t1.name FROM shop AS t1 JOIN hiring AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT T1.name,        count(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name 
 SELECT T2.name,        count(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id 
 SELECT sum(Bonus) FROM evaluation 
 SELECT sum(Bonus) FROM evaluation 
 SELECT * FROM hiring 
 SELECT * FROM hiring 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(*) FROM Documents 
 SELECT count(*) FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT T1.document_name,        T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%' 
 SELECT T1.document_name,        T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%' 
 SELECT document_id,        template_id,        document_name FROM Documents WHERE document_name = "Robbin CV" 
 SELECT T1.Document_ID,        T2.Template_ID,        T2.Document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_name = "Robbin CV" 
 SELECT count(DISTINCT document_name) FROM Documents 
 SELECT count(DISTINCT document_name) FROM Documents 
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'PPT' 
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = "PPT" 
 SELECT T1.template_id,        count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id 
 SELECT document_id,        count(*) FROM Documents GROUP BY document_id 
 SELECT T1.template_id,        T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.template_id,        T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(*) > 1 
 SELECT T1.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id HAVING COUNT(*) > 1 
 SELECT template_id FROM Templates EXCEPT SELECT t1.template_id FROM Documents AS t2 JOIN Templates AS t1 ON t2.template_id = t1.template_id 
 SELECT template_id FROM Templates EXCEPT SELECT t1.template_id FROM Documents AS t2 JOIN Templates AS t1 ON t2.template_id = t1.template_id 
 SELECT count(*) FROM Templates 
 SELECT count(*) FROM Templates 
 SELECT template_id,        version_number,        template_type_code FROM Templates 
 SELECT template_id,        version_number,        template_type_code FROM Templates 
 SELECT DISTINCT template_type_code FROM Templates 
 SELECT DISTINCT template_type_code FROM Ref_Template_Types 
 SELECT template_id FROM Templates WHERE template_type_code = "PP"   OR template_type_code = "PPT" 
 SELECT template_id FROM Templates WHERE template_type_code = 'PP'   OR template_type_code = 'PPT' 
 SELECT count(*) FROM Templates WHERE template_type_code = "CV" 
 SELECT count(*) FROM Templates WHERE template_type_code = "CV" 
 SELECT T1.version_number,        T2.template_type_code FROM Templates AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.version_number > 5 
 SELECT Version_Number,        Template_Type_Code FROM Templates WHERE Version_Number > 5 
 SELECT template_type_code,        count(*) FROM Templates GROUP BY template_type_code 
 SELECT template_type_code,        count(*) FROM Templates GROUP BY template_type_code 
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.template_type_code FROM Ref_templates AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT template_type_code FROM Ref_templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT min(version_number),        template_type_code FROM Templates 
 SELECT min(version_number),        template_type_code FROM Templates GROUP BY template_type_code 
 SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = "Data base" 
 SELECT T1.template_type_code FROM Ref_templates AS T1 JOIN Documents AS T2 ON T1.template_type_code = T2.template_id WHERE T2.document_name = "Data base" 
 SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = "BK" 
 SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = "BK" 
 SELECT T1.template_type_code,        count(*) FROM Ref_templates AS T1 JOIN Documents AS T2 ON T1.template_type_code = T2.template_id GROUP BY T1.template_type_code 
 SELECT template_type_code,        count(*) FROM Documents GROUP BY template_type_code 
 SELECT t1.template_type_code FROM Ref_templates AS t1 JOIN Documents AS t2 ON t1.template_type_code = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.template_type_code FROM Ref_templates AS t1 JOIN Documents AS t2 ON t1.template_type_code = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Ref_templates EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code FROM Ref_templates EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code,        template_type_description FROM Ref_Template_Types 
 SELECT template_type_code,        template_type_description FROM Ref_Template_Types 
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = "AD" 
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = "AD" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT DISTINCT T1.template_type_description FROM Ref_templates AS T1 JOIN Documents AS T2 ON T1.template_type_code = T2.template_id 
 SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.template_id = T3.template_id 
 SELECT template_id FROM Templates WHERE template_type_description = "Presentation" 
 SELECT template_id FROM Templates WHERE template_type_description = 'Presentation' 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_name = "Summer Show" 
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = "Summer Show" 
 SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = "Korea " 
 SELECT T2.Paragraph_Details FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = "Korea " 
 SELECT T1.Paragraph_ID,        T2.Paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_name = "Welcome to NY" 
 SELECT T1.Paragraph_ID,        T2.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = "Welcome to NY" 
 SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = "Customer reviews" 
 SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews' 
 SELECT document_id,        count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT document_id,        count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT document_id,        document_name,        count(*) FROM Documents GROUP BY document_id 
 SELECT document_id,        document_name,        count(*) FROM Documents GROUP BY document_id 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2 
 SELECT document_id,        document_name FROM Paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id,        document_name FROM Paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil'   OR paragraph_text = 'Ireland' 
 SELECT document_id FROM Paragraphs WHERE Paragraph_Text = 'Brazil'   OR Paragraph_Text = 'Ireland' 
 SELECT count(*) FROM teacher 
 SELECT count(*) FROM teacher 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Age,        Hometown FROM teacher 
 SELECT Age,        Hometown FROM teacher 
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.age =     (SELECT min(age)      FROM teacher) 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,        count(*) FROM teacher GROUP BY Hometown 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2 
 SELECT T2.Name,        T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID 
 SELECT T2.Name,        T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID 
 SELECT T2.Name,        T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name 
 SELECT T2.Name,        T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID 
 SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = "Math" 
 SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = "Math" 
 SELECT T2.Name,        count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID 
 SELECT T2.Name,        count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2 
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN     (SELECT Teacher_ID      FROM course_arrange) 
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN     (SELECT Teacher_ID      FROM course_arrange) 
 SELECT count(*) FROM visitor WHERE age < 30 
 SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC 
 SELECT avg(T2.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership <= 4 
 SELECT Name,        Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC 
 SELECT Museum_ID,        Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1 
 SELECT avg(Num_of_Staff) FROM museum WHERE open_year < 2009 
 SELECT open_year,        num_of_staff FROM museum WHERE name = "Plaza Museum" 
 SELECT name FROM museum WHERE open_year > 2010   AND num_of_staff >     (SELECT min(num_of_staff)      FROM museum      WHERE open_year > 2010) 
 SELECT T1.id,        T1.name,        T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id HAVING count(*) > 1 
 SELECT T1.id,        T1.name,        T1.level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id ORDER BY T2.Total_spent DESC LIMIT 1 
 SELECT T1.Museum_ID,        T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM visit      WHERE visitor_id = "null") 
 SELECT T2.Name,        T2.Age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID ORDER BY sum(T1.Num_of_Ticket) DESC LIMIT 1 
 SELECT avg(Num_of_Ticket),        max(Num_of_Ticket) FROM visit 
 SELECT sum(T2.Total_spent) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1 
 SELECT T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year < 2011   AND T1.Open_Year > 2009 
 SELECT count(*) FROM visitor WHERE ID NOT IN     (SELECT visitor_ID      FROM visit      WHERE museum_id > 2010) 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches 
 SELECT count(*) FROM matches 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT avg(loser_age),        winner_age FROM matches 
 SELECT avg(loser_age),        winner_age FROM matches 
 SELECT avg(winner_rank_points) FROM matches 
 SELECT avg(winner_rank_points) FROM matches 
 SELECT T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.loser_hand = "Hand"   AND T1.loser_rank = (SELECT max(winner_rank)                       FROM matches AS T1                       JOIN players AS T2 ON T1.winner_id = T2.player_id                       WHERE T1.loser_hand = "Hand") 
 SELECT T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.score = 'Loss' 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT T2.tourney_name FROM matches AS T1 JOIN tournaments AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T1.tourney_id HAVING count(*) > 10 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
 SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT   SELECT T1.winner_name   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016 
 SELECT T1.first_name,        T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT   SELECT T1.first_name,          T1.last_name   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT T1.country_code,        T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "WTA Championships" INTERSECT   SELECT T1.country_code,          T1.first_name   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "Australian Open" 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.score = "Win"   AND T2.tourney_name = "WTA Championships" INTERSECT   SELECT T1.first_name,          T1.country_code   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id   WHERE T2.score = "Win" AND T2.tourney_name = "Australian Open" 
 SELECT first_name,        country_code FROM players ORDER BY birth_date DESC LIMIT 1 
 SELECT first_name,        country_code FROM players ORDER BY birth_date DESC LIMIT 1 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = "Left" ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = "Left" ORDER BY birth_date 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY T2.tours DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.winner_name,        T1.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.winner_name,        T1.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN rankings AS T3 ON T3.player_id = T2.player_id WHERE T1.tourney_name = "Australian Open"   AND T3.ranking_points =     (SELECT max(ranking_points)      FROM rankings      WHERE player_id = T2.player_id) 
 SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN rankings AS T3 ON T3.player_id = T2.player_id WHERE T1.tourney_name = "Australian Open"   AND T3.ranking_points =     (SELECT max(ranking_points)      FROM rankings      WHERE player_id = T2.player_id) 
 SELECT T1.loser_name,        T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id = T2.player_id ORDER BY T1.minutes DESC LIMIT 1 
 SELECT T1.winner_name,        T2.loser_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.match_num =     (SELECT max(match_num)      FROM matches) 
 SELECT avg(ranking_points),        first_name FROM rankings GROUP BY first_name 
 SELECT T1.first_name,        avg(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name 
 SELECT T1.ranking_points,        T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id 
 SELECT T1.first_name,        T1.total_ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT ranking_date,        count(*) FROM rankings GROUP BY ranking_date 
 SELECT T1.ranking_date,        count(*) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.ranking_date 
 SELECT YEAR,        count(*) FROM matches GROUP BY YEAR 
 SELECT YEAR,        count(*) FROM matches GROUP BY YEAR 
 SELECT T1.winner_name,        T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.winner_age LIMIT 3 
 SELECT T1.winner_name,        T1.winner_rank FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.winner_age LIMIT 3 
 SELECT count(DISTINCT winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.loser_hand = "Left"   AND T1.match_num > 0 
 SELECT count(*) FROM matches AS T1 JOIN players AS T2 ON T1.loser_hand = T2.player_id WHERE T1.match_num > 0   AND T2.hand = "Left"   AND T2.player_id IN     (SELECT winner_id      FROM matches      WHERE match_num > 0        AND T1.loser_hand = "Left")   AND T2.player_id IN     (SELECT winner_id      FROM matches      WHERE match_num > 0        AND T1.loser_hand = "Left")   AND T2.tourney_name = "WTA Championships" 
 SELECT T1.first_name,        T1.country_code,        T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1 
 SELECT T1.first_name,        T1.country_code,        T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id ORDER BY T2.winner_rank_points DESC LIMIT 1 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT count(*) FROM ship WHERE tonnage > 0   AND disposition_of_ship = 'Captured' 
 SELECT name,        tonnage FROM ship ORDER BY name DESC 
 SELECT name,        date,        result FROM battle 
 SELECT max(killed),        min(injured) FROM death 
 SELECT injured,        avg(injured) FROM death GROUP BY injured 
 SELECT note,        injured FROM death WHERE tonnage = "t" 
 SELECT name,        result FROM battle WHERE bulgarian_commander!= 'Boril' 
 SELECT DISTINCT T1.id,                 T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' 
 SELECT T1.id,        T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id = T2.cause_by_ship_id GROUP BY T1.id HAVING sum(killed) > 10 
 SELECT caused_by_ship_id,        name FROM death GROUP BY caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1 
 SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T1.bulgarian_commander = 'Kaloyan'   AND T1.latin_commander = 'Baldwin I' 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE tonnage = 225) 
 SELECT T1.name,        T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'   AND T2.name = 'HMS Atalanta' 
 SELECT name,        result,        bulgarian_commander FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship) 
 SELECT note FROM death WHERE note LIKE '%East%' 
 SELECT * FROM addresses WHERE line_1 = "your address line 1"   AND line_2 = "your address line 2"; 
 SELECT line_1,        line_2 FROM addresses 
 SELECT count(*) FROM Courses 
 SELECT count(*) FROM Courses 
 SELECT course_description FROM Courses WHERE course_name = "Math"; 
 SELECT course_description FROM Courses WHERE course_name = "Math" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea"; 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea"; 
 SELECT T1.department_name,        T1.department_id FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.department_name,        T1.department_id FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM DEPARTMENTS WHERE department_name!= "University of Technology" 
 SELECT count(DISTINCT department_name) FROM Degree_Programs 
 SELECT count(DISTINCT degree_name) FROM Degree_Programs 
 SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs 
 SELECT count(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = "Engineering" 
 SELECT count(*) FROM DEPARTMENT_PROGS AS T1 JOIN DEPARTMENT_CROSSOVERS AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = "Engineering" 
 SELECT T1.section_name,        T1.section_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id 
 SELECT T1.section_name,        T1.section_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id 
 SELECT T1.course_name,        T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2 
 SELECT T1.course_name,        T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) < 2 
 SELECT section_name FROM Sections ORDER BY section_name DESC 
 SELECT section_name FROM Sections ORDER BY section_name DESC 
 SELECT T1.semester_name,        T2.student_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.semester_name,        T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.department_description FROM DEPARTMENTS AS T1 JOIN DEPARTMENT_DETAILS AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name LIKE "%the computer%" 
 SELECT T1.department_description FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE '%computer%' 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name,        T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.semester_id = 1 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name,        T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.semester_id = 1 
 SELECT DISTINCT T1.first_name,                 T1.middle_name,                 T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = "Bachelor"; 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_program_name = "Bachelors" 
 SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.degree_program_id = T2.student_course_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.degree_program_id = T2.student_course_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,        T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.degree_program_id = T2.student_course_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,        T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.degree_program_id = T2.student_course_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.student_id,        T2.first_name,        T2.middle_name,        T2.last_name,        count(*),        T3.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN student_enrolment_courses AS T3 ON T2.student_id = T3.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name,        count(*),        T2.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id = 0 
 SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id = 0 
 SELECT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.current_address_id NOT IN     (SELECT current_address_id      FROM student_enrolment      WHERE degree_program_id = 0)   AND T1.state_province_county = "North Carolina" 
 SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.current_address_id IN     (SELECT address_id      FROM addresses      WHERE state_province_county = "North Carolina") EXCEPT SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id NOT IN     (SELECT student_id      FROM student_enrolment      WHERE degree_program_id IN          (SELECT degree_program_id           FROM degree_programs           WHERE department_id = 1)) 
 SELECT T1.transcript_date,        T1.student_course_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2 
 SELECT T1.transcript_date,        T1.transcript_id FROM Transcripts AS T1 JOIN Transcripts_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2 
 SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy"   AND last_name = "Ward"; 
 SELECT T1.cell_mobile_number FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = "Timmothy"   AND T1.last_name = "Ward"; 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.date_first_registered =     (SELECT min(date_first_registered)      FROM Student_Enrolment) 
 SELECT first_name,        middle_name,        last_name FROM students WHERE date_first_registered =     (SELECT min(date_first_registered)      FROM students) 
 SELECT first_name,        middle_name,        last_name FROM students WHERE date_left =     (SELECT min(date_left)      FROM students) 
 SELECT first_name,        middle_name,        last_name FROM students WHERE date_first_registered =     (SELECT min(date_first_registered)      FROM students) 
 SELECT first_name FROM students EXCEPT SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id 
 SELECT T1.first_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.current_address_id!= T1.permanent_address_id 
 SELECT T1.address_id,        T1.line_1,        T1.line_2,        T1.line_3 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.address_id,        T1.line_1,        T1.line_2 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT avg(transcript_date) FROM Transcripts 
 SELECT T1.transcript_date,        T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id 
 SELECT T1.transcript_date,        T2.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id 
 SELECT count(*) FROM Transcripts 
 SELECT count(*) FROM transcripts 
 SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT count(*),        T1.course_id FROM student_enrolment AS T1 JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id 
 SELECT T1.course_id,        count(*),        T2.transcript_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id 
 SELECT T1.transcript_date,        T2.student_course_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.student_course_id ORDER BY count(*) ASC LIMIT 1 
 SELECT T1.transcript_date,        T1.student_course_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.student_course_id ORDER BY count(*) ASC LIMIT 1 
 SELECT DISTINCT T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IN     (SELECT student_id      FROM students      WHERE first_name = "Master"        AND last_name = "students")   AND T2.student_id IN     (SELECT student_id      FROM students      WHERE first_name = "Bachelor"        AND last_name = "students") 
 SELECT T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IN     (SELECT student_id      FROM student_enrolment      WHERE degree_program_id = "Masters" INTERSECT        SELECT student_id        FROM student_enrolment WHERE degree_program_id = "Bachelors") 
 SELECT count(DISTINCT current_address_id) FROM students 
 SELECT DISTINCT T1.address_id FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.permanent_address_id 
 SELECT * FROM Students ORDER BY first_name,          last_name 
 SELECT other_details FROM students ORDER BY other_details 
 SELECT t1.section_name FROM Sections AS t1 JOIN Courses AS t2 ON t1.course_id = t2.course_id WHERE t2.course_name = "Computer Science"   AND t2.section_description = "Introduction to Computer Science"; 
 SELECT T1.section_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = "h"; 
 SELECT first_name FROM students WHERE permanent_address_id IN     (SELECT current_address_id      FROM addresses      WHERE country = "Haiti")   OR cell_mobile_number = "09700166582" 
 SELECT first_name FROM students WHERE permanent_address_id = 1   OR cell_mobile_number = "09700166582" 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1Directed_by = T2.id WHERE T2.Written_by = "Ben Jones" 
 SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1Directed_by = T2.id WHERE T1.Written_by = "Ben Jones" 
 SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr" 
 SELECT count(*) FROM Cartoon AS T1 JOIN Written_by AS T2 ON T1.id = T2.id WHERE T2.Written_by = "Joseph Kuhr" 
 SELECT T1.Title,        T2.Directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date 
 SELECT T1.Title,        T2.directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel = T2.id ORDER BY T1.Original_air_date 
 SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id JOIN Directed_by AS T3 ON T1.id = T3.id WHERE T3.Written_by = "Ben Jones"   OR T3.Written_by = "Brandon Vietti" 
 SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.directed_by = "Ben Jones"   OR T1.directed_by = "Brandon Vietti" 
 SELECT Country,        count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT Country,        count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT series_name),        content FROM TV_CHANNEL 
 SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_CHANNEL 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT content FROM TV_series WHERE title = "Sky Radio"; 
 SELECT package_option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT package_option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT count(*) FROM TV_channel WHERE language = 'english' 
 SELECT count(*) FROM TV_CHANNEL WHERE language = 'English' 
 SELECT T2.language,        count(*) FROM TV_CHANNEL AS T1 JOIN CHANNEL AS T2 ON T1.id = T2.id GROUP BY T1.id ORDER BY count(*) ASC LIMIT 1 
 SELECT t1.language,        count(*) FROM TV_channel AS t1 JOIN TV_channel AS t2 ON t1.id = t2.id GROUP BY t1.language ORDER BY count(*) ASC LIMIT 1 
 SELECT Language,        count(*) FROM TV_CHANNEL GROUP BY Language 
 SELECT Language,        count(*) FROM TV_CHANNEL GROUP BY Language 
 SELECT T1.series_name FROM TV_series AS T1 JOIN TV_channel AS T2 ON T1.channel = T2.id JOIN cartoon AS T3 ON T2.id = T3.id WHERE T3.title = "The Rise of the Blue Beetle!"; 
 SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel = T2.id WHERE T1.title = "The Rise of the Blue Beetle" 
 SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Series_name = "Sky Radio" 
 SELECT T1.title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel = T2.id WHERE T2.series_name = "Sky Radio" 
 SELECT Episode FROM TV_series ORDER BY Rating DESC 
 SELECT Episode FROM TV_series ORDER BY Rating DESC 
 SELECT T1.episode,        T1.rating FROM TV_series AS T1 JOIN CHANNEL AS T2 ON T1.channel = T2.id ORDER BY T1.rating DESC LIMIT 3 
 SELECT T1.episode,        T1.rating FROM TV_series AS T1 JOIN episodes AS T2 ON T1.id = T2.id ORDER BY T1.18_49_Rating_Share DESC LIMIT 3 
 SELECT min(share),        max(share) FROM TV_series 
 SELECT max(share),        min(share) FROM TV_series 
 SELECT T1.Original_air_date FROM TV_series AS T1 JOIN episode AS T2 ON T1.id = T2.id WHERE T2.Episode = "A Love of a Lifetime" 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN episode AS T2 ON T1.id = T2.id WHERE T2.Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.channel = T2.id WHERE T1.episode = "A Love of a Lifetime" 
 SELECT T2.title FROM TV_series AS T1 JOIN episode AS T2 ON T1.id = T2.id WHERE T2.episode = "A Love of a Lifetime" 
 SELECT T1.EPISODE FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Series_name = "Sky Radio" 
 SELECT T1.EPISODE FROM TV_series AS T1 JOIN episodes AS T2 ON T1.id = T2.series_id WHERE T1.title = "Sky Radio" 
 SELECT COUNT (DISTINCT directed_by),        directed_by FROM Cartoon GROUP BY directed_by 
 SELECT directed_by,        count(*) FROM Cartoon GROUP BY directed_by 
 SELECT Production_code,        Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1 
 SELECT production_code,        channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT package_option,        series_name FROM TV_series WHERE hight_definition_TV = 'yes' 
 SELECT package_option,        series_name FROM TV_channel WHERE hight_definition_TV = 'yes' 
 SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.channel WHERE T2.WRITTEN_BY = "Todd Casey" 
 SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.WRITTEN_BY = "Todd Casey" 
 SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.WRITTEN_BY = "Todd Casey" 
 SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM Cartoon WHERE Written_by = "Todd Casey" 
 SELECT T1.series_name,        T1.Country FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.channel = T2.id JOIN Cartoon AS T3 ON T3.directed_by = T1.id WHERE T3.written_by = "Ben Jones" INTERSECT   SELECT T1.series_name,          T1.Country   FROM TV_series AS T1   JOIN TV_Channel AS T2 ON T1.channel = T2.id   JOIN Cartoon AS T3 ON T3.directed_by = T1.id WHERE T3.written_by = "Michael Chang" 
 SELECT T1.series_name,        T1.Country FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.id = T2.id WHERE T2.directed_by = "Ben Jones"   OR T2.directed_by = "Michael Chang" 
 SELECT T1.pixel_aspect_ratio_PAR,        T2.Country FROM TV_Channel AS T1 JOIN TV_Channel AS T2 ON T1.id = T2.id WHERE T1.language!= 'English' 
 SELECT pixel_aspect_ratio_PAR,        country FROM TV_channel WHERE language!= 'English' 
 SELECT id FROM TV_CHANNEL GROUP BY Country HAVING count(*) > 2 
 SELECT id FROM TV_CHANNEL GROUP BY id HAVING count(*) > 2 
 SELECT id FROM TV_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT id FROM TV_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel EXCEPT SELECT package_option FROM cartoon AS t1 JOIN TV_channel AS t2 ON t1.channel = t2.id JOIN cartoon AS t3 ON t3.channel = t2.id WHERE t1.directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel EXCEPT SELECT package_option FROM cartoon AS t1 JOIN TV_channel AS t2 ON t1.channel = t2.id JOIN cartoon AS t3 ON t3.channel = t2.id WHERE t1.directed_by = "Ben Jones" 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT T1.Final_Table_Made,        T2.Best_Finish FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT max(T1.Best_Finish) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000 
 SELECT max(T1.Final_Table_Made) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000 
 SELECT Name FROM people 
 SELECT Name FROM people 
 SELECT Name FROM people WHERE Earnings > 300000 
 SELECT Name FROM people WHERE Earnings > 300000 
 SELECT Name FROM people ORDER BY Final_Table_Made ASC 
 SELECT Name FROM people ORDER BY Final_Table_Made ASC 
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1 
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
 SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
 SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
 SELECT Name FROM people ORDER BY Earnings DESC 
 SELECT Name FROM people ORDER BY Earnings DESC 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Name,        Birth_Date FROM people ORDER BY Name ASC 
 SELECT Name,        Birth_Date FROM people ORDER BY Name 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
 SELECT Name FROM people EXCEPT SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(*) FROM area_code_state 
 SELECT contestant_number,        contestant_name FROM contestants ORDER BY contestant_name DESC 
 SELECT vote_id,        phone_number,        state FROM VOTES 
 SELECT max(area_code),        min(area_code) FROM AREA_CODE_STATE 
 SELECT created FROM VOTES WHERE state = "CA" ORDER BY created DESC LIMIT 1 
 SELECT contestant_name FROM contestants EXCEPT SELECT contestant_name FROM contestants WHERE contestant_name = 'Jessie Alloway' 
 SELECT DISTINCT state,                 created FROM VOTES 
 SELECT T1.contestant_number,        T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2 
 SELECT T1.contestant_number,        T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1 
 SELECT count(*) FROM votes WHERE state = 'NY'   OR state = 'CA' 
 SELECT count(*) FROM contestants WHERE contestant_number NOT IN     (SELECT contestant_number      FROM votes) 
 SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.created,        T2.state,        T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = "Tabatha Gehling" 
 SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code = T2.state WHERE T2.phone_number = 'Tabatha Gehling' INTERSECT   SELECT T1.area_code   FROM AREA_CODE_STATE AS T1   JOIN VOTES AS T2 ON T1.area_code = T2.state WHERE T2.phone_number = 'Kelly Clauss' 
 SELECT T2.contestant_name FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name LIKE '%Al%' 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT count(*) FROM country WHERE GovernmentForm = "Republic" 
 SELECT count(*) FROM country WHERE governmentform ='republic' 
 SELECT sum(surfaceArea) FROM country WHERE Region = 'Caribbean' 
 SELECT surfacearea FROM country WHERE continent = 'Caribbean' GROUP BY surfacearea HAVING sum(surfacearea) > 0 
SELECT continent FROM country WHERE name = "Anguilla";
 SELECT continent FROM country WHERE name = "Anguilla"; 
 SELECT Region FROM city WHERE Name = "Kabul"; 
 SELECT Region FROM country WHERE Name = "Kabul"; 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.name = "Aruba" GROUP BY t1.language ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.name = "Aruba"; 
 SELECT population,        lifeexpectancy FROM country WHERE name = "Brazil" 
 SELECT population,        lifeexpectancy FROM country WHERE name = "Brazil"; 
 SELECT region,        population FROM country WHERE name = "angola"; 
 SELECT region,        population FROM country WHERE name = "angola"; 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = "Central Africa" 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Central Africa" 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t2.countrycode = t3.countrycode WHERE t1.region = 'Asia'   AND t1.lifeexpectancy =     (SELECT min(t1.lifeexpectancy)      FROM country AS t1      JOIN countrylanguage AS t2 ON t1.code = t2.countrycode      WHERE t1.region = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1 
 SELECT sum(population),        max(gnp) FROM country WHERE continent = 'Asia' 
 SELECT T1.population,        T2.gnp FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' ORDER BY T2.gnp DESC LIMIT 1 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Africa"   AND T1.IsOfficial = "yes" 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = "Africa"   AND T2.IsOfficial = "yes" 
 SELECT sum(surfaceArea) FROM country WHERE continent = 'Asia' INTERSECT   SELECT sum(surfaceArea)   FROM country WHERE continent = 'Europe' 
 SELECT sum(surfaceArea) FROM country WHERE continent = 'Asia'   OR continent = 'Europe' 
 SELECT population FROM city WHERE district = "Gelderland"; 
 SELECT sum(Population) FROM city WHERE District = "Gelderland"; 
 SELECT avg(gnp),        sum(population) FROM country WHERE code IN     (SELECT code      FROM country      WHERE governmentform = 'US') 
 SELECT avg(GNP),        sum(Population) FROM country WHERE CountryCode IN     (SELECT CountryCode      FROM country AS T1      JOIN country AS T2 ON T1.Code = T2.Code2      WHERE T1.Name = "US") 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT sum(percentage) FROM countrylanguage WHERE countrycode = "ar" 
 SELECT count(*) FROM countrylanguage WHERE CountryCode = "AR" 
 SELECT count(*) FROM countrylanguage WHERE CountryCode = "AFG"   AND IsOfficial = "yes"; 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "AFG"   AND isofficial = "yes"; 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t2.language ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t2.countrycode ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT count(*) FROM countrylanguage WHERE language = 'Dutch' INTERSECT   SELECT count(*)   FROM countrylanguage WHERE language = 'English' 
 SELECT count(*) FROM countrylanguage AS t1 JOIN country AS t2 ON t1.CountryCode = t2.Code WHERE t1.Language = 'English' INTERSECT   SELECT count(*)   FROM countrylanguage AS t1   JOIN country AS t2 ON t1.CountryCode = t2.Code WHERE t1.Language = 'Dutch' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'english' INTERSECT   SELECT t1.name   FROM country AS t1   JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'french' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'english' INTERSECT   SELECT t1.name   FROM country AS t1   JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'french' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'English' INTERSECT   SELECT t1.name   FROM country AS t1   JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'French' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = 'Yes'   AND t2.language = 'English'   OR t2.language = 'French' 
 SELECT count(DISTINCT continent) FROM country WHERE name = "China"   AND language = "Chinese" 
 SELECT count(*) FROM country WHERE name = "China"   AND region = "Asia"; 
 SELECT Region FROM country WHERE Language = 'English'   OR Language = 'Dutch' 
 SELECT Region FROM country WHERE Language = "Dutch"   OR Language = "English" 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'English'   OR t2.language = 'Dutch' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'English'   OR t2.language = 'Dutch' 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.continent = 'Asia' GROUP BY t1.language ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.continent = 'Asia' GROUP BY t1.language ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.governmentform = "republic" GROUP BY T1.language HAVING COUNT(*) = 1 
 SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = "Republic" GROUP BY T1.language HAVING COUNT(*) = 1 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code JOIN countrylanguage AS t3 ON t2.code = t3.countrycode WHERE t3.official = 'yes'   AND t1.population =     (SELECT MAX (t1.population)      FROM city AS t1      JOIN country AS t2 ON t1.countrycode = t2.code      WHERE t3.official = 'yes') 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code JOIN countrylanguage AS t3 ON t2.code = t3.countrycode WHERE t3.official = 'yes'   AND t3.language = 'english' GROUP BY t1.name ORDER BY t1.population DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'No' 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'No' 
 SELECT sum(T2.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'No' 
 SELECT count(*) FROM country WHERE name!= 'English' 
 SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN headofstate AS t3 ON t1.code = t3.code WHERE t3.headofstate = 'Beatrix' 
 SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN headofstate AS t3 ON t1.code = t3.code WHERE t3.headofstate = "Beatrix" 
 SELECT count(DISTINCT t1.language) FROM country AS t2 JOIN countrylanguage AS t1 ON t2.code = t1.countrycode WHERE t2.indepyear < 1930 
 SELECT count(DISTINCT t1.language) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.foundingyear < 1930 
 SELECT name FROM country WHERE surfaceArea >     (SELECT surfaceArea      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia')   AND continent = 'Africa' 
 SELECT name FROM country WHERE population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia')   AND continent = 'Africa' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = 'Asia' INTERSECT   SELECT t1.name   FROM country AS t1   JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = 'Africa' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = 'Asia' INTERSECT   SELECT t1.name   FROM country AS t1   JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = 'Africa' 
 SELECT CountryCode FROM country WHERE Language!= 'English' 
 SELECT CountryCode FROM country WHERE Name!= 'English' 
 SELECT CountryCode FROM countrylanguage WHERE Language!= 'English' 
 SELECT CountryCode FROM countrylanguage WHERE Language!= 'English' 
 SELECT Code FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE IsOfficial = 'Yes'      AND Language = 'English')   AND GovernmentForm!= 'Republic' 
 SELECT Code FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English')   AND GovernmentForm!= 'Republic' 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.continent = "Europe" EXCEPT SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code WHERE t2.continent = "Europe"   AND t2.language = "english" 
 SELECT name FROM city WHERE countrycode!= 'eng'   AND countrycode IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'english') 
 SELECT DISTINCT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code JOIN countrylanguage AS t3 ON t2.code = t3.countrycode WHERE t3.language = 'Chinese'   AND t2.continent = 'Asia' 
 SELECT DISTINCT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode = t2.code JOIN countrylanguage AS t3 ON t2.code = t3.countrycode WHERE t2.continent = 'Asia' INTERSECT   SELECT DISTINCT t1.name   FROM city AS t1   JOIN country AS t2 ON t1.countrycode = t2.code   JOIN countrylanguage AS t3 ON t2.code = t3.countrycode WHERE t3.language = 'Chinese' 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT t1.name,        t1.population,        t1.head_of_state FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.surface_area =     (SELECT MAX (surface_area)      FROM country) 
 SELECT name,        population,        head_of_state FROM country ORDER BY surface_area DESC LIMIT 1 
 SELECT T1.name,        count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.code HAVING count(*) >= 3 
 SELECT T1.name,        count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING count(*) > 2 
 SELECT T2.District,        COUNT(*) FROM city AS T1 JOIN city AS T2 ON T1.District = T2.District WHERE T1.Population >     (SELECT avg(population)      FROM city) GROUP BY T2.District 
 SELECT T2.District,        T1.Population FROM city AS T1 JOIN city AS T2 ON T1.District = T2.District WHERE T1.Population >     (SELECT avg(population)      FROM city) 
 SELECT governmentform,        avg(LifeExpectancy) FROM country GROUP BY governmentform HAVING avg(LifeExpectancy > 72) 
 SELECT sum(T1.Population),        T2.GovernmentForm FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.GovernmentForm HAVING avg(T1.LifeExpectancy) > 72 
 SELECT T1.continent,        avg(T2.lifeexpectancy),        sum(T2.population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.continent HAVING avg(T2.lifeexpectancy) < 72 
 SELECT T1.Continent,        T2.Population,        avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent HAVING avg(T2.LifeExpectancy < 72) 
 SELECT name,        surfaceArea FROM country ORDER BY surfaceArea DESC LIMIT 5 
 SELECT name,        surfaceArea FROM country ORDER BY surfaceArea DESC LIMIT 5 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT name FROM city ORDER BY population DESC LIMIT 3 
 SELECT count(*) FROM country WHERE continent = 'Asia' 
 SELECT count(*) FROM country WHERE continent = 'Asia' 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000; 
 SELECT sum(population),        avg(surfaceArea) FROM country WHERE continent = 'North America'   AND surfaceArea > 3000 
 SELECT sum(population),        avg(surfaceArea) FROM country WHERE continent = 'North America'   AND surfaceArea > 3000 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000; 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code GROUP BY t1.language ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode = t2.code GROUP BY t1.language ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.language,        T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode = T2.code JOIN countrylanguage AS T3 ON T2.code = T3.countrycode GROUP BY T1.name ORDER BY T3.percentage DESC 
 SELECT T1.CountryCode,        T2.Language,        T2.Percentage FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Language,          T2.Percentage ORDER BY T2.Percentage DESC 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.percentage =     (SELECT MAX (T2.percentage)      FROM country AS T1      JOIN countrylanguage AS T2 ON T1.code = T2.countrycode      WHERE T2.language = "spanish") 
 SELECT count(*) FROM countrylanguage WHERE language = "spanish" 
 SELECT t1.code FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.percentage =     (SELECT MAX (t2.percentage)      FROM countrylanguage AS t2      WHERE t2.language = "spanish") 
 SELECT CountryCode FROM countrylanguage WHERE Language = "Spanish" 
 SELECT count(*) FROM conductor 
 SELECT count(*) FROM conductor 
 SELECT Name FROM conductor ORDER BY Age ASC 
 SELECT Name FROM conductor ORDER BY Age 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT avg(Attendance) FROM show 
 SELECT avg(Attendance) FROM show 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 
 SELECT T2.name FROM conductor AS T1 JOIN performance AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Name,        T2.Orchestra FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID = T2.Conductor_ID 
 SELECT T1.Name,        T2.Orchestra FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID = T2.Conductor_ID 
 SELECT T2.Name FROM performance AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) > 1 
 SELECT T2.Name FROM performance AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) > 1 
 SELECT T2.Name FROM performance AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM performance AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.conductor_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008 
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2008 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) DESC 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) DESC 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN     (SELECT Orchestra_ID      FROM performance) 
 SELECT Orchestra_ID FROM orchestra WHERE Orchestra_ID NOT IN     (SELECT Orchestra_ID      FROM performance) 
 SELECT Record_Company FROM orchestra WHERE Record_Company NOT IN     (SELECT Record_Company      FROM orchestra      WHERE YEAR_OF_FOUNDED < 2003        OR YEAR_OF_FOUNDED > 2003) 
 SELECT Record_Company FROM orchestra WHERE Record_Company IN     (SELECT Record_Company      FROM orchestra      WHERE Year_of_Founded < 2003 INTERSECT        SELECT Record_Company        FROM orchestra WHERE Year_of_Founded > 2003) 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' INTERSECT   SELECT count(*)   FROM orchestra WHERE major_record_format = 'DVD' 
 SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*) > 1 
 SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING count(*) > 1 
 SELECT count(*) FROM Highschooler 
 SELECT count(*) FROM Highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT grade FROM Highschooler 
 SELECT grade FROM Highschooler 
 SELECT grade FROM Highschooler WHERE name = "Kyle" 
 SELECT grade FROM Highschooler WHERE name = "Kyle" 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT ID FROM Highschooler WHERE name = "Kyle" 
 SELECT ID FROM Highschooler WHERE name = "Kyle" 
 SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT T1.student_id,        count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id GROUP BY T1.student_id 
 SELECT count(*),        T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name 
 SELECT T1.name,        count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id 
 SELECT T1.name,        count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.friend_id GROUP BY T1.id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id GROUP BY T1.friend_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM highschooler WHERE ID IN     (SELECT student_id      FROM friend      GROUP BY student_id      HAVING count(*) >= 3) 
 SELECT name FROM highschooler WHERE ID IN     (SELECT student_id      FROM friend      GROUP BY student_id      HAVING count(*) >= 3) 
 SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T1.friend_id = 1 
 SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = "Kyle" 
 SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = "Kyle" 
 SELECT count(*) FROM Friend WHERE friend_id = 1 
 SELECT student_id FROM highschooler EXCEPT SELECT student_id FROM friend 
 SELECT student_id FROM highschooler EXCEPT SELECT student_id FROM friend 
 SELECT name FROM highschooler WHERE ID NOT IN     (SELECT student_id      FROM friend) 
 SELECT name FROM highschooler WHERE ID NOT IN     (SELECT student_id      FROM friend) 
 SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id JOIN likes AS T3 ON T3.student_id = T1.id WHERE T3.liked_id!= T2.friend_id 
 SELECT T1.student_id FROM likes AS T1 JOIN likes AS T2 ON T1.liked_id = T2.liked_id JOIN friend AS T3 ON T1.friend_id = T3.friend_id JOIN highschooler AS T4 ON T3.student_id = T4.id WHERE T4.name = "Alice"   AND T4.grade = 9 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id JOIN likes AS T3 ON T3.student_id = T1.id JOIN likes AS T4 ON T4.liked_id = T1.id WHERE T3.student_id!= T4.liked_id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id JOIN likes AS T3 ON T3.student_id = T1.id WHERE T3.liked_id = T2.friend_id   AND T2.friend_id = T1.id 
 SELECT count(*),        student_id FROM likes GROUP BY student_id 
 SELECT T1.student_id,        count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.student_id 
 SELECT T1.name,        count(*) FROM Highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.id 
 SELECT T1.name,        count(*) FROM Highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.liked_id GROUP BY T1.id 
 SELECT T2.name FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id WHERE grade > 5 INTERSECT   SELECT T1.name   FROM highschooler AS T1   JOIN friend AS T2 ON T1.id = T2.friend_id WHERE grade > 5 
 SELECT name FROM highschooler WHERE grade > 5 INTERSECT   SELECT T1.name   FROM highschooler AS T1   JOIN friend AS T2 ON T1.id = T2.friend_id   GROUP BY T2.friend_id   HAVING count(*) >= 2 
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id = T2.id WHERE T2.name = "Kyle" 
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id = T2.id WHERE T2.name = "Kyle" 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id GROUP BY T2.friend_id 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.friend_id GROUP BY T2.friend_id 
 SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT grade FROM highschooler WHERE grade =     (SELECT min(grade)      FROM highschooler      WHERE grade > 0)   AND ID NOT IN     (SELECT student_id      FROM friend      WHERE friend_id IN          (SELECT student_id           FROM likes           WHERE grade > 0)) 
 SELECT T1.state FROM owners AS T1 JOIN professionals AS T2 ON T1.owner_id = T2.professional_id 
 SELECT T1.state,        T2.state FROM owners AS T1 JOIN professionals AS T2 ON T1.owner_id = T2.owner_id 
 SELECT avg(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT avg(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT T1.first_name,        T1.last_name,        T2.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = "Indiana"   OR T2.treatment_id > 2 
 SELECT T1.professional_id,        T1.last_name,        T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2 UNION SELECT T1.professional_id,        T1.last_name,        T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Owners AS T3 ON T1.professional_id = T3.owner_id WHERE T3.state = "Indiana" 
 SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment > 1000 
 SELECT T1.name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.abandoned_yn = 'Y'   AND T1.weight > 1000 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT T1.professional_id,        T1.role_code,        T1.email_address FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code WHERE T2.treatment_type_description = "None" 
 SELECT T1.professional_id,        T1.role_code,        T1.email_address FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code WHERE T2.treatment_type_description = "None" 
 SELECT T1.owner_id,        T1.first_name,        T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,        T1.first_name,        T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.professional_id,        T1.role_code,        T1.first_name FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code JOIN Treatments AS T3 ON T3.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.professional_id,        T1.role_code,        T1.first_name FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code JOIN Treatments AS T3 ON T3.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,        T1.last_name FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id = T2.professional_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,        T1.last_name FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT t3.treatment_type_description FROM charges AS t1 JOIN treatments AS t2 ON t1.charge_id = t2.treatment_id JOIN treatment_types AS t3 ON t2.treatment_type_code = t3.treatment_type_code GROUP BY t1.charge_id ORDER BY sum(t1.charge_amount) ASC LIMIT 1 
 SELECT t3.treatment_type_description FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code JOIN charges AS t3 ON t2.treatment_id = t3.treatment_id WHERE t3.cost_of_treatment =     (SELECT min(cost_of_treatment)      FROM charges) 
 SELECT T1.owner_id,        T1.zip_code FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,        T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1 
 SELECT T1.professional_id,        T2.cell_phone FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.professional_id,        T2.cell_number FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.first_name,        T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment <     (SELECT min(cost_of_treatment)      FROM treatments) 
 SELECT T1.first_name,        T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT T1.date_of_treatment,        T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id 
 SELECT T1.date_of_treatment,        T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id 
 SELECT T1.cost_of_treatment,        T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code 
 SELECT T1.treatment_type_description,        T2.cost_of_treatment FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code 
 SELECT T1.first_name,        T1.last_name,        T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.first_name,        T1.last_name,        T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.first_name,        T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.first_name,        T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.name,        T2.date_of_treatment FROM Dogs AS T1 JOIN Treatment_Types AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name = "Rottweiler" 
 SELECT T1.name,        T2.date_adopted FROM Dogs AS T1 JOIN Treatment_Types AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name = "Rottweiler" 
 SELECT T1.first_name,        T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = "Virginia" 
 SELECT T1.first_name,        T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = "Virginia" 
 SELECT T1.date_arrived,        T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT T1.date_arrived,        T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age =     (SELECT min(age)      FROM dogs) 
 SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age =     (SELECT min(age)      FROM dogs) 
 SELECT email_address FROM owners WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT email_address FROM owners WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT count(*) FROM dogs AS t1 JOIN treatments AS t2 ON t1.dog_id = t2.dog_id 
 SELECT count(*) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T1.treatment_type_code = "Breed" 
 SELECT count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.dog_id!= 0 
 SELECT count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.dog_id!= 0 
 SELECT T1.role_code,        T2.street,        T2.city,        T2.state FROM Professionals AS T1 JOIN Addresses AS T2 ON T1.professional_id = T2.professional_id WHERE T2.city LIKE '%West%' 
 SELECT T1.role_code,        T1.street,        T1.city,        T1.state FROM Professionals AS T1 JOIN city AS T2 ON T1.city = T2.city WHERE T2.city LIKE '%West%' 
 SELECT first_name,        last_name,        email_address FROM owners WHERE state LIKE '%North%' 
 SELECT T1.first_name,        T1.last_name,        T1.email_address FROM owners AS T1 JOIN addresses AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state LIKE '%North%' 
 SELECT count(*) FROM Dogs WHERE age <     (SELECT avg(age)      FROM Dogs) 
 SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age)               FROM Dogs) 
 SELECT max(cost_of_treatment) FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT T1.cost_of_treatment FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T1.date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments) 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM Professionals EXCEPT SELECT count(*) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Dogs AS T3 ON T3.dog_id = T1.dog_id 
 SELECT count(*) FROM Professionals EXCEPT SELECT count(*) FROM Treatments 
 SELECT T1.name,        T1.age,        T1.weight FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.abandoned_yn = "1" 
 SELECT T1.name,        T1.age,        T1.weight FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.abandoned_yn = "1" 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT charge_type,        charge_amount FROM Charges 
 SELECT charge_type,        charge_amount FROM Charges 
 SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT T1.breed_name,        T2.size_description FROM Breeds AS T1 JOIN Sizes AS T2 ON T1.breed_code = T2.size_code 
 SELECT DISTINCT T1.breed_name,                 T2.size_description FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code 
 SELECT T1.first_name,        T2.treatment_type_description FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code JOIN Treatments AS T3 ON T3.professional_id = T1.professional_id 
 SELECT T1.first_name,        T1.role_code,        T2.treatment_type_description FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code = T2.role_code JOIN Treatments AS T3 ON T3.professional_id = T1.professional_id 
 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT T2.Title,        T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID 
 SELECT T2.Title,        T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1 
 SELECT T2.Name,        SUM(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name 
 SELECT T2.Sales,        T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name 
 SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
 SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT count(*) FROM Other_Available_Features 
 SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = "AirCon" 
 SELECT property_type_description FROM Ref_Property_Types 
 SELECT T1.property_name FROM properties AS T1 JOIN other_property_features AS T2 ON T1.property_id = T2.property_id WHERE T1.room_count > 1 
