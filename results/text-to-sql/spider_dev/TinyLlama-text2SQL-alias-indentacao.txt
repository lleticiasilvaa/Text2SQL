SELECT count(DISTINCT singer.Name) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID 
SELECT count(*) FROM singer 
SELECT Name,        Country,        Age FROM singer ORDER BY Age 
SELECT Name,        Country,        Age FROM singer ORDER BY Age DESC 
SELECT avg(age),        min(age),        max(age) FROM singer WHERE Country = 'France' 
SELECT avg(age),        min(age),        max(age) FROM singer WHERE Country = 'France' 
SELECT singer.Name,        concert.Year FROM singer JOIN concert_singer ON singer.Singer_ID = concert_singer.Singer_ID JOIN singer_in_concert ON concert_singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer_in_concert.Is_male = 1 ORDER BY singer.Age LIMIT 1 
SELECT singer.Name,        singer.Country,        singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Is_male = 1   AND singer.Age =     (SELECT min(Age)      FROM singer) 
SELECT DISTINCT Country FROM singer WHERE Age > 20 
SELECT DISTINCT Country FROM singer WHERE Age > 20 
SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age >     (SELECT avg(Age)      FROM singer) 
SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Is_male = 1   AND singer.Age >   (SELECT avg(Age)    FROM singer) 
SELECT stadium.location,        stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE stadium.capacity BETWEEN 5000 AND 10000 
SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
SELECT max(capacity),        avg(capacity) FROM stadium 
SELECT avg(capacity),        max(capacity) FROM stadium 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id ORDER BY stadium.capacity DESC LIMIT 1 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id ORDER BY stadium.capacity DESC LIMIT 1 
SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
SELECT stadium.name,        count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id 
SELECT stadium.capacity,        count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE stadium.name NOT IN     (SELECT stadium.name      FROM concert      JOIN stadium ON concert.stadium_id = stadium.stadium_id) 
SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
SELECT Country FROM singer WHERE Age > 40   AND Age < 30 
SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity > 1000 EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 
SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity > 1000 EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 
SELECT concert_Name,        Theme,        COUNT(*) FROM concert GROUP BY Theme 
SELECT concert_name,        theme,        count(*) FROM concert GROUP BY concert_name 
SELECT singer.Name,        count(*) FROM singer_in_concert JOIN concert ON singer_in_concert.Singer_ID = concert.Singer_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name 
SELECT singer.Name,        count(*) FROM singer JOIN concert ON singer.Singer_ID = concert.Singer_ID GROUP BY singer.Name 
SELECT singer.Name FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014 
SELECT singer.Name FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014 
SELECT singer.Name,        singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Song_Name = "Hey" 
SELECT singer.Name,        singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Song_Name LIKE '%Hey%' 
SELECT stadium.name,        stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015 
SELECT stadium.name,        stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015 
SELECT count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE stadium.highest =     (SELECT max(highest)      FROM stadium) 
SELECT count(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium) 
SELECT count(*) FROM Pets WHERE weight > 10 
SELECT count(*) FROM Pets WHERE weight > 10 
SELECT min(weight) FROM Pets WHERE pet_age =     (SELECT min(pet_age)      FROM Pets) 
SELECT pet_age FROM Pets WHERE weight =     (SELECT min(weight)      FROM Pets) 
SELECT max(weight),        pettype FROM Pets GROUP BY pettype 
SELECT max(weight),        pettype FROM Pets GROUP BY pettype 
SELECT count(*) FROM Has_pet JOIN Pets ON Has_pet.PetID = Pets.PetID JOIN Student ON Student.StuID = Has_pet.StuID WHERE Student.age > 20 
SELECT count(*) FROM Has_pet JOIN Pets ON Has_pet.PetID = Pets.PetID JOIN Student ON Student.StuID = Has_pet.StuID WHERE Student.age > 20 
SELECT count(*) FROM Has_pet JOIN Pets ON Has_pet.PetID = Pets.PetID JOIN Student ON Has_pet.StuID = Student.StuID WHERE Student.sex = 'F'   AND Pets.pet_type = 'Dog' 
SELECT count(*) FROM Has_pet JOIN Pets ON Has_pet.PetID = Pets.PetID JOIN Student ON Has_pet.StuID = Student.StuID WHERE Student.sex = 'F' 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.pettype = 'Cat'   OR has_pet.pettype = 'Dog' 
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   OR pets.pettype = 'dog' 
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT   SELECT student.fname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' 
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' INTERSECT   SELECT student.fname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' 
SELECT major,        age FROM student EXCEPT SELECT student.major,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' 
SELECT major,        age FROM student EXCEPT SELECT student.major,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' 
SELECT StuID FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      WHERE PetType = "Cat") 
SELECT StuID FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      WHERE PetType = 'Cat') 
SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.pettype = 'Dog' EXCEPT SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.pettype = 'Cat' 
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Dog' EXCEPT SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'Cat' 
SELECT pet_type,        weight FROM Pets ORDER BY pet_age LIMIT 1 
SELECT pet_type,        pet_age FROM Pets ORDER BY pet_age LIMIT 1 
SELECT pet_id,        weight FROM Pets WHERE pet_age > 1 
SELECT pet_id,        weight FROM Pets WHERE pet_age > 1 
SELECT pet_type,        avg(pet_age),        max(pet_age) FROM Pets GROUP BY pet_type 
SELECT pet_type,        avg(pet_age),        max(pet_age) FROM Pets GROUP BY pet_type 
SELECT avg(weight),        pettype FROM Pets GROUP BY pettype 
SELECT pet_type,        avg(weight) FROM Pets GROUP BY pet_type 
SELECT student.fname,        student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' 
SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid 
SELECT pets.pet_id FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith' 
SELECT pets.pet_id FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith' 
SELECT count(*),        student.stuid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid 
SELECT student.StuID,        count(*) FROM has_pet JOIN student ON has_pet.StuID = student.StuID JOIN pets ON has_pet.PetID = pets.PetID GROUP BY student.StuID 
SELECT student.fname,        student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING count(*) > 1 
SELECT student.fname,        student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING count(*) > 1 
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3   AND pets.pettype = "Cat"   AND has_pet.stuid = student.stuid 
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "Cat"   AND pets.pet_age = 3 
SELECT avg(age) FROM student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet) 
SELECT avg(age) FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet) 
SELECT count(*) FROM continents 
SELECT count(*) FROM continents 
SELECT count(*),        continents.Continent,        continents.ContinentName FROM continents JOIN countries ON continents.ContId = countries.ContId GROUP BY continents.ContId 
SELECT continent.Continent,        continents.Continent,        count(*) FROM continents JOIN countries ON continents.ContId = countries.ContId GROUP BY continents.ContId 
SELECT count(*) FROM continents 
SELECT count(*) FROM continents 
SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.FullName 
SELECT car_makers.FullName,        count(*) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.FullName 
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.MakeId ORDER BY cars_data.Horsepower LIMIT 1 
SELECT car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make ORDER BY Horsepower LIMIT 1 
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE cars_data.Weight <     (SELECT avg(Weight)      FROM cars_data) 
SELECT model FROM cars_data WHERE Weight <     (SELECT avg(Weight)      FROM cars_data) 
SELECT car_makers.Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.MakeId JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Year = 1970 
SELECT DISTINCT car_makers.Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.MakeId JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = "1970" 
SELECT car_names.Make,        min(cars_data.Year) FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make GROUP BY cars_data.Make 
SELECT car_names.Make,        model_list.Year FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN cars_data ON cars_data.MakeId = car_names.MakeId WHERE cars_data.Year =     (SELECT min(Year)      FROM cars_data) 
SELECT DISTINCT model FROM car_names WHERE YEAR > 1980 
SELECT DISTINCT model FROM car_names WHERE YEAR > 1980 
SELECT count(*),        continents.Continent FROM continents JOIN car_makers ON continents.ContId = car_makers.ContId GROUP BY continents.ContId 
SELECT continent,        COUNT(*) FROM countries GROUP BY continent 
SELECT country FROM countries ORDER BY count(*) DESC LIMIT 1 
SELECT country.Continent FROM countries JOIN car_makers ON countries.ContId = car_makers.ContId GROUP BY countries.ContId ORDER BY count(*) DESC LIMIT 1 
SELECT car_names.Make,        count(*) FROM car_names JOIN model_list ON car_names.MakeId = model_list.MakeId GROUP BY car_names.Make 
SELECT car_makers.Maker,        count(*) FROM model_list JOIN car_names ON model_list.MakeId = car_names.MakeId JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.Maker 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId JOIN model_list ON cars_data.Model = model_list.Model WHERE car_names.Make = "amc"   AND model_list.Model = "hornet sportabout" 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId JOIN model_list ON cars_data.Model = model_list.Model WHERE car_names.Make = "amc"   AND model_list.Model = "hornet sportabout" 
SELECT count(*) FROM car_makers WHERE country = 'france' 
SELECT count(*) FROM car_makers WHERE country = 'France' 
SELECT count(*) FROM model_list WHERE country = 'USA' 
SELECT count(*) FROM model_list WHERE country = 'United States' 
SELECT avg(cars_data.mpg) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Cylinders = 4 
SELECT avg(cars_data.MPG) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Cylinders = 4 
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974 
SELECT min(cars_data.Weight) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Make = "Chevrolet"   AND car_names.Model = "Corvette"   AND cars_data.Year = 1974   AND cars_data.Cylinders = 8 
SELECT car_makers.Maker,        model_list.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_names.MakeId = car_makers.Id 
SELECT car_makers.Maker,        model_list.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_names.MakeId = car_makers.Id 
SELECT country.Continent,        countries.CountryId FROM countries JOIN car_makers ON countries.Continent = car_makers.ContId GROUP BY countries.CountryId HAVING count(*) >= 1 
SELECT country.countryname,        countries.countryid FROM countries JOIN car_makers ON countries.continent = car_makers.continent GROUP BY countries.countryid HAVING count(*) >= 1 
SELECT count(*) FROM cars_data WHERE Horsepower > 150 
SELECT count(*) FROM cars_data WHERE Horsepower > 150 
SELECT avg(Weight) FROM cars_data 
SELECT avg(Weight),        avg(Year) FROM cars_data GROUP BY YEAR 
SELECT country FROM countries WHERE continent = 'europe' GROUP BY country HAVING count(*) >= 3 
SELECT country.Continent FROM countries JOIN car_makers ON countries.Continent = car_makers.ContId GROUP BY countries.ContId HAVING count(*) >= 3 
SELECT max(cars_data.Horsepower),        car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.Cylinders = 3 
SELECT max(cars_data.Horsepower),        car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.Cylinders = 3   AND cars_data.Horsepower > 150 
SELECT car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.MPG =     (SELECT max(MPG)      FROM cars_data) 
SELECT car_names.Model FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON model_list.Model = cars_data.Model JOIN car_makers ON cars_data.Maker = car_makers.Id WHERE car_makers.FullName = "Toyota"   AND model_list.Maker = "Toyota"   AND cars_data.MPG =     (SELECT MAX (MPG)      FROM car_names) 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
SELECT avg(Edispl) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.MakeId WHERE car_names.Make = "Volvo" 
SELECT avg(Edispl) FROM cars_data WHERE Make = "Volvo" 
SELECT max(Accelerate),        Cylinders FROM cars_data GROUP BY Cylinders 
SELECT max(Accelerate) FROM cars_data 
SELECT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1 
SELECT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM cars_data WHERE Cylinders > 4 
SELECT count(*) FROM cars_data WHERE Cylinders > 4 
SELECT count(*) FROM cars_data WHERE YEAR = 1980 
SELECT count(*) FROM model_list WHERE YEAR = 1980 
SELECT count(*) FROM car_names JOIN model_list ON car_names.MakeId = model_list.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "American Motor Company" 
SELECT count(*) FROM model_list JOIN car_names ON model_list.MakeId = car_names.MakeId WHERE car_names.Make = "American Motor Company" 
SELECT car_makers.FullName,        car_names.MakeId FROM car_names JOIN model_list ON car_names.MakeId = model_list.MakeId JOIN car_makers ON car_names.Maker = car_makers.Id GROUP BY car_makers.FullName HAVING count(*) > 3 
SELECT car_makers.Maker,        model_list.ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.Make JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.Maker HAVING count(*) > 3 
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.MakeId = car_names.MakeId WHERE car_names.FullName = "General Motors"   OR car_names.Weight > 3500 
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.MakeId = car_names.MakeId JOIN cars_data ON model_list.MakeId = cars_data.MakeId WHERE cars_data.Accelerate > 3500   OR cars_data.Make = "General Motors" 
SELECT YEAR FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 
SELECT DISTINCT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT   SELECT YEAR   FROM cars_data WHERE Weight > 3000 
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
SELECT horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Make = "Volvo" ORDER BY cars_data.Accelerate LIMIT 1 
SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Make = "Volvo" ORDER BY cars_data.Accelerate LIMIT 1 
SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data) 
SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data) 
SELECT count(*) FROM car_makers WHERE country > 2 
SELECT count(*) FROM car_makers WHERE country > 2 
SELECT count(*) FROM cars_data WHERE Cylinders > 6 
SELECT count(*) FROM cars_data WHERE Cylinders > 6 
SELECT model FROM car_names WHERE Cylinders = 4   AND Horsepower =     (SELECT max(Horsepower)      FROM car_names) 
SELECT model FROM cars_data WHERE Cylinders = 4 GROUP BY model ORDER BY max(Horsepower) LIMIT 1 
SELECT car_names.Make,        car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.Horsepower >     (SELECT min(Horsepower)      FROM cars_data) EXCEPT SELECT car_names.Make,        car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.Horsepower <     (SELECT max(Horsepower)      FROM cars_data) 
SELECT car_names.Make,        car_names.Make FROM cars_data JOIN car_names ON cars_data.Make = car_names.Make WHERE cars_data.Horsepower < 4 
SELECT max(cars_data.MPG) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Make = "Chevrolet"   AND car_names.Year < 1980   AND car_names.Made = "1980"   OR car_names.Make = "Chevrolet"   AND car_names.Year < 1980   AND car_names.Made = "1981"   OR car_names.Make = "Chevrolet"   AND car_names.Year < 1980   AND car_names.Made = "1982"   OR car_names.Make = "Chevrolet"   AND car_names.Year < 1980   AND car_names.Made = "1983"   OR car_names.Make = "Chevrolet"   AND car_names.Year < 1980   AND car_names
SELECT max(cars_data.MPG) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Cylinders = 8   AND cars_data.Year < 1980 
SELECT model FROM car_names WHERE Weight < 3500   AND Make!= 'Ford Motor Company' 
SELECT DISTINCT model FROM car_names WHERE Weight < 3500 EXCEPT SELECT model FROM car_names WHERE Maker = "Ford Motor Company" 
SELECT country FROM countries EXCEPT SELECT country FROM countries 
SELECT country FROM countries WHERE countryid NOT IN     (SELECT countryid      FROM car_makers) 
SELECT car_makers.id,        car_makers.Maker FROM car_makers JOIN car_names ON car_makers.id = car_names.MakeId GROUP BY car_makers.id HAVING count(*) >= 2 UNION SELECT car_makers.id,        car_makers.Maker FROM car_makers JOIN car_names ON car_makers.id = car_names.MakeId GROUP BY car_makers.id HAVING count(*) > 3 
SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid GROUP BY car_makers.id HAVING count(*) >= 2   AND sum(car_names.mpg) > 3 
SELECT country.ContId,        countries.countryname FROM countries JOIN car_makers ON countries.continent = car_makers.contid GROUP BY countries.contid HAVING count(*) > 3 UNION SELECT country.ContId,        countries.countryname FROM countries JOIN car_makers ON countries.continent = car_makers.contid JOIN model_list ON car_makers.id = model_list.maker WHERE model_list.model = 'fiat' 
SELECT countryid,        countryname FROM countries WHERE countryid > 3 UNION SELECT countryid,        countryname FROM car_makers WHERE countryid > 1 
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways" 
SELECT Country FROM airlines WHERE Airline = "Jetblue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways" 
SELECT Airline,        Abbreviation FROM airlines WHERE Country = "USA" 
SELECT Airlines.Airline,        Airlines.Abbreviation FROM airlines JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Country = 'USA' 
SELECT airports.AirportCode,        airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.City = "Anthony" 
SELECT airports.AirportCode,        airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = "Anthony" 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airports 
SELECT count(*) FROM airports 
SELECT count(*) FROM flights 
SELECT count(*) FROM flights 
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
SELECT count(*) FROM airlines WHERE Country = 'USA' 
SELECT count(*) FROM airlines WHERE Country = 'USA' 
SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.AirportName = 'AKO' 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.Airline = 1   AND airports.AirportName = 'AKO' 
SELECT airports.AirportName FROM airports JOIN airports ON airports.AirportCode = airports.AirportCode WHERE airports.City = 'Aberdeen' 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'APG' 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'APG' 
SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.Country = "Australia"   AND airports.AirportName = "ATO" 
SELECT count(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'   AND airports.City = 'Ashley' 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN flights ON flights.Airline = 1 WHERE airports.City = "Aberdeen"   AND airports.Country = "United Kingdom"   AND flights.DestAirport = "Ashley" 
SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Airline = 'JetBlue Airways' 
SELECT count(*) FROM flights JOIN airlines ON flights.DestAirport = airlines.Airline WHERE airlines.Airline = "JetBlue Airways" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN flights ON flights.Airline = 1 WHERE airports.City = "Asia"   AND airports.AirportName = "Asia"   AND airports.Country = "Asia" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN flights ON flights.Airline = 1 WHERE airports.Country = "United States"   AND airports.City = "ASY" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN flights ON flights.Airline = 1 WHERE airports.City = "AHD"   AND airports.AirportName = "United Airlines" 
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN flights ON flights.Airline = 1 WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airports.AirportName = "AHD" 
SELECT count(*) FROM flights JOIN airlines ON flights.DestAirport = airlines.Airline WHERE airlines.Airline = 'United Airlines'   AND airports.City = 'Aberdeen' 
SELECT count(*) FROM flights JOIN airlines ON flights.DestAirport = airlines.Airline WHERE airlines.Airline = "United Airlines"   AND airports.City = "Aberdeen" 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) ASC LIMIT 1 
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport ORDER BY flights.count LIMIT 1 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT Abbreviation,        Country FROM airlines GROUP BY Abbreviation ORDER BY count(*) ASC LIMIT 1 
SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.abbreviation ORDER BY count(*) ASC LIMIT 1 
SELECT flights.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'AHD' 
SELECT flights.SourceAirport FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.SourceAirport = "AHD" 
SELECT flights.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'AHD' 
SELECT flights.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "AHD" 
SELECT airlines.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG' INTERSECT   SELECT airlines.Airline   FROM airports   JOIN flights ON airports.AirportCode = flights.DestAirport   JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' 
SELECT airlines.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.Country = "Austria"   AND airports.CountryAbbrev = "AUT" UNION SELECT airlines.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT flights.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'CVO' EXCEPT SELECT flights.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'APG' 
SELECT airlines.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airlines ON airlines.uid = flights.SourceAirport WHERE airports.city = "CVO" EXCEPT SELECT airlines.Airline FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airlines ON airlines.uid = flights.SourceAirport WHERE airports.city = "APG" 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline HAVING count(*) >= 10 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline HAVING count(*) >= 10 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline HAVING count(*) < 200 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline HAVING count(*) < 200 
SELECT flights.FlightNo FROM airlines JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Airline = "United Airlines" 
SELECT flights.FlightNo FROM airlines JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Airline = "United Airlines" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "APG" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "APG" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "APG" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "APG" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" 
SELECT count(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen"   OR airports.City = "Abilene" 
SELECT count(*) FROM flights WHERE DestAirport = "Aberdeen"   OR DestAirport = "Abilene" 
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportName = "No Flights" 
SELECT AirportCode FROM airports WHERE AirportName!=     (SELECT AirportName      FROM flights      WHERE SourceAirport = "JFK")   OR AirportName!=     (SELECT AirportName      FROM flights      WHERE DestAirport = "JFK") 
SELECT count(*) FROM employee 
SELECT count(*) FROM employee 
SELECT Name FROM employee ORDER BY Age ASC 
SELECT name FROM employee ORDER BY Age ASC 
SELECT count(*),        city FROM employee GROUP BY city 
SELECT count(*),        city FROM employee GROUP BY city 
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
SELECT count(*),        LOCATION FROM shop GROUP BY LOCATION 
SELECT count(*),        LOCATION FROM shop GROUP BY LOCATION 
SELECT manager_name,        district FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT employee.manager_name,        shop.district FROM shop JOIN employee ON shop.manager_name = employee.employee_id JOIN hiring ON employee.employee_id = hiring.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE shop.number_products =     (SELECT max(number_products)      FROM shop) 
SELECT min(number_products),        max(number_products) FROM shop 
SELECT min(number_products),        max(number_products) FROM shop 
SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY count(*) DESC LIMIT 1 
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY count(*) DESC LIMIT 1 
SELECT employee.Name FROM hiring JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus =     (SELECT max(Bonus)      FROM evaluation) 
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus =     (SELECT max(Bonus)      FROM evaluation) 
SELECT Name FROM employee WHERE Employee_ID NOT IN     (SELECT Employee_ID      FROM evaluation) 
SELECT Name FROM employee WHERE Employee_ID NOT IN     (SELECT Employee_ID      FROM evaluation) 
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM shop ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
SELECT count(*),        shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id 
SELECT count(*),        shop.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name 
SELECT sum(bonus) FROM evaluation 
SELECT sum(bonus) FROM evaluation 
SELECT * FROM hiring 
SELECT * FROM hiring 
SELECT district FROM shop WHERE number_products < 3000 INTERSECT   SELECT district   FROM shop WHERE number_products > 10000 
SELECT district FROM shop WHERE number_products < 3000 INTERSECT   SELECT district   FROM shop WHERE number_products > 10000 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(*) FROM Documents 
SELECT count(*) FROM Documents 
SELECT Document_ID,        Document_Name,        Document_Description FROM Documents 
SELECT Document_ID,        Document_Name,        Document_Description FROM Documents 
SELECT Documents.document_name,        Templates.template_id FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Documents.document_description LIKE '%w%' 
SELECT Documents.document_name,        Templates.template_id FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Templates.Template_Type_Description LIKE "%w%" 
SELECT Documents.document_id,        Templates.template_id,        Documents.document_name FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id JOIN Documents ON Documents.document_id = Documents.document_id WHERE Documents.document_name = "Robbin CV" 
SELECT Documents.document_id,        Templates.template_id,        Documents.document_name FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id JOIN Documents ON Documents.document_id = Documents.document_id WHERE Documents.document_name = "Robbin CV" 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT' 
SELECT count(*) FROM Templates JOIN Documents ON Templates.Template_Type_Code = Documents.Template_Type_Code WHERE Documents.Template_Type_Code = "PPT" 
SELECT template_id,        count(*) FROM Documents GROUP BY template_id 
SELECT count(*),        documents.template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.template_id 
SELECT templates.template_id,        ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_id ORDER BY count(*) DESC LIMIT 1 
SELECT Documents.template_id,        Ref_Template_Types.template_type_code FROM Documents JOIN Ref_Template_Types ON Documents.template_id = Ref_Template_Types.template_type_code GROUP BY Documents.template_id ORDER BY count(*) DESC LIMIT 1 
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1 
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1 
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents 
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents 
SELECT count(*) FROM Templates 
SELECT count(*) FROM Templates 
SELECT template_id,        version_number,        template_type_code FROM Templates 
SELECT template_id,        version_number,        template_type_code FROM Templates 
SELECT DISTINCT Template_Type_Code FROM Templates 
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types 
SELECT template_id FROM Templates WHERE template_type_code = 'PP'   OR template_type_code = 'PPT' 
SELECT template_id FROM Templates WHERE template_type_code = "PP"   OR template_type_code = "PPT" 
SELECT count(*) FROM Templates WHERE Template_Type_Code = "CV" 
SELECT count(*) FROM Templates WHERE Template_Type_Code = "CV" 
SELECT Date_Effective_From,        Template_Type_Code FROM Templates WHERE Date_Effective_From > 5 
SELECT Template_Type_Code,        Template_Type_Description FROM Templates WHERE Version_Number > 5 
SELECT Ref_Template_Types.template_type_code,        count(*) FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code GROUP BY Ref_Template_Types.template_type_code 
SELECT count(*),        Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code 
SELECT Ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING count(*) < 3 
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING count(*) < 3 
SELECT min(Version_Number),        Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code 
SELECT min(Version_Number),        Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code 
SELECT Ref_Template_Types.template_type_code FROM Documents JOIN Ref_Template_Types ON Documents.template_id = Ref_Template_Types.template_type_code WHERE Documents.document_name = "Data base" 
SELECT Ref_Template_Types.template_type_code FROM Documents JOIN Ref_Template_Types ON Documents.template_id = Ref_Template_Types.template_type_code WHERE Documents.document_name = "Data base" 
SELECT Document_Name FROM Documents WHERE Template_Type_Code = 'BK' 
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = "BK" 
SELECT Ref_Template_Types.template_type_code,        count(*) FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Ref_Template_Types.template_type_code 
SELECT count(*),        Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code 
SELECT Ref_template_types.template_type_code FROM documents JOIN ref_template_types ON documents.template_id = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_Template_Types.template_type_code FROM Documents JOIN Ref_Template_Types ON Documents.template_id = Ref_Template_Types.template_type_code GROUP BY Ref_Template_Types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Documents 
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Documents 
SELECT Template_Type_Code,        Template_Type_Description FROM Ref_Template_Types 
SELECT Ref_Template_Types.template_type_code,        Ref_Template_Types.template_type_description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code 
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD" 
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD" 
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book" 
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book" 
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Document 1" 
SELECT DISTINCT Documents.document_description FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id 
SELECT template_id FROM Templates WHERE template_type_description = "Presentation" 
SELECT template_id FROM Templates WHERE Template_Details = 'Presentation' 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Summer Show' 
SELECT count(DISTINCT paragraph_text) FROM documents WHERE document_name = 'Summer Show' 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Description = 'Korea ' 
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%' 
SELECT Paragraph_ID,        Paragraph_Text FROM Documents WHERE Document_Name = 'Welcome to NY' 
SELECT Paragraphs.Paragraph_ID,        Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY' 
SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Customer reviews" 
SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews' 
SELECT document_id,        count(*) FROM Documents GROUP BY document_id ORDER BY count(*) 
SELECT document_id,        count(*) FROM Documents GROUP BY document_id 
SELECT Document_ID,        Document_Name,        COUNT(*) FROM Documents GROUP BY Document_ID 
SELECT document_id,        document_name,        count(*) FROM Documents GROUP BY document_id 
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) >= 2 
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) >= 2 
SELECT Documents.document_id,        Documents.document_name FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
SELECT Documents.document_id,        Documents.document_name FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) LIMIT 1 
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) LIMIT 1 
SELECT Document_ID FROM Documents WHERE Document_Name = "Document 1"   AND Document_Description = "Document 2" 
SELECT document_id FROM documents WHERE document_name = "Paragraphs"   AND count(*) BETWEEN 1 AND 2 
SELECT Documents.document_id FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Brazil' INTERSECT   SELECT Documents.document_id   FROM Documents   JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Ireland' 
SELECT Documents.document_id FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Brazil' INTERSECT   SELECT Documents.document_id   FROM Documents   JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Ireland' 
SELECT count(DISTINCT name) FROM teacher 
SELECT count(*) FROM teacher 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Age,        Hometown FROM teacher 
SELECT Name,        Hometown FROM teacher 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1 
SELECT name FROM teacher ORDER BY age LIMIT 1 
SELECT DISTINCT hometown,                 count(*) FROM teacher GROUP BY hometown 
SELECT count(*),        Hometown FROM teacher GROUP BY Hometown 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
SELECT DISTINCT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
SELECT teacher.Name,        course_arrange.Course_ID FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
SELECT name,        course FROM teacher UNION SELECT name,        course FROM course 
SELECT teacher.Name,        course_arrange.Course_ID FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC 
SELECT name,        course FROM teacher ORDER BY name ASC 
SELECT name FROM teacher WHERE course ='math' 
SELECT Name FROM teacher WHERE Course = 'Math' 
SELECT Name,        COUNT(*) FROM teacher GROUP BY Name 
SELECT Name,        COUNT(*) FROM teacher GROUP BY Name 
SELECT name FROM teacher WHERE count(*) >= 2 
SELECT name FROM teacher WHERE count(*) >= 2 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN     (SELECT Teacher_ID      FROM course_arrange) 
SELECT Name FROM teacher WHERE Course_ID NOT IN     (SELECT Course_ID      FROM course_arrange) 
SELECT count(*) FROM visitor WHERE Age < 30 
SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership 
SELECT avg(age) FROM visitor WHERE membership_level_code!= "4" 
SELECT visitor.Name,        visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age 
SELECT museum_id,        name FROM museum ORDER BY num_of_staff DESC LIMIT 1 
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < 2009 
SELECT open_year,        num_of_staff FROM museum WHERE name = "Plaza Museum" 
SELECT name FROM museum WHERE num_of_staff >     (SELECT min(num_of_staff)      FROM museum      WHERE open_year > 2010) 
SELECT visitor.ID,        visitor.Name,        visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING count(*) > 1 
SELECT visitor.id,        museum.name,        visitor.level_of_membership FROM visit JOIN museum ON visit.museum_id = museum.museum_id JOIN visitor ON visit.visitor_id = visitor.id GROUP BY visitor.id ORDER BY sum(visit.num_of_ticket) DESC LIMIT 1 
SELECT museum.Museum_ID,        museum.Name FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID GROUP BY visit.Museum_ID ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM visit) 
SELECT visitor.Name,        visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY sum(visit.Num_of_Ticket) DESC LIMIT 1 
SELECT avg(Num_of_Ticket),        max(Num_of_Ticket) FROM visit 
SELECT sum(visit.Num_of_Ticket) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1 
SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.open_year < 2009 INTERSECT   SELECT visitor.Name   FROM visitor   JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.open_year > 2011 
SELECT count(*) FROM visitor WHERE id NOT IN     (SELECT visitor_id      FROM visit      WHERE open_year > 2010) 
SELECT count(*) FROM museum WHERE Open_Year > 2013   OR Open_Year < 2008 
SELECT count(*) FROM players 
SELECT count(*) FROM players 
SELECT count(*) FROM matches 
SELECT count(*) FROM matches 
SELECT first_name,        birth_date FROM players WHERE country_code = 'USA' 
SELECT players.first_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.country_code = "USA" 
SELECT avg(loser_age),        avg(winner_age) FROM matches 
SELECT avg(loser_age),        avg(winner_age) FROM matches 
SELECT avg(rank) FROM matches WHERE winner_rank_points =     (SELECT avg(winner_rank_points)      FROM matches) 
SELECT avg(rank) FROM matches WHERE winner_rank_points =     (SELECT avg(winner_rank_points)      FROM matches) 
SELECT max(loser_rank) FROM matches 
SELECT max(loser_rank) FROM matches 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
SELECT players.first_name,        players.last_name FROM players JOIN rankings ON players.player_id = rankings.loser_id WHERE rankings.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN rankings ON players.player_id = rankings.winner_id WHERE rankings.year = 2016 
SELECT players.first_name,        players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2016 
SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
SELECT players.country_code,        players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tournament_id =     (SELECT tournament_id      FROM rankings      WHERE tournament_name = "WTA Championships") INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN rankings ON players.player_id = rankings.player_id   WHERE rankings.tournament_id =     (SELECT tournament_id      FROM rankings      WHERE tournament_name = "Australian Open") 
SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.tourney_id = 1 INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN matches ON players.player_id = matches.winner_id   WHERE matches.tourney_id = 1 
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.age DESC LIMIT 1 
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.age DESC LIMIT 1 
SELECT first_name,        last_name FROM players ORDER BY birth_date 
SELECT first_name,        last_name FROM players ORDER BY birth_date 
SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.hand = 'L' ORDER BY players.birth_date 
SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.hand = 'Left' ORDER BY players.birth_date 
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT players.name,        rankings.rank_points FROM rankings JOIN players ON rankings.player_id = players.player_id WHERE rankings.tourney_id =     (SELECT max(tourney_id)      FROM rankings) ORDER BY rankings.rank_points DESC LIMIT 1 
SELECT players.name,        players.rank_points FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.rank =     (SELECT max(rank)      FROM rankings) 
SELECT players.name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = rankings.loser_id WHERE rankings.tourney_id = 1   AND rankings.tourney_name = "Australian Open"   AND players.first_name = "Samantha Stosic"   AND players.last_name = "Stosic"   AND rankings.rank_points =     (SELECT max(rank_points)      FROM rankings      WHERE tourney_id = 1        AND tourney_name = "Australian Open") 
SELECT players.name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = rankings.loser_id WHERE rankings.tournament_id = 1   AND rankings.rank =     (SELECT max(rank)      FROM rankings      WHERE tournament_id = 1        AND rank_points =          (SELECT max(rank_points)           FROM rankings           WHERE tournament_id = 1)) 
SELECT loser_name,        winner_name FROM matches ORDER BY minutes DESC LIMIT 1 
SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.minutes DESC LIMIT 1 
SELECT avg(ranking),        players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name 
SELECT players.first_name,        avg(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id 
SELECT sum(ranking_points),        players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name 
SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id 
SELECT country_code,        count(*) FROM players GROUP BY country_code 
SELECT country_code,        count(*) FROM players GROUP BY country_code 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
SELECT sum(tours),        ranking_date FROM rankings GROUP BY ranking_date 
SELECT tourney_date,        count(*) FROM rankings GROUP BY tourney_date 
SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
SELECT players.first_name,        players.last_name,        players.rank FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.rank_points =     (SELECT min(rank_points)      FROM rankings)   AND players.first_name =     (SELECT min(first_name)      FROM players)   AND players.last_name =     (SELECT max(last_name)      FROM players) 
SELECT players.first_name,        players.last_name,        players.rank FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.rank_points =     (SELECT min(rank_points)      FROM rankings) ORDER BY players.first_name,          players.last_name LIMIT 3 
SELECT count(DISTINCT winner_hand) FROM players WHERE country_code = "USA"   AND tourney_id = 1   AND tourney_level = "WTA Championships" 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'Left'   AND matches.tourney_name = 'WTA Championships' 
SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points =     (SELECT max(ranking_points)      FROM rankings) 
SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY sum(rankings.rank_points) DESC LIMIT 1 
SELECT count(*),        hand FROM players GROUP BY hand 
SELECT count(*),        hand FROM players GROUP BY hand 
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured' 
SELECT name,        tonnage FROM ship ORDER BY name DESC 
SELECT name,        date,        result FROM battle 
SELECT max(death.killed),        min(death.killed) FROM death JOIN ship ON death.caused_by_ship_id = ship.id 
SELECT avg(injured),        id FROM death GROUP BY id 
SELECT death.caused_by_ship_id,        death.killed,        death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' 
SELECT battle.name,        battle.result FROM battle JOIN ship ON battle.id = ship.id WHERE ship.ship_type = 'Bulgarian'   AND ship.lost_in_battle!= 'Boril' 
SELECT battle.id,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' 
SELECT battle.id,        battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING sum(death.killed) > 10 
SELECT ship.id,        ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY death.caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1 
SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Bulgarian'   AND ship.latin_commander = 'Baldwin I'   AND ship.bulgarian_commander = 'Kaloyan' 
SELECT count(DISTINCT result) FROM battle 
SELECT count(*) FROM battle WHERE result!= 'Lost'   AND tonnage = '225' 
SELECT battle.name,        battle.date FROM battle JOIN ship ON battle.id = ship.id WHERE ship.name = 'Lettice' INTERSECT   SELECT battle.name,          battle.date   FROM battle   JOIN ship ON battle.id = ship.id WHERE ship.name = 'HMS Atalanta' 
SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.id WHERE battle.name NOT IN     (SELECT battle.name      FROM battle      JOIN ship ON battle.id = ship.id      WHERE ship.location = "English Channel") 
SELECT death.note FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.ship_type = 'East' 
SELECT address_id FROM addresses WHERE line_1 LIKE "%"   AND line_2 LIKE "%" 
SELECT line_1,        line_2 FROM addresses 
SELECT count(*) FROM Courses 
SELECT count(*) FROM Courses 
SELECT course_description FROM COURSES WHERE course_name = "Math"; 
SELECT course_description FROM Courses WHERE course_name = "Mathematics" 
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea" 
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea" 
SELECT departments.department_name,        departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY degree_programs.department_id ORDER BY count(*) DESC LIMIT 1 
SELECT department.department_name,        departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY degree_programs.department_id ORDER BY count(*) DESC LIMIT 1 
SELECT count(DISTINCT department_id) FROM degrees 
SELECT count(DISTINCT department_id) FROM degrees 
SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
SELECT count(DISTINCT degree_summary_description) FROM degree_programs 
SELECT count(*) FROM DEPARTMENTS JOIN Degree_Programs ON DEPARTMENTS.department_id = Degree_Programs.department_id WHERE department_name = "Engineering" 
SELECT count(*) FROM DEPARTMENTS JOIN Degree_Programs ON DEPARTMENTS.department_id = Degree_Programs.department_id WHERE department_name = "Engineering" 
SELECT section_summary_name,        section_summary_description FROM SECTIONS 
SELECT section_summary_name,        section_summary_description FROM SECTIONS 
SELECT course_name,        course_id FROM COURSES GROUP BY course_id HAVING count(*) <= 2 
SELECT course_name,        course_id FROM Courses GROUP BY course_id HAVING count(*) < 2 
SELECT section_name FROM SECTIONS ORDER BY section_name 
SELECT section_name FROM SECTIONS ORDER BY section_name 
SELECT semesters.semester_name,        students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_name ORDER BY count(*) DESC LIMIT 1 
SELECT semester_id,        count(*) FROM student_enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1 
SELECT department_description FROM departments WHERE department_name LIKE '%the computer%' 
SELECT department_description FROM departments WHERE department_name LIKE "%computer%" 
SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id,        student_enrolment.student_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_id = student_enrolment.student_id JOIN Courses ON Courses.course_id = student_enrolment_courses.course_id JOIN Degree_Programs ON Degree_Programs.degree_summary_id = student_enrolment_courses.degree_program_id WHERE student_enrolment_courses.semester_id = 1   AND student_enrolment_courses.degree_summary_description = "Bachelor"   AND Courses.course_name = "BUS 111"   AND Degree_Programs
SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id WHERE student_enrolment_courses.degree_program_id = 2   AND student_enrolment_courses.semester_id = 1 
SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment_courses ON students.student_id = student_enrolment_courses.student_id WHERE student_enrolment_courses.degree_program_id = "Bachelor" 
SELECT first_name,        middle_name,        last_name FROM students WHERE degree_program_id = 1 
SELECT DISTINCT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_summary_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY count(*) DESC LIMIT 1 
SELECT Degree_Programs.degree_summary_name,        Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_summary_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_id ORDER BY count(*) DESC LIMIT 1 
SELECT degree_program_id,        degree_summary_description FROM Degree_Programs GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT students.student_id,        students.first_name,        students.middle_name,        students.last_name,        count(*) FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT students.first_name,        students.middle_name,        students.last_name,        count(*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT semester_name FROM semesters EXCEPT SELECT semester_name FROM student_enrolment 
SELECT semester_name FROM semesters EXCEPT SELECT semester_name FROM student_enrolment 
SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
SELECT courses.course_name FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY count(*) DESC LIMIT 1 
SELECT course_name FROM student_enrolment GROUP BY course_name ORDER BY count(*) DESC LIMIT 1 
SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE students.state_province_county = "North Carolina"   AND student_enrolment.student_id NOT IN     (SELECT student_enrolment_id      FROM student_enrolment_courses      WHERE course_id IN          (SELECT course_id           FROM courses           WHERE course_summary_description = "Degree Programs")) 
SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE students.state_province_county = "North Carolina"   AND student_enrolment.student_id NOT IN     (SELECT student_enrolment_id      FROM student_enrolment_courses      WHERE course_id IN          (SELECT course_id           FROM courses           WHERE course_summary_description = "Degree Programs")) 
SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id HAVING count(*) >= 2 
SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcripts JOIN student_enrolment_courses ON transcripts.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING count(*) >= 2 
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy"   AND last_name = "Ward"; 
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy"   AND last_name = "Ward"; 
SELECT first_name,        middle_name,        last_name FROM Students WHERE date_first_registered =     (SELECT min(date_first_registered)      FROM Students) 
SELECT first_name,        middle_name,        last_name FROM Students ORDER BY date_first_registered LIMIT 1 
SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id = 1   AND student_enrolment.degree_program_id = 1 ORDER BY student_enrolment.date_registered LIMIT 1 
SELECT first_name,        middle_name,        last_name FROM students ORDER BY date_left LIMIT 1 
SELECT students.first_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN addresses ON student_enrolment.current_address_id = addresses.address_id WHERE addresses.address_id!= student_enrolment.permanent_address_id 
SELECT students.first_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN addresses ON student_enrolment.current_address_id = addresses.address_id WHERE addresses.address_details = "Different" 
SELECT address_id,        line_1 FROM addresses WHERE address_id   IN   (SELECT current_address_id    FROM students) 
SELECT addresses.address_id,        addresses.line_1,        addresses.line_2 FROM addresses JOIN student_enrolment ON addresses.address_id = student_enrolment.address_id GROUP BY student_enrolment.address_id ORDER BY count(*) DESC LIMIT 1 
SELECT avg(transcript_date) FROM TRANSCRIPTS 
SELECT avg(transcript_date) FROM TRANSCRIPTS 
SELECT transcripts.transcript_date,        transcripts.other_details FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id =     (SELECT student_enrolment_courses.course_id      FROM student_enrolment_courses      JOIN student_enrolment ON student_enrolment_courses.student_id = student_enrolment.student_id      JOIN courses ON student_enrolment_courses.course_id = courses.course_id      WHERE student_enrolment_courses.student_id = 1) 
SELECT transcripts.transcript_date,        transcripts.other_details FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id =     (SELECT student_enrolment_id      FROM student_enrolment      WHERE semester_id = 1        AND degree_program_id = 1) ORDER BY transcript_contents.transcript_date LIMIT 1 
SELECT count(*) FROM TRANSCRIPTS 
SELECT count(*) FROM TRANSCRIPTS 
SELECT transcript_date FROM TRANSCRIPTS WHERE transcript_date =     (SELECT max(transcript_date)      FROM TRANSCRIPTS); 
SELECT date_transcript_released FROM transcripts WHERE transcript_date =     (SELECT max(transcript_date)      FROM transcripts); 
SELECT count(*),        student_enrolment_id FROM student_enrolment GROUP BY student_enrolment_id HAVING count(*) <= 2 
SELECT max(transcripts.transcript_date),        students.student_id FROM transcripts JOIN student_enrolment_courses ON transcripts.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN students ON student_enrolment_courses.student_id = students.student_id WHERE students.first_name = "JENNIFER"   AND students.last_name = "HENRY" GROUP BY transcripts.transcript_id ORDER BY count(*) DESC LIMIT 1 
SELECT transcripts.transcript_date,        transcripts.student_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY count(*) LIMIT 1 
SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY count(*) LIMIT 1 
SELECT semesters.semester_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN semesters ON semesters.semester_id = student_enrolment_courses.semester_id WHERE students.first_name = "Master" INTERSECT   SELECT semesters.semester_name   FROM students   JOIN student_enrolment ON students.student_id = student_enrolment.student_id   JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id   JOIN semesters ON semesters.semester_id = student_enrolment_courses.semester_id WHERE students.first_name = "Bachelor" 
SELECT semester_id FROM student_enrolment WHERE degree_program_id = 1   AND semester_id IN     (SELECT semester_id      FROM student_enrolment      WHERE degree_program_id = 1 INTERSECT        SELECT semester_id        FROM student_enrolment        WHERE degree_program_id = 2) 
SELECT count(DISTINCT address_id) FROM students 
SELECT DISTINCT addresses.line_1 FROM addresses JOIN student_enrolment ON addresses.address_id = student_enrolment.student_address_id 
SELECT DISTINCT student_details FROM students ORDER BY student_details 
SELECT other_student_details FROM students ORDER BY last_name 
SELECT section_name FROM SECTIONS 
SELECT section_description FROM SECTIONS WHERE section_name = "h" 
SELECT students.first_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.country = "Haiti"   OR addresses.cell_mobile_number = "09700166582" 
SELECT students.first_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.city = "Haiti"   OR addresses.cell_mobile_number = "09700166582" 
SELECT Title FROM Cartoon ORDER BY Title 
SELECT Title FROM Cartoon ORDER BY Title ASC 
SELECT title FROM Cartoon WHERE directed_by = "Ben Jones" 
SELECT title FROM Cartoon WHERE directed_by = "Ben Jones" 
SELECT count(*) FROM Cartoon JOIN Written_by ON Cartoon.id = Written_by.id WHERE Written_by.name = "Joseph Kuhr" 
SELECT count(*) FROM Cartoon JOIN Written_by ON Cartoon.id = Written_by.id WHERE Written_by.name = "Joseph Kuhr" 
SELECT title,        directed_by FROM Cartoon ORDER BY original_air_date 
SELECT Cartoon.title,        Cartoon.directed_by,        Cartoon.written_by FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.air_date 
SELECT Title FROM Cartoon WHERE directed_by = "Ben Jones"   OR directed_by = "Brandon Vietti" 
SELECT title FROM Cartoon WHERE directed_by = "Ben Jones"   OR directed_by = "Brandon Vietti" 
SELECT Country,        COUNT(*) FROM TV_channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Country,        count(*) FROM TV_channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_channel 
SELECT count(DISTINCT series_name),        count(DISTINCT Content) FROM TV_Channel 
SELECT Content FROM TV_channel WHERE series_name = "Sky Radio" 
SELECT Content FROM TV_series WHERE Title = "Sky Radio" 
SELECT Package_Option FROM TV_channel WHERE series_name = "Sky Radio" 
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio" 
SELECT count(*) FROM TV_channel WHERE language = "english" 
SELECT count(*) FROM TV_channel WHERE language = 'english' 
SELECT Language,        count(*) FROM TV_channel GROUP BY Language ORDER BY count(*) DESC LIMIT 1 
SELECT Language,        COUNT(*) FROM TV_channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1 
SELECT Language,        count(*) FROM TV_channel GROUP BY Language 
SELECT Language,        count(*) FROM TV_channel GROUP BY Language 
SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "The Rise of the Blue Beetle!" 
SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_series.title = "The Rise of the Blue Beetle" 
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" 
SELECT Cartoon.title FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" 
SELECT Episode FROM TV_series ORDER BY Rating 
SELECT Episode FROM TV_series ORDER BY Rating 
SELECT Episode,        Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT Episode,        Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT min(Share),        max(Share) FROM TV_series 
SELECT max(Share),        min(Share) FROM TV_series 
SELECT TV_series.Air_Date FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime" 
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
SELECT weekly_rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
SELECT TV_channel.series_name FROM TV_series JOIN TV_channel ON TV_series.channel = TV_channel.id WHERE TV_series.id =     (SELECT TV_series.id      FROM TV_series      JOIN TV_channel ON TV_series.channel = TV_channel.id      WHERE TV_series.Episode = "A Love of a Lifetime") 
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime" 
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" 
SELECT Episode FROM TV_series WHERE Title = "Sky Radio" 
SELECT count(*),        directed_by FROM Cartoon GROUP BY directed_by 
SELECT count(*),        directed_by FROM Cartoon GROUP BY directed_by 
SELECT Production_code,        Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1 
SELECT Production_code,        TV_Channel.id FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1 
SELECT package_option,        series_name FROM TV_channel WHERE Hight_definition_TV = 1 
SELECT package_option,        TV_series.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_channel.high_definition_TV = 1 
SELECT TV_channel.id FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE Cartoon.written_by = "Todd Casey" 
SELECT Cartoon.country FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id WHERE Cartoon.written_by = "Todd Casey" 
SELECT TV_channel.id FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE Cartoon.written_by!= "Todd Casey" 
SELECT Country FROM TV_channel WHERE Country!= 'Todd Casey' 
SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.channel JOIN TV_channel ON Cartoon.channel = TV_channel.id WHERE TV_channel.directed_by = "Ben Jones"   AND TV_channel.directed_by = "Michael Chang" 
SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE Cartoon.directed_by = "Ben Jones"   OR Cartoon.directed_by = "Michael Chang" 
SELECT Pixel_aspect_ratio_PAR,        Country FROM TV_channel WHERE Language!= 'English' 
SELECT Pixel_aspect_ratio_PAR,        Country FROM TV_channel WHERE Language!= 'English' 
SELECT id FROM TV_channel WHERE Country = 'United States' GROUP BY Country HAVING count(*) > 2 
SELECT id FROM TV_channel GROUP BY id HAVING count(*) > 2 
SELECT id FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM Cartoon) 
SELECT id FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM Cartoon) 
SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT tv_channel.id      FROM cartoon      JOIN tv_channel ON cartoon.channel = tv_channel.id      WHERE cartoon.directed_by = "Ben Jones") 
SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM Cartoon) 
SELECT count(*) FROM poker_player 
SELECT count(*) FROM poker_player 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Final_Table_Made,        Best_Finish FROM poker_player 
SELECT Final_Table_Made,        Best_Finish FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY poker_player.People_ID ORDER BY count(*) DESC 
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings LIMIT 1 
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings LIMIT 1 
SELECT Money_Rank FROM poker_player WHERE Height =     (SELECT MAX (Height)      FROM people) 
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC 
SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
SELECT count(*),        Nationality FROM people GROUP BY Nationality 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
SELECT Name,        Birth_Date FROM people ORDER BY Name ASC 
SELECT Name,        Birth_Date FROM people ORDER BY Name 
SELECT Name FROM people WHERE Nationality!= "Russia" 
SELECT Name FROM people WHERE Nationality!= 'Russia' 
SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(DISTINCT state) FROM AREA_CODE_STATE 
SELECT contestant_number,        contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
SELECT vote_id,        phone_number,        state FROM VOTES 
SELECT max(area_code),        min(area_code) FROM AREA_CODE_STATE 
SELECT created FROM VOTES WHERE state = 'CA' 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name!= 'Jessie Alloway' 
SELECT DISTINCT state,                 created FROM VOTES 
SELECT contestant_number,        contestant_name FROM CONTESTANTS WHERE contestant_number IN     (SELECT contestant_number      FROM VOTES      GROUP BY contestant_number      HAVING count(*) >= 2) 
SELECT contestant_number,        contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number ORDER BY count(*) LIMIT 1 
SELECT count(*) FROM VOTES WHERE state = 'NY'   OR state = 'CA' 
SELECT count(DISTINCT contestant_number) FROM VOTES WHERE contestant_number NOT IN     (SELECT contestant_number      FROM VOTES) 
SELECT area_code FROM AREA_CODE_STATE WHERE state =     (SELECT state      FROM AREA_CODE_STATE      GROUP BY state      ORDER BY count(*) DESC      LIMIT 1) 
SELECT VOTES.create_date,        AREA_CODE_STATE.state,        AREA_CODE_STATE.area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.contestant_number = AREA_CODE_STATE.contestant_number JOIN AREA_CODE_STATE ON VOTES.contestant_number = AREA_CODE_STATE.contestant_number WHERE AREA_CODE_STATE.area_code = 'Tabatha Gehling' 
SELECT area_code FROM VOTES WHERE contestant_number = 'Tabatha Gehling' INTERSECT   SELECT area_code   FROM VOTES WHERE contestant_number = 'Kelly Clauss' 
SELECT CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name LIKE '%Al%' 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepYear > 1950 
SELECT name FROM country WHERE independetry > 1950 
SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
SELECT sum(SurfaceArea) FROM country WHERE Region = "Caribbean" 
SELECT sum(SurfaceArea) FROM country WHERE Country.Continent = "Caribbean" 
SELECT Continent FROM country WHERE Name = "Anguilla"; 
SELECT Continent FROM country WHERE Name = "Anguilla" 
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = "Kabul" 
SELECT region FROM city WHERE name = "Kabul"; 
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Aruba"   AND countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage      WHERE CountryCode = "Aruba") 
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Aruba"   AND countrylanguage.Language = "English"   AND countrylanguage.Percentage > 50 
SELECT country.Population,        country.LifeExpectancy FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Name = "Brazil" 
SELECT country.Population,        country.LifeExpectancy FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Name = "Brazil" 
SELECT country.Region,        country.Population FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Angola" 
SELECT country.Region,        country.Population FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Angola" 
SELECT avg(LifeExpectancy) FROM country WHERE Region = "Central Africa" 
SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Central Africa" 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Asia" ORDER BY country.lifeexpectancy LIMIT 1 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia" ORDER BY country.lifeexpectancy LIMIT 1 
SELECT sum(Population),        max(GNP) FROM country WHERE Continent = 'Asia' 
SELECT country.Population,        country.GNP FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = "Asia" GROUP BY country.CountryCode ORDER BY country.Population DESC LIMIT 1 
SELECT avg(LifeExpectancy) FROM country WHERE Country.Region = "Africa"   AND Country.Continent = "Republic" 
SELECT avg(LifeExpectancy) FROM country WHERE Country.Continent = 'Africa'   AND Country.Region = 'Republics' 
SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia'   OR Continent = 'Europe' 
SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia'   OR Continent = 'Europe' 
SELECT population FROM city WHERE district = "Gelderland" 
SELECT sum(Population) FROM city WHERE District = "Gelderland" 
SELECT avg(GNP),        sum(Population) FROM country WHERE country.GovernmentForm = 'US' 
SELECT GNP,        sum(Population) FROM country WHERE country.Continent = 'US' GROUP BY country.Continent 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(*) FROM country WHERE country.Continent = "Africa" 
SELECT count(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa' 
SELECT sum(countrylanguage.Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.CountryName = "Aruba" 
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = "ARU" 
SELECT count(*) FROM countrylanguage WHERE countrycode = "AFG" 
SELECT count(*) FROM countrylanguage WHERE countrycode = "AF" 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT country.Continent FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "English" INTERSECT   SELECT count(*)   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "Dutch" 
SELECT count(*) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "English" INTERSECT   SELECT count(*)   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "Dutch" 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "United States" INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "France" 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "English" INTERSECT   SELECT country.Name   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "French" 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT   SELECT country.Name   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "French" 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT   SELECT country.Name   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "French" 
SELECT count(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Chinese" 
SELECT count(*) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Name = "China" 
SELECT country.Region FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"   OR countrylanguage.Language = "Dutch" 
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Dutch"   OR countrylanguage.Language = "English" 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' INTERSECT   SELECT country.CountryCode   FROM country   JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"   OR countrylanguage.Language = "Dutch" 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Asia =     (SELECT max(Asia)      FROM country) 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1 
SELECT city FROM city WHERE population =     (SELECT MAX (population)      FROM city      WHERE language = "english")   AND country.name = "United States"; 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" ORDER BY city.Population DESC LIMIT 1 
SELECT country.name,        country.population,        country.lifeexpectancy FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia"   AND country.area >     (SELECT max(area)      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.continent = "Asia"        AND country.area = countrylanguage.area) 
SELECT country.name,        country.population,        country.lifeexpectancy FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia"   AND country.area > 1000000   AND country.lifeexpectancy >     (SELECT max(lifeexpectancy)      FROM country      WHERE country.continent = "Asia") 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT sum(Population) FROM city WHERE CountryCode NOT IN     (SELECT CountryCode      FROM countrylanguage) 
SELECT count(*) FROM country WHERE language!= 'English' 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix" 
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix" 
SELECT sum(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.IndepYear < 1930 
SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.IndepYear < 1930 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE country.continent = 'Europe') 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.area >     (SELECT max(area)      FROM country      WHERE country.continent = 'Europe') 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Africa'   AND country.Population <     (SELECT min(Population)      FROM country      WHERE Continent = 'Asia') 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Africa'   AND country.Population <     (SELECT min(Population)      FROM country      JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode      WHERE country.Continent = 'Asia') 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia'   AND country.Population >     (SELECT max(Population)      FROM country      WHERE Continent = 'Africa') 
SELECT country.Name FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asian'   AND country.Population >     (SELECT max(Population)      FROM country      WHERE Continent = 'African') 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language!= "English" 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language!= "English" 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language!= "English" 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language!= "English" 
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm!= 'Republic'   AND country.Language!= 'English' 
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Language!= "English"   AND country.GovernmentForm!= "Republic" 
SELECT city.Name FROM city JOIN countrylanguage ON city.ID = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"   AND country.Continent = "Europe" 
SELECT city.Name FROM city JOIN countrylanguage ON city.id = countrylanguage.countryid WHERE countrylanguage.Language = "English"   AND country.Continent = "Europe" 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Chinese"   AND country.Continent = "Asian" 
SELECT city.Name FROM city JOIN countrylanguage ON city.id = countrylanguage.countryid WHERE countrylanguage.Language = "Chinese"   AND country.Continent = "Asia" 
SELECT country.name,        country.indepYear,        country.surfaceArea FROM country JOIN city ON country.id = city.countryid WHERE city.population =     (SELECT min(population)      FROM city) 
SELECT country.name,        country.IndepYear,        country.SurfaceArea FROM country JOIN city ON country.id = city.countryid WHERE city.population =     (SELECT min(population)      FROM city) 
SELECT country.Population,        country.Name,        country.Leader FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.SurfaceArea =     (SELECT MAX (SurfaceArea)      FROM country) 
SELECT country.name,        country.population,        country.headofstate FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.surfacearea =     (SELECT max(surfacearea)      FROM country) 
SELECT country.name,        countrylanguage.language,        country.Population FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage >= 3 
SELECT country.name,        country.capital,        country.language,        country.languagecount,        country.surfacearea,        country.indphold,        country.gnp,        country.gnpoold,        country.headofstate,        country.capital,        country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.languagecount > 2 
SELECT count(*),        district FROM city WHERE population >     (SELECT avg(population)      FROM city) GROUP BY district 
SELECT city.district,        count(*) FROM city JOIN city ON city.id = city.id WHERE city.population >     (SELECT avg(population)      FROM city) GROUP BY city.district 
SELECT governmentform,        avg(lifeexpectancy) FROM country GROUP BY governmentform HAVING avg(lifeexpectancy) > 72 
SELECT country.GovernmentForm,        country.Population FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Percentage > 72 GROUP BY country.GovernmentForm 
SELECT continent,        avg(lifeexpectancy),        sum(population) FROM country WHERE lifeexpectancy < 72 GROUP BY continent 
SELECT continent,        sum(lifeexpectancy),        avg(lifeexpectancy) FROM country WHERE lifeexpectancy < 72 GROUP BY continent 
SELECT country.name,        country.area FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ORDER BY country.area DESC LIMIT 5 
SELECT country.name,        country.surfacearea FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ORDER BY country.surfacearea DESC LIMIT 5 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ORDER BY country.population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT country.name FROM country JOIN city ON country.id = city.countryid GROUP BY country.id ORDER BY count(*) LIMIT 3 
SELECT count(*) FROM country WHERE continent = 'Asia' 
SELECT count(*) FROM country WHERE Continent = 'Asia' 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.population > 80000 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.population = 80000 
SELECT sum(Population),        avg(SurfaceArea) FROM country WHERE Continent = 'North America'   AND Area > 3000 
SELECT country.Population,        country.SurfaceArea FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Continent = "North America"   AND country.SurfaceArea > 3000 
SELECT city.Name FROM city JOIN citylanguage ON city.id = citylanguage.countrycode WHERE city.Population BETWEEN 160000 AND 900000 
SELECT city.Name FROM city JOIN citylanguage ON city.id = citylanguage.countrycode WHERE city.Population BETWEEN 160000 AND 900000 
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT country.Language,        country.CountryCode,        country.Percentage FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode GROUP BY country.CountryCode ORDER BY country.Percentage DESC LIMIT 1 
SELECT country.CountryCode,        countrylanguage.Language,        country.Population FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode GROUP BY country.CountryCode ORDER BY sum(countrylanguage.Percentage) DESC LIMIT 3 
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish"   AND country.population >     (SELECT max(population)      FROM country      WHERE language = "Spanish") 
SELECT count(*) FROM country JOIN countrylanguage ON country.CountryCode = countrylanguage.CountryCode WHERE country.Language = "Spanish" 
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" GROUP BY country.Code HAVING countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage) 
SELECT country.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" 
SELECT count(*) FROM conductor 
SELECT count(DISTINCT conductor_id) FROM conductor 
SELECT Name FROM conductor ORDER BY Age ASC 
SELECT Name FROM conductor ORDER BY Age 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_Founded DESC 
SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_Founded DESC 
SELECT avg(Attendance) FROM show 
SELECT avg(Attendance) FROM show 
SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT count(DISTINCT nationality) FROM conductor 
SELECT count(DISTINCT nationality) FROM conductor 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC LIMIT 1 
SELECT conductor.Name FROM conductor JOIN performance ON conductor.Conductor_ID = performance.Conductor_ID GROUP BY performance.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING count(*) > 1 
SELECT conductor.Name FROM conductor JOIN performance ON conductor.Conductor_ID = performance.Conductor_ID GROUP BY conductor.Name HAVING count(*) > 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
SELECT conductor.Name FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN conductor ON conductor.Conductor_ID = performance.Conductor_ID WHERE performance.Year_of_Founded > 2008 
SELECT Record_Company,        COUNT(*) FROM orchestra GROUP BY Record_Company 
SELECT count(*),        ORCHESTRAS.Record_Company FROM ORCHESTRAS JOIN orchestra ON ORCHESTRAS.Orchestra_ID = orchestra.Orchestra_ID GROUP BY ORCHESTRAS.Record_Company 
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) ASC 
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC 
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
SELECT ORCHESTRAS.Record_Company FROM ORCHESTRAS JOIN performance ON ORCHESTRAS.Orchestra_ID = performance.Orchestra_ID GROUP BY ORCHESTRAS.Record_Company ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM orchestra WHERE orchestr_id NOT IN     (SELECT orchestr_id      FROM performance) 
SELECT name FROM orchestra WHERE orchestration_id NOT IN     (SELECT orchestration_id      FROM performance) 
SELECT Record_Company FROM orchestra WHERE YEAR_OF_Founded < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_Founded > 2003 
SELECT Record_Company FROM orchestra WHERE YEAR_OF_Founded < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_Founded > 2003 
SELECT count(*) FROM orchestra WHERE record_format = "CD"   OR record_format = "DVD" 
SELECT count(*) FROM orchestra WHERE Record_Company = "CD"   OR Record_Company = "DVD" 
SELECT YEAR_OF_Founded FROM orchestra WHERE YEAR_OF_Founded > 1 
SELECT YEAR_OF_Founded FROM orchestra WHERE YEAR_OF_Founded > 1 
SELECT count(*) FROM Highschooler 
SELECT count(*) FROM Highschooler 
SELECT name,        grade FROM Highschooler 
SELECT name,        grade FROM Highschooler 
SELECT grade FROM Highschooler 
SELECT grade FROM Highschooler 
SELECT grade FROM highschooler WHERE name = "Kyle" 
SELECT grade FROM highschooler WHERE name = "Kyle" 
SELECT name FROM Highschooler WHERE grade = 10 
SELECT name FROM Highschooler WHERE grade = 10 
SELECT highschooler.ID FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = "Kyle" 
SELECT id FROM highschooler WHERE name = "Kyle" 
SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
SELECT count(*),        grade FROM Highschooler GROUP BY grade 
SELECT count(*),        grade FROM Highschooler GROUP BY grade 
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4 
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
SELECT student_id,        count(*) FROM Friend GROUP BY student_id 
SELECT count(*),        highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.friend_id GROUP BY highschooler.ID 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY Highschooler.id 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY Highschooler.id 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id GROUP BY Highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM highschooler ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM highschooler WHERE id IN     (SELECT friend_id      FROM friend      GROUP BY friend_id      HAVING count(*) >= 3) 
SELECT name FROM highschooler WHERE count(DISTINCT friend_id) >= 3 
SELECT DISTINCT friend.friend_id FROM friend JOIN highschooler ON friend.student_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id JOIN friend ON friend.friend_id = likes.friend_id WHERE highschooler.name = "Kyle" 
SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = "Kyle" 
SELECT count(DISTINCT friend_id) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = "Kyle" 
SELECT count(DISTINCT friend_id) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = "Kyle" 
SELECT DISTINCT student_id FROM highschooler WHERE student_id NOT IN     (SELECT student_id      FROM friend) 
SELECT DISTINCT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.id NOT IN     (SELECT friend_id      FROM friend) 
SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend) 
SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend) 
SELECT highschooler.id FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN friend ON likes.friend_id = friend.friend_id WHERE friend.student_id IN     (SELECT highschooler.id      FROM highschooler      JOIN friend ON highschooler.id = friend.friend_id      WHERE friend.student_id IN          (SELECT highschooler.id           FROM highschooler           JOIN likes ON highschooler.id = likes.student_id           JOIN friend ON likes.friend_id = friend.friend_id           WHERE friend.student_id IN               (SELECT highschooler.id                FROM highschooler                JOIN friend ON highschooler.id = friend.friend_id                WHERE friend.student_id IN                    (SELECT highschooler.id                     FROM highschooler                     JOIN friend ON highschooler.id = friend.friend_id                     WHERE friend.student_id IN                         (SELECT highschooler.id                         
SELECT DISTINCT highschooler.id FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN friend ON likes.friend_id = friend.friend_id WHERE friend.student_id IN     (SELECT DISTINCT highschooler.id      FROM highschooler      JOIN friend ON highschooler.id = friend.friend_id      WHERE friend.student_id IN          (SELECT DISTINCT highschooler.id           FROM highschooler           JOIN friend ON highschooler.id = friend.friend_id           WHERE friend.student_id IN               (SELECT DISTINCT highschooler.id                FROM highschooler                JOIN friend ON highschooler.id = friend.friend_id                WHERE friend.student_id IN                    (SELECT DISTINCT highschooler.id                     FROM highschooler                     JOIN friend ON highschooler.id = friend.friend_id                     WHERE friend.student_id IN                         (SELECT DISTINCT highschooler.id                          FROM
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.id = Likes.liked_id JOIN Friend ON Likes.student_id = Friend.friend_id WHERE Friend.student_id!= Friend.friend_id 
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.id = Likes.student_id JOIN Friends ON Friends.friend_id = Likes.liked_id WHERE Friends.friend_id IN     (SELECT Friends.friend_id      FROM Friends      JOIN Likes ON Friends.friend_id = Likes.liked_id      JOIN Highschooler ON Likes.student_id = Highschooler.id      WHERE Friends.friend_id IN          (SELECT Friends.friend_id           FROM Friends           JOIN Likes ON Friends.friend_id = Likes.liked_id           JOIN Highschooler ON Likes.student_id = Highschooler.id           WHERE Friends.friend_id IN               (SELECT Friends.friend_id                FROM Friends                JOIN Likes ON Friends.friend_id = Likes.liked_id                JOIN Highschooler ON Likes.student_id = Highschooler.id                WHERE Friends.friend
SELECT count(*),        highschooler.id FROM likes JOIN highschooler ON likes.student_id = highschooler.id GROUP BY highschooler.id 
SELECT count(*),        highschooler.id FROM likes JOIN highschooler ON likes.student_id = highschooler.id GROUP BY highschooler.id 
SELECT highschooler.name,        COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id GROUP BY likes.student_id 
SELECT Highschooler.name,        COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id 
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY Highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Highschooler.name ORDER BY count(*) DESC LIMIT 1 
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(*) >= 2 
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(*) >= 2 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.id HAVING COUNT(*) >= 2 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.id HAVING count(*) >= 2 
SELECT count(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle" 
SELECT count(DISTINCT likes.student_id) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle" 
SELECT avg(grade) FROM Highschooler WHERE id IN     (SELECT friend_id      FROM Friend) 
SELECT avg(grade) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id GROUP BY Highschooler.id 
SELECT min(grade) FROM Highschooler WHERE id NOT IN     (SELECT friend_id      FROM Friend) 
SELECT min(grade) FROM Highschooler WHERE id NOT IN     (SELECT friend_id      FROM Friend) 
SELECT state FROM OWNERS INNER JOIN PROFESSIONALS ON OWNERS.owner_id = PROFESSIONALS.owner_id WHERE state IN     (SELECT state      FROM states      WHERE state_name IN          (SELECT state_name           FROM states           WHERE state_name IN               (SELECT state_name                FROM states                WHERE state_name = "Alaska"))       AND state_name IN           (SELECT state_name            FROM states            WHERE state_name = "California")) 
SELECT state FROM OWNERS INNER JOIN professionals ON OWNERS.owner_id = professionals.owner_id 
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Treatments.dog_id 
SELECT avg(age) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id 
SELECT professional_id,        last_name,        cell_number FROM Professionals WHERE state = 'Indiana'   OR treatments.cost_of_treatment > 2 
SELECT professionals.professional_id,        professionals.last_name,        professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE professionals.state = "Indiana"   OR treatments.cost_of_treatment > 2 
SELECT name FROM Dogs WHERE cost_of_treatment < 1000 
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment > 1000   AND Professionals.first_name!= "Jane"   AND Professionals.last_name!= "Smith" 
SELECT first_name FROM Professionals EXCEPT SELECT first_name FROM Owners 
SELECT first_name FROM professionals UNION SELECT first_name FROM owners 
SELECT professional_id,        role_code,        email_address FROM Professionals EXCEPT SELECT professional_id,        role_code,        email_address FROM Professionals WHERE role_code = 'Professional'   AND treatment_type_code = 'Treatment' 
SELECT professional_id,        role_code,        email_address FROM Professionals EXCEPT SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id 
SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT professional_id,        role_code,        first_name FROM professionals GROUP BY professional_id HAVING count(*) >= 2 
SELECT professional_id,        role_code,        first_name FROM professionals GROUP BY professional_id HAVING count(*) >= 2 
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
SELECT breed_name FROM Dogs GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,        owners.last_name FROM treatments JOIN owners ON treatments.owner_id = owners.owner_id GROUP BY treatments.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,        owners.last_name FROM treatments JOIN owners ON treatments.owner_id = owners.owner_id JOIN dogs ON dogs.owner_id = owners.owner_id WHERE treatments.cost_of_treatment >     (SELECT max(cost_of_treatment)      FROM treatments      JOIN owners ON treatments.owner_id = owners.owner_id      JOIN dogs ON dogs.owner_id = owners.owner_id      WHERE treatments.cost_of_treatment > 0) 
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY sum(treatments.cost_of_treatment) LIMIT 1 
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY sum(treatments.cost_of_treatment) LIMIT 1 
SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
SELECT owners.owner_id,        owners.zip_code FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN owners ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
SELECT professional_id,        cell_number FROM treatments GROUP BY professional_id HAVING count(*) >= 2 
SELECT professional_id,        cell_number FROM professionals GROUP BY cell_number HAVING count(*) >= 2 
SELECT professionals.first_name,        professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM treatments) 
SELECT professionals.first_name,        professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM treatments) 
SELECT treatments.date_of_treatment,        professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id 
SELECT treatments.date_of_treatment,        professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id 
SELECT cost_of_treatment,        treatment_type_description FROM Treatments 
SELECT cost_of_treatment,        treatment_type_description FROM Treatments 
SELECT owners.first_name,        owners.last_name,        Sizes.size_description FROM OWNERS JOIN Dogs ON OWNERS.owner_id = Dogs.owner_id JOIN Sizes ON Sizes.size_code = Dogs.size_code 
SELECT owners.first_name,        owners.last_name,        sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON sizes.size_code = dogs.size_code 
SELECT Owners.first_name,        Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id 
SELECT owners.first_name,        Dogs.name FROM OWNERS JOIN Dogs ON OWNERS.owner_id = Dogs.owner_id 
SELECT Dogs.name,        Treatments.treatment_id,        Treatments.date_of_treatment FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Breeds ON Breeds.breed_code = Treatments.treatment_type_code WHERE Breeds.breed_name = "Rare" GROUP BY Treatments.treatment_id ORDER BY Treatments.date_of_treatment DESC LIMIT 1 
SELECT Dogs.name,        Treatments.treatment_id,        Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = "Rare" 
SELECT Dogs.name,        Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = "Virginia" 
SELECT owners.first_name,        dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = "Virginia" 
SELECT date_arrived,        date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id 
SELECT date_arrived,        date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = "Soft-wood litter" 
SELECT OWNERS.last_name FROM OWNERS JOIN Dogs ON OWNERS.owner_id = Dogs.owner_id ORDER BY Dogs.age LIMIT 1 
SELECT last_name FROM Dogs ORDER BY age LIMIT 1 
SELECT email_address FROM professionals WHERE state = 'Hawaii'   OR state = 'Wisconsin' 
SELECT email_address FROM professionals WHERE state = 'Hawaii'   OR state = 'Wisconsin' 
SELECT date_arrived,        date_departed FROM Dogs 
SELECT date_arrived,        date_departed FROM Dogs 
SELECT count(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id 
SELECT count(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = "Surgery" 
SELECT count(DISTINCT treatments.professional_id) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON dogs.owner_id = professionals.owner_id JOIN treatments ON treatments.treatment_id = dogs.treatment_id WHERE treatments.treatment_type_code = "Skin_Injection" 
SELECT count(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.treatment_type_code = "Treatment" 
SELECT professionals.role_code,        professionals.street,        professionals.city,        professionals.state FROM professionals JOIN addresses ON addresses.address_id = professionals.address_id WHERE addresses.city LIKE '%West%' 
SELECT role_code,        street,        city,        state FROM professionals WHERE city LIKE '%West%' 
SELECT owners.first_name,        owners.last_name,        owners.email_address FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state LIKE '%North%' 
SELECT owners.first_name,        owners.last_name,        owners.email_address FROM owners JOIN addresses ON addresses.address_id = owners.address_id WHERE addresses.state LIKE '%North%' 
SELECT count(*) FROM Dogs WHERE age <     (SELECT avg(age)      FROM Dogs) 
SELECT count(*) FROM Dogs WHERE age <     (SELECT avg(age)      FROM Dogs) 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN     (SELECT owner_id      FROM Dogs) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN     (SELECT owner_id      FROM Dogs) 
SELECT count(*) FROM Professionals WHERE role_code!= "Treatment Operator" 
SELECT count(*) FROM professionals WHERE role_code!= "Professional" 
SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
SELECT avg(age) FROM Dogs 
SELECT avg(age) FROM Dogs 
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
SELECT charge_type,        charge_amount FROM CHARGES 
SELECT charge_type,        charge_amount FROM CHARGES 
SELECT charge_amount FROM CHARGES ORDER BY charge_amount DESC LIMIT 1 
SELECT charge_amount FROM CHARGES ORDER BY charge_amount DESC LIMIT 1 
SELECT email_address,        home_phone,        cell_number FROM Professionals 
SELECT email_address,        home_phone,        cell_number FROM Professionals 
SELECT breed_code,        size_description FROM Sizes UNION SELECT breed_code,        size_description FROM Sizes 
SELECT DISTINCT breed_code,                 size_code FROM Dogs 
SELECT professionals.first_name,        treatments.treatment_type_description FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatments ON treatments.id = treatments.id 
SELECT professionals.first_name,        treatments.treatment_type_description FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatments ON treatments.id = treatments.treatment_id 
SELECT count(DISTINCT singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
SELECT count(*) FROM singer 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Birth_Year,        Citizenship FROM singer 
SELECT Birth_Year,        Citizenship FROM singer 
SELECT Name FROM singer WHERE Citizenship!= "France" 
SELECT Name FROM singer WHERE Citizenship!= 'French' 
SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
SELECT Title,        singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID 
SELECT Title,        Singer_ID FROM song 
SELECT DISTINCT singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID WHERE song.Sales > 300000 
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
SELECT singer.Name,        song.Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
SELECT singer.Name,        sum(song.Sales) FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID GROUP BY singer.Name 
SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
SELECT Citizenship FROM singer WHERE Birth_Year < 1945   OR Birth_Year > 1955 
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
SELECT count(*) FROM Other_Available_Features 
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_description = "AirCon" 
SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Other_Available_Features ON Ref_Property_Types.property_type_code = Other_Available_Features.property_type_code WHERE Other_Available_Features.feature_type_code = "Property Type"   AND Other_Available_Features.feature_name = "Property Type" 
SELECT property_name FROM properties WHERE room_count > 1   AND property_type_code = 'House' UNION SELECT property_name FROM properties WHERE room_count > 1   AND property_type_code = 'Apartment' 
