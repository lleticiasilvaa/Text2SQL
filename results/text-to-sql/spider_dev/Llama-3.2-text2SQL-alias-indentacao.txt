 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT name,        country,        age FROM singer ORDER BY age DESC 
 SELECT Name,        Country,        Age FROM singer ORDER BY Age DESC 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT Song_Name,        Song_release_year FROM singer ORDER BY Age ASC LIMIT 1 
 SELECT Song_Name,        Song_release_year FROM singer ORDER BY Age ASC LIMIT 1 
 SELECT DISTINCT country FROM singer WHERE age > 20 
 SELECT Country FROM singer WHERE Age > 20 
 SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
 SELECT Country,        COUNT(*) FROM singer GROUP BY Country 
 SELECT Song_Name FROM singer WHERE Age >     (SELECT avg(Age)      FROM singer) 
 SELECT Song_Name FROM singer WHERE Age >     (SELECT avg(Age)      FROM singer) 
 SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),        avg(capacity) FROM stadium 
 SELECT avg(capacity),        max(capacity) FROM stadium 
 SELECT name,        capacity FROM stadium ORDER BY avg(capacity) DESC LIMIT 1 
 SELECT name,        capacity FROM stadium ORDER BY avg(capacity) DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT stadium.Name,        count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name 
 SELECT count(*),        stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name 
 SELECT stadium.Name,        stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.year >= 2014 GROUP BY stadium.Name HAVING count(*) = (SELECT count(*) FROM concert) 
 SELECT name,        capacity FROM stadium WHERE stadium_id IN     (SELECT stadium_id      FROM concert      WHERE YEAR > 2013) GROUP BY stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT country FROM singer WHERE age > 40 UNION SELECT country FROM singer WHERE age < 30 
 SELECT name FROM stadium EXCEPT SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 
 SELECT name FROM stadium EXCEPT SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name 
 SELECT concert_name,        theme,        count(*) FROM concert GROUP BY concert_name 
 SELECT singer.Name,        COUNT(*) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name 
 SELECT singer.Name,        COUNT(*) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name 
 SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.year = 2014 
 SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.year = 2014 
 SELECT singer.Name,        singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer_in_concert.Song_Name LIKE '%Hey%' 
 SELECT singer.Name,        singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer_in_concert.Song_Name LIKE '%Hey%' 
 SELECT stadium.Name,        stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.year = 2014 INTERSECT   SELECT stadium.Name,          stadium.Location   FROM stadium   JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.year = 2015 
 SELECT stadium.Name,        stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.year = 2014 INTERSECT   SELECT stadium.Name,          stadium.Location   FROM stadium   JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.year = 2015 
 SELECT count(*) FROM concert WHERE stadium_name =     (SELECT name      FROM stadium      ORDER BY capacity DESC      LIMIT 1) 
 SELECT count(*) FROM concert WHERE stadium_name =     (SELECT name      FROM stadium      ORDER BY capacity DESC      LIMIT 1) 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT weight FROM Pets ORDER BY pet_age LIMIT 1 
 SELECT min(weight) FROM Pets WHERE pet_age =     (SELECT min(pet_age)      FROM Pets) 
 SELECT max(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT max(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT count(*) FROM Has_Pet WHERE StuID > 20 
 SELECT count(*) FROM Has_Pet WHERE StuID IN     (SELECT StuID      FROM Student      WHERE age > 20) 
 SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = 'dog'   AND Student.sex = 'F' 
 SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = 'dog'   AND Student.sex = 'F' 
 SELECT count(DISTINCT pet_type) FROM Pets 
 SELECT count(DISTINCT pet_type) FROM Pets 
 SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.pettype = 'Cat'   OR Has_Pet.pettype = 'Dog' 
 SELECT Student.fname FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pettype = 'Cat'   OR Pets.pettype = 'Dog' 
 SELECT Student.fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Has_Pet.pettype = 'Cat' INTERSECT   SELECT Student.fname   FROM Has_Pet   JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Has_Pet.pettype = 'Dog' 
 SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.pettype = 'Cat' INTERSECT   SELECT Student.fname   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.pettype = 'Dog' 
 SELECT major,        age FROM student EXCEPT SELECT Has_Pet.StuID,        student.age FROM Has_Pet JOIN student ON Has_Pet.StuID = student.StuID WHERE pettype = 'cat' 
 SELECT major,        age FROM student EXCEPT SELECT major,        age FROM student WHERE petid IN     (SELECT petid      FROM has_pet) 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID = 1 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetType = 'Cat' 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.pettype = 'dog' EXCEPT SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.pettype = 'cat' 
 SELECT Student.fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Has_Pet.pettype = 'dog' EXCEPT SELECT Student.fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Has_Pet.pettype = 'cat' 
 SELECT pet_type,        weight FROM Pets ORDER BY weight LIMIT 1 
 SELECT pet_type,        weight FROM pets ORDER BY weight LIMIT 1 
 SELECT petid,        weight FROM Pets WHERE pet_age > 1 
 SELECT petid,        weight FROM Pets WHERE pet_age > 1 
 SELECT avg(weight),        max(weight) FROM Pets 
 SELECT avg(weight),        max(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT avg(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT avg(weight),        pet_type FROM Pets GROUP BY pet_type 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID 
 SELECT DISTINCT Student.fname,                 Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID 
 SELECT Pets.petid FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.petid JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Lname = 'Smith' 
 SELECT Pets.petid FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.petid JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Lname = 'Smith' 
 SELECT count(*),        studentid FROM Has_pet GROUP BY studentid 
 SELECT StuID,        count(*) FROM Has_Pet GROUP BY StuID 
 SELECT Student.fname,        Student.sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING count(*) > 1 
 SELECT Student.fname,        Student.sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.fname,          Student.sex HAVING count(*) > 1 
 SELECT Student.Lname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = 'cat'   AND Pets.pet_age = 3 
 SELECT Student.Lname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = "cat"   AND Pets.pet_age = 3 
 SELECT avg(age) FROM student WHERE StuID NOT IN     (SELECT StuID      FROM Has_Pet) 
 SELECT avg(age) FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet) 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT continents.continent,        continents.continent,        count(*) FROM continents JOIN countries ON continents.continent = countries.continent GROUP BY continents.continent 
 SELECT continents.Continent,        count(*),        continents.Continent FROM continents JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.Continent 
 SELECT count(*) FROM countries 
 SELECT count(*) FROM countries 
 SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker 
 SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker 
 SELECT model FROM car_names ORDER BY horsepower LIMIT 1 
 SELECT model FROM cars_data ORDER BY horsepower LIMIT 1 
 SELECT model FROM car_names WHERE weight <     (SELECT avg(weight)      FROM cars_data) 
 SELECT model FROM cars_data WHERE Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT car_makers.Maker FROM cars_data JOIN car_makers ON cars_data.Maker = car_makers.Id WHERE cars_data.Year = 1970 
 SELECT DISTINCT car_makers.Maker FROM cars_data JOIN car_makers ON cars_data.Maker = car_makers.Id WHERE cars_data.Year = 1970 
 SELECT car_makers.Maker,        cars_data.year FROM cars_data JOIN car_makers ON cars_data.makeid = car_makers.id ORDER BY cars_data.year LIMIT 1 
 SELECT car_makers.Maker,        cars_data.year FROM cars_data JOIN car_makers ON cars_data.Maker = car_makers.Id ORDER BY cars_data.year LIMIT 1 
 SELECT DISTINCT model FROM car_names WHERE YEAR > 1980 
 SELECT DISTINCT model FROM model_list WHERE YEAR > 1980 
 SELECT continent,        count(*) FROM continents GROUP BY continent 
 SELECT continents.continent,        count(*) FROM continents JOIN car_makers ON continents.continent = car_makers.countryid GROUP BY continents.continent 
 SELECT CountryName FROM countries GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId GROUP BY countries.CountryName ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*),        car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker 
 SELECT car_makers.Maker,        car_makers.FullName,        count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker 
 SELECT Accelerate FROM cars_data WHERE Make = "amc hornet sportabout (sw)" 
 SELECT cars_data.accelerate FROM cars_data JOIN model_list ON cars_data.makeid = model_list.makeid WHERE model_list.model = "amc hornet sportabout (sw)" 
 SELECT count(*) FROM car_makers WHERE Country = 'France' 
 SELECT count(*) FROM car_makers WHERE Country = 'France' 
 SELECT COUNT(*) FROM model_list WHERE Country = 'USA' 
 SELECT COUNT(*) FROM model_list WHERE Country = 'United States' 
 SELECT avg(car_names.MPG) FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE model_list.Cylinders = 4 
 SELECT avg(MPG) FROM car_names WHERE Cylinders = 4 
 SELECT min(weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974; 
 SELECT min(Weight) FROM cars_data WHERE YEAR = 1974   AND Cylinders = 8; 
 SELECT DISTINCT car_makers.Maker,                 model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id 
 SELECT car_makers.Maker,        model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id 
 SELECT countries.CountryName,        car_makers.Country FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Country HAVING count(*) >= 1 
 SELECT countries.CountryName,        car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId GROUP BY car_makers.Id HAVING count(*) >= 1 
 SELECT count(*) FROM cars_data WHERE horsepower > 150 
 SELECT count(*) FROM cars_data WHERE horsepower > 150 
 SELECT avg(weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT avg(weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(*) >= 3 
 SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId GROUP BY countries.CountryName HAVING COUNT(*) >= 3 UNION SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(*) >= 3 
 SELECT max(Horsepower),        Make FROM car_names WHERE Cylinders = 3 
 SELECT max(Horsepower),        car_makers.Maker FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Cylinders = 3 GROUP BY car_makers.Maker 
 SELECT model FROM car_names ORDER BY mpg DESC LIMIT 1 
 SELECT model FROM car_names ORDER BY mpg DESC LIMIT 1 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(car_names.edspl) FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = model_list.MakeId WHERE model_list.Maker = "volvo" 
 SELECT avg(Edispl) FROM car_names WHERE Make = "Volvo" 
 SELECT max(Accelerate),        Cylinders FROM car_names GROUP BY Cylinders 
 SELECT max(Accelerate) FROM cars_data GROUP BY Cylinders 
 SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1 
 SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM model_list WHERE Cylinders > 4 
 SELECT count(*) FROM car_names WHERE Cylinders > 4 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980; 
 SELECT count(*) FROM car_makers WHERE YEAR = 1980 
 SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "American Motor Company" 
 SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = "American Motor Company" 
 SELECT car_makers.FullName,        car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) > 3 
 SELECT car_makers.Maker,        car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) > 3 
 SELECT DISTINCT model FROM car_names WHERE make = "General Motors"   OR weight > 3500 
 SELECT DISTINCT model FROM car_names WHERE make = "General Motors"   OR weight > 3500 
 SELECT YEAR FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 
 SELECT DISTINCT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT   SELECT DISTINCT YEAR   FROM cars_data WHERE Weight > 3000 
 SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1 
 SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1 
 SELECT count(*) FROM cars_data JOIN model_list ON cars_data.Model = model_list.Model WHERE model_list.Maker = "volvo" ORDER BY cars_data.Accelerate LIMIT 1 
 SELECT COUNT (DISTINCT model) FROM model_list WHERE model = "volvo"   AND accelerate =     (SELECT min (accelerate)      FROM cars_data      WHERE model = "volvo") 
 SELECT count(*) FROM cars_data WHERE accelerate >     (SELECT max(horsepower)      FROM cars_data) 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Horsepower)      FROM cars_data) 
 SELECT COUNT(*) FROM car_makers GROUP BY car_makers HAVING COUNT(*) > 2 
 SELECT count(*) FROM car_makers GROUP BY car_makers HAVING count(*) > 2 
 SELECT count(*) FROM model_list WHERE Cylinders > 6 
 SELECT count(*) FROM car_names WHERE Cylinders > 6 
 SELECT model FROM model_list WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1 
 SELECT model FROM model_list WHERE Cylinders = 4 ORDER BY horsepower DESC LIMIT 1 
 SELECT car_makers.Maker,        car_makers.FullName FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Make WHERE cars_data.Horsepower >     (SELECT min(Horsepower)      FROM cars_data      WHERE Cylinders > 3) 
 SELECT car_names.Make,        car_names.Model FROM cars_data JOIN car_names ON cars_data.Horsepower = car_names.Horsepower WHERE cars_data.Horsepower < 4   AND car_names.Cylinders = 4 
 SELECT max(MPG) FROM cars_data WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT max(MPG) FROM cars_data WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT model FROM car_names WHERE weight < 3500 EXCEPT SELECT model FROM model_list WHERE maker = 'Ford Motor Company' 
 SELECT DISTINCT model FROM car_names WHERE weight < 3500 EXCEPT SELECT DISTINCT model FROM model_list WHERE maker = "Ford" 
 SELECT CountryName FROM countries EXCEPT SELECT car_makers.Country FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId 
 SELECT CountryName FROM countries WHERE CountryId NOT IN     (SELECT CountryId      FROM car_makers) 
 SELECT car_makers.id,        car_makers.Maker FROM car_makers JOIN model_list ON car_makers.id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) >= 2 INTERSECT SELECT car_makers.id,        car_makers.Maker FROM car_makers JOIN model_list ON car_makers.id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) > 3 
 SELECT car_makers.Id,        car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) >= 2 INTERSECT SELECT car_makers.Id,        car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) >= 2 INTERSECT SELECT car_makers.Id,        car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING count(*) > 3 
 SELECT countries.CountryId,        countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.CountryId WHERE car_makers.Maker = 'Fiat'   OR car_makers.Maker = 'Toyota' GROUP BY countries.CountryId HAVING count(*) > 3 
 SELECT country.id,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.countryid JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.id IN     (SELECT id      FROM car_makers      GROUP BY id      HAVING count(*) > 3) UNION SELECT country.id,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.countryid JOIN car_names ON car_makers.id = car_names.makeid WHERE car_makers.id = 1 
 SELECT Country FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.airline = "JetBlue Airways" 
 SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways" 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = "USA" 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = 'USA' 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM flights 
 SELECT count(*) FROM flights 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
 SELECT City,        Country FROM airports WHERE AirportName = "Alton" 
 SELECT AirportName FROM airports WHERE AirportName = 'AKO' 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE City = 'Aberdeen' 
 SELECT AirportName FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM airports WHERE AirportName = 'APG' 
 SELECT count(*) FROM airports WHERE AirportName = 'APG' 
 SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
 SELECT count(*) FROM airports WHERE AirportName = "ATO" 
 SELECT count(*) FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley' 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = "Aberdeen"   AND airports.city = "Ashley" 
 SELECT count(*) FROM airlines JOIN flights ON airlines.abbreviation = flights.airline WHERE airlines.abbreviation = 'JetBlue Airways' 
 SELECT count(*) FROM airlines WHERE Airline = "Jetblue Airways" 
 SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'   AND airports.airportname = 'ASY' 
 SELECT count(*) FROM flights WHERE sourceairport = "ASY"   AND airline = "United" 
 SELECT count(*) FROM flights WHERE Airline = 'United Airlines'   AND SourceAirport = 'AHD' 
 SELECT count(*) FROM flights WHERE sourceairport = "AHD"   AND Airline = "United" 
 SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen'   AND Airline = 'United Airlines' 
 SELECT count(*) FROM flights WHERE sourceairport = "Aberdeen"   AND Airline = "United" 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) ASC LIMIT 1 
 SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.aid = flights.airline GROUP BY flights.airline ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline ORDER BY count(*) ASC LIMIT 1 
 SELECT Airline FROM airlines WHERE sourceairport = 'AHD' 
 SELECT Airline FROM flights WHERE SourceAirport = "AHD" 
 SELECT Airline FROM airlines WHERE Airline IN     (SELECT Airline      FROM flights      WHERE DestAirport = 'AHD') 
 SELECT Airline FROM flights WHERE DestAirport = "AHD" 
 SELECT Airline FROM airlines WHERE Airline IN     (SELECT Airline      FROM flights      WHERE DestAirport = 'APG' INTERSECT        SELECT Airline        FROM flights WHERE DestAirport = 'CVO') 
 SELECT Airline FROM airlines WHERE Airline IN     (SELECT Airline      FROM flights      WHERE SourceAirport = "APG" INTERSECT        SELECT Airline        FROM flights WHERE SourceAirport = "CVO") 
 SELECT Airline FROM airlines WHERE Airline IN     (SELECT Airline      FROM flights      WHERE DestAirport = 'CVO'      EXCEPT      SELECT Airline      FROM flights      WHERE DestAirport = 'APG') 
 SELECT Airline FROM airlines WHERE SourceAirport = "CVO" EXCEPT SELECT Airline FROM airlines WHERE SourceAirport = "APG" 
 SELECT Airline FROM airlines GROUP BY Airline HAVING count(*) >= 10 
 SELECT Airline FROM airlines GROUP BY Airline HAVING count(*) >= 10 
 SELECT Airline FROM airlines GROUP BY Airline HAVING count(*) < 200 
 SELECT Airline FROM airlines GROUP BY Airline HAVING count(*) < 200 
 SELECT FlightNo FROM flights WHERE Airline = "United Airlines" 
 SELECT FlightNo FROM flights WHERE Airline = "United" 
 SELECT FlightNo FROM flights WHERE SourceAirport = "APG" 
 SELECT FlightNo FROM flights WHERE SourceAirport = "APG" 
 SELECT FlightNo FROM flights WHERE DestAirport = "APG" 
 SELECT FlightNo FROM flights WHERE DestAirport = "APG" 
 SELECT FlightNo FROM flights WHERE SourceAirport = "Aberdeen" 
 SELECT FlightNo FROM flights WHERE SourceAirport = "Aberdeen" 
 SELECT FlightNo FROM flights WHERE DestAirport = "Aberdeen" 
 SELECT FlightNo FROM flights WHERE DestAirport = "Aberdeen" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = "Aberdeen"   OR airports.city = "Abilene" 
 SELECT count(*) FROM airports WHERE City = "Aberdeen"   OR City = "Abilene" 
 SELECT AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport 
 SELECT AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT name FROM employee ORDER BY age 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT Manager_name,        District FROM shop ORDER BY Number_products DESC LIMIT 1 
 SELECT Manager_name,        District FROM shop ORDER BY Number_products DESC LIMIT 1 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT shop.name FROM shop JOIN shop ON shop.shop_id = shop.shop_id GROUP BY shop.name HAVING sum(number_products) >     (SELECT avg(number_products)      FROM shop) 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY count(*) DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY count(*) DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.Bonus DESC LIMIT 1 
 SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id ORDER BY bonus DESC LIMIT 1 
 SELECT Name FROM employee EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID 
 SELECT Name FROM employee EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID 
 SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT shop.name,        count(*) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name 
 SELECT shop.name,        count(*) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name 
 SELECT sum(Bonus) FROM evaluation 
 SELECT sum(Bonus) FROM evaluation 
 SELECT * FROM hiring 
 SELECT * FROM hiring 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(*) FROM Documents 
 SELECT count(*) FROM Documents 
 SELECT Document_ID,        Document_name,        Document_description FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT Documents.document_name,        Templates.template_id FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Documents.document_name,        Documents.template_id FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Document_ID,        Template_ID,        Document_Description FROM Documents WHERE Document_Name = "Robbin CV" 
 SELECT Document_ID,        Template_ID,        Document_Description FROM Documents WHERE Document_Name = "Robbin CV" 
 SELECT count(DISTINCT document_id) FROM Documents 
 SELECT count(DISTINCT document_id) FROM Documents 
 SELECT count(*) FROM Documents WHERE Document_Type_Code = 'PPT' 
 SELECT count(*) FROM Documents WHERE Document_Type_Code = "PPT" 
 SELECT Templates.template_id,        count(*) FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_id 
 SELECT Document_ID,        COUNT(*) FROM Documents GROUP BY Document_ID 
 SELECT Templates.template_id,        Ref_Template_Types.template_type_code FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.template_id,        Ref_Template_Types.template_type_code FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.template_id FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_id HAVING count(*) > 1 
 SELECT Templates.template_id FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_id HAVING count(*) > 1 
 SELECT template_id FROM Templates EXCEPT SELECT Templates.template_id FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id 
 SELECT template_id FROM Templates EXCEPT SELECT Templates.template_id FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id 
 SELECT count(*) FROM Templates 
 SELECT count(*) FROM Templates 
 SELECT Templates.template_id,        Templates.version_number,        Ref_Template_Types.template_type_code FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code 
 SELECT Templates.template_id,        Templates.version_number,        Ref_Template_Types.template_type_code FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code 
 SELECT DISTINCT template_type_code FROM Templates 
 SELECT DISTINCT template_type_code FROM Ref_template_types 
 SELECT Templates.template_id FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code WHERE Ref_Template_Types.template_type_description = "PP"   OR Ref_Template_Types.template_type_description = "PPT" 
 SELECT Templates.template_id FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code WHERE Ref_Template_Types.template_type_description = "PP"   OR Ref_Template_Types.template_type_description = "PPT" 
 SELECT count(*) FROM Templates WHERE template_type_code = "CV" 
 SELECT count(*) FROM Templates WHERE template_type_code = "CV" 
 SELECT Version_Number,        Template_Type_Code FROM Templates WHERE Version_Number > 5 
 SELECT Version_Number,        Template_Type_Code FROM Templates WHERE Version_Number > 5 
 SELECT template_type_code,        count(*) FROM Templates GROUP BY template_type_code 
 SELECT template_type_code,        count(*) FROM Templates GROUP BY template_type_code 
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.template_type_code FROM Templates JOIN Templates ON Templates.template_type_code = Templates.template_type_code GROUP BY Templates.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT min(version_number),        template_type_code FROM Templates 
 SELECT min(version_number),        template_type_code FROM Templates 
 SELECT Templates.template_type_code FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_name = "Data base" 
 SELECT Templates.template_type_code FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_name = "Data base" 
 SELECT Documents.document_name FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Templates.template_type_code = "BK" 
 SELECT Documents.document_name FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Templates.template_type_code = "BK" 
 SELECT Ref_Template_Types.template_type_code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code GROUP BY Ref_Template_Types.template_type_code 
 SELECT Ref_Template_Types.template_type_code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code GROUP BY Ref_Template_Types.template_type_code 
 SELECT Ref_Template_Types.template_type_code FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.template_type_code = Documents.template_type_code GROUP BY Ref_Template_Types.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_Template_Types.template_type_code FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.template_type_code = Documents.template_type_code GROUP BY Ref_Template_Types.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Ref_template_types EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code FROM Ref_template_types EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code,        template_type_description FROM Ref_Template_Types 
 SELECT template_type_code,        template_type_description FROM Ref_template_types 
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = "AD" 
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = "AD" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT DISTINCT Templates.template_type_description FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Templates.template_type_description 
 SELECT DISTINCT Templates.template_type_description FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id 
 SELECT Templates.template_id FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code WHERE Ref_Template_Types.template_type_description = "Presentation" 
 SELECT Templates.template_id FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code WHERE Ref_Template_Types.template_type_description = 'Presentation' 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs WHERE Document_ID = 1 
 SELECT count(*) FROM Paragraphs WHERE Document_ID = 1 
 SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea ' 
 SELECT Paragraphs.paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.document_id = Documents.document_id WHERE Documents.document_name = "Korea" 
 SELECT Paragraphs.Paragraph_ID,        Paragraphs.Paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_name = 'Welcome to NY' 
 SELECT Paragraph_ID,        Paragraphs.paragraph_text FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = 'Welcome to NY' 
 SELECT Paragraphs.paragraph_text FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Customer reviews" 
 SELECT Paragraphs.paragraph_text FROM Documents JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = 'Customer reviews' 
 SELECT document_id,        count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT Document_ID,        count(*) FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) DESC 
 SELECT Document_ID,        Document_name,        count(*) FROM Documents GROUP BY Document_ID 
 SELECT document_id,        document_name,        count(*) FROM Documents GROUP BY document_id 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2 
 SELECT document_id,        document_name FROM documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id,        document_name FROM Documents ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM Documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM Paragraphs WHERE paragraph_id BETWEEN 1 AND 2 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) BETWEEN 1 AND 2 
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_text = 'Brazil'   OR Paragraph_text = 'Ireland' 
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_text = 'Brazil'   OR Paragraph_text = 'Ireland' 
 SELECT count(*) FROM teacher 
 SELECT count(*) FROM teacher 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Age,        Hometown FROM teacher 
 SELECT Age,        Hometown FROM teacher 
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
 SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher WHERE Hometown = "Little Lever Urban District" 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1 
 SELECT hometown FROM teacher ORDER BY age LIMIT 1 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,        count(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT T1.Hometown FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(*) >= 2 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC 
 SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = "math" 
 SELECT Name FROM teacher WHERE Age > 30   AND Course = "Math" 
 SELECT teacher.Name,        count(*) FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name 
 SELECT Name,        count(*) FROM teacher GROUP BY Name 
 SELECT Name FROM teacher GROUP BY Name HAVING COUNT(*) >= 2 
 SELECT Name FROM teacher GROUP BY Name HAVING COUNT(*) >= 2 
 SELECT Name FROM teacher EXCEPT SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID 
 SELECT Name FROM teacher EXCEPT SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID 
 SELECT count(*) FROM visitor WHERE age < 30 
 SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC 
 SELECT avg(visitor.Age) FROM visitor JOIN museum ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Level_of_membership > 4 
 SELECT Name,        Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC 
 SELECT museum.Museum_ID,        museum.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID GROUP BY museum.Museum_ID ORDER BY visitor.Num_of_Staff DESC LIMIT 1 
 SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < 2009 
 SELECT open_year,        Num_of_Staff FROM museum WHERE name = "Plaza Museum" 
 SELECT Name FROM museum WHERE Open_Year > 2010   AND Num_of_Staff >     (SELECT min(Num_of_Staff)      FROM museum      WHERE Open_Year > 2010) 
 SELECT ID,        Name,        Age FROM visitor WHERE ID IN     (SELECT visitor_ID      FROM visit      GROUP BY visitor_ID      HAVING count(*) > 1) 
 SELECT visitor.ID,        visitor.Name,        visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY sum(visit.Total_spent) DESC LIMIT 1 
 SELECT museum.Museum_ID,        museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Name FROM museum WHERE Museum_ID NOT IN     (SELECT Museum_ID      FROM visitor) 
 SELECT Name,        Age FROM visitor ORDER BY Num_of_Ticket DESC LIMIT 1 
 SELECT avg(Num_of_Ticket),        max(Num_of_Ticket) FROM visit 
 SELECT sum(visit.Num_of_Ticket) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1 
 SELECT Name FROM visitor WHERE ID IN     (SELECT visitor_ID      FROM visit      WHERE Open_Year < 2009 INTERSECT        SELECT visitor_ID        FROM visit WHERE Open_Year > 2011) 
 SELECT count(*) FROM visitor WHERE ID NOT IN     (SELECT visitor_ID      FROM visit      WHERE open_year > 2010) 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches 
 SELECT count(*) FROM matches 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT avg(loser_age),        avg(winner_age) FROM matches 
 SELECT avg(loser_age),        avg(winner_age) FROM matches 
 SELECT avg(winner_rank) FROM matches 
 SELECT avg(winner_rank) FROM matches 
 SELECT max(winner_rank) FROM matches 
 SELECT max(winner_rank) FROM matches 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
 SELECT winner_name FROM matches WHERE match_num >= 1   AND match_num <= 6   AND year = 2013 INTERSECT   SELECT winner_name   FROM matches WHERE match_num >= 1     AND match_num <= 6 AND year = 2016 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT count(*) FROM matches WHERE tourney_date LIKE "2013%"   OR tourney_date LIKE "2016%" 
 SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "WTA Championships" INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.score = "WTA Championships" INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.score = "Australian Open" 
 SELECT first_name,        country_code FROM players ORDER BY birth_date LIMIT 1 
 SELECT first_name,        country_code FROM players ORDER BY birth_date LIMIT 1 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = 'Left' ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = 'Left' ORDER BY birth_date 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT winner_name,        winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1 
 SELECT players.winner_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.winner_name ORDER BY count(*) DESC LIMIT 1 
 SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "Australian Open"   AND players.ranking_points =     (SELECT max(ranking_points)      FROM rankings      WHERE ranking = 1) 
 SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "Australian Open" ORDER BY ranking_points DESC LIMIT 1 
 SELECT players.loser_name,        players.winner_name FROM matches JOIN players ON matches.loser_id = players.player_id JOIN players ON matches.winner_id = players.player_id ORDER BY matches.minutes DESC LIMIT 1 
 SELECT players.winner_name,        players.loser_name FROM matches JOIN players ON matches.loser_id = players.player_id ORDER BY matches.match_num - matches.match_num LIMIT 1 
 SELECT avg(rankings.ranking),        players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name 
 SELECT players.first_name,        avg(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name 
 SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name 
 SELECT first_name,        sum(ranking_points) FROM rankings GROUP BY first_name 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT sum(tours),        ranking_date FROM rankings GROUP BY ranking_date 
 SELECT ranking,        count(*) FROM rankings GROUP BY ranking_date 
 SELECT YEAR,        count(*) FROM matches GROUP BY YEAR 
 SELECT YEAR,        count(*) FROM matches GROUP BY YEAR 
 SELECT winner_name,        winner_rank FROM matches WHERE match_num IN     (SELECT match_num      FROM matches      WHERE draw_size = 0      GROUP BY match_num      ORDER BY min(winner_age)      LIMIT 3) 
 SELECT winner_name,        winner_rank FROM matches WHERE match_num IN     (SELECT match_num      FROM matches      WHERE draw_size = 0      ORDER BY winner_age      LIMIT 3) 
 SELECT count(DISTINCT winner_id) FROM matches WHERE surface = 'WTA'   AND loser_hand = 'left' 
 SELECT COUNT(*) FROM matches JOIN players ON matches.loser_id = players.player_id WHERE players.hand = 'Left'   AND matches.tourney_name = 'WTA Championships' 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.score DESC LIMIT 1 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY sum(winner_rank_points) DESC LIMIT 1 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT count(*) FROM ship WHERE tonnage = 'Captured' 
 SELECT name,        tonnage FROM ship ORDER BY name DESC 
 SELECT name,        date,        result FROM battle 
 SELECT max(killed),        min(injured) FROM death 
 SELECT avg(injured) FROM death 
 SELECT death.note,        death.killed,        death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' 
 SELECT name,        result FROM battle WHERE bulgarian_commander!= 'Boril' 
 SELECT DISTINCT battle.id,                 ship.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' 
 SELECT battle.id,        battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING sum(killed) > 10 
 SELECT ship.id,        ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY death.caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1 
 SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.bulgarian_commander = 'Kaloyan'   AND ship.latin_commander = 'Baldwin I' 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM ship WHERE tonnage!= 225 
 SELECT battle.name,        battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice'   AND ship.name = 'HMS Atalanta' 
 SELECT name,        result,        bulgarian_commander FROM battle WHERE lost_in_battle = 0 
 SELECT note FROM death WHERE note LIKE '%East%' 
 SELECT * FROM addresses WHERE line_1 = "yes"   AND line_2 = "yes" 
 SELECT line_1,        line_2 FROM addresses 
 SELECT count(*) FROM Courses 
 SELECT count(*) FROM Courses 
 SELECT course_description FROM Courses WHERE course_name = "Math" 
 SELECT course_description FROM Courses WHERE course_name = "Math" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea"; 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea"; 
 SELECT department_name,        department_id FROM DEGREE_PROGRAMENTS GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT department_name,        department_id FROM DEGREE_PROGRAMENTS GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM DEPARTMENTs WHERE department_name!= "None" 
 SELECT count(DISTINCT department_id) FROM DEGREE_PROGRAMENTS 
 SELECT count(DISTINCT degree_name) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(*) FROM DEGREE_PROGRAMS JOIN DEPARTMENTS ON DEGREE_PROGRAMENTS.department_id = DEPARTMENTS.department_id WHERE DEPARTMENTS.department_name = "Engineering" 
 SELECT count(*) FROM DEGREE_PROGRAMS JOIN DEPARTMENTS ON DEGREE_PROGRAMENTS.department_id = DEPARTMENTS.department_id WHERE DEPARTMENTS.department_name = "Engineering" 
 SELECT section_name,        section_description FROM Sections 
 SELECT section_name,        section_description FROM Sections 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) <= 2 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) < 2 
 SELECT section_name FROM Sections ORDER BY section_name DESC 
 SELECT section_name FROM Sections ORDER BY section_name REVERSE 
 SELECT semester_id,        semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id GROUP BY student_enrolment.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT semesters.semester_name,        semesters.semester_id FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE "%the computer%" 
 SELECT department_description FROM DEPARTMENTS WHERE department_name LIKE "%computer%" 
 SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN students ON student_enrolment.student_id = students.student_id WHERE student_enrolment.semester_id = 1 GROUP BY student_enrolment.student_id HAVING count(*) = 2; 
 SELECT students.first_name,        students.middle_name,        students.last_name,        student_enrolment.student_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN students ON student_enrolment.student_id = students.student_id WHERE student_enrolment.semester_id = 1   AND student_enrolment_programs.id = 2 
 SELECT first_name,        middle_name,        last_name FROM Student_Enrolment WHERE degree_program_id = 1; 
 SELECT first_name,        middle_name,        last_name FROM Student_Enrolment WHERE degree_program_id = 1 
 SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1 
 SELECT degree_program_id,        degree_summary_name FROM degree_programs JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT degree_program_id,        degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT student_id,        first_name,        middle_name,        last_name,        count(*) FROM Student_Enrolment GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT students.first_name,        students.middle_name,        students.last_name,        count(*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT DISTINCT semester_name FROM semesters EXCEPT SELECT DISTINCT student_enrolment.semester_id FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id 
 SELECT semester_name FROM semesters EXCEPT SELECT DISTINCT student_enrolment.semester_id FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE students.state_province_county = "North Carolina" EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id = 1 
 SELECT last_name FROM students EXCEPT SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE students.state_province_county = "North Carolina" 
 SELECT transcript_date,        transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_id HAVING count(*) >= 2 
 SELECT transcript_date,        transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_id HAVING count(*) >= 2 
 SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy"   AND last_name = "Ward"; 
 SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy"   AND last_name = "Ward"; 
 SELECT first_name,        middle_name,        last_name FROM Students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name,        middle_name,        last_name FROM Students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name,        middle_name,        last_name FROM Students WHERE date_first_registered =     (SELECT min(date_first_registered)      FROM Students) 
 SELECT first_name,        middle_name,        last_name FROM students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name FROM Students EXCEPT SELECT first_name FROM Students WHERE current_address_id = permanent_address_id 
 SELECT first_name FROM Students EXCEPT SELECT first_name FROM Students WHERE current_address_id = permanent_address_id 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2,        Addresses.line_3 FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT address_id,        line_1,        line_2 FROM addresses GROUP BY address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY avg(transcript_date) 
 SELECT avg(transcript_date) FROM Transcripts 
 SELECT transcript_date,        transcript_details FROM TRANSCIRPTS ORDER BY transcript_date 
 SELECT transcript_date,        other_details FROM transcripts ORDER BY transcript_date LIMIT 1 
 SELECT count(*) FROM Transcripts 
 SELECT count(*) FROM TRANSCRIPTS; 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT count(DISTINCT student_enrolment_id) FROM student_enrolment_courses 
 SELECT max(student_course_id),        course_id FROM Transcripts GROUP BY course_id 
 SELECT transcript_id,        transcript_date FROM transcripts GROUP BY transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT transcript_date,        transcript_id FROM transcripts GROUP BY transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT DISTINCT student_enrolment.semester_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN student_enrolment ON student_enrolment_enrolment_id = student_enrolment_enrolment_id JOIN student_enrolment_courses ON student_enrolment_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment.first_name = "Master"   AND student_enrolment.last_name = "Student"   AND student_enrolment_enrolment_id = "B" 
 SELECT DISTINCT semester_id FROM student_enrolment WHERE degree_program_id = 1 INTERSECT   SELECT DISTINCT semester_id   FROM student_enrolment WHERE degree_program_id = 2 
 SELECT count(DISTINCT current_address_id) FROM Students 
 SELECT DISTINCT addresses.address_id FROM students JOIN addresses ON students.current_address_id = addresses.address_id 
 SELECT first_name,        last_name FROM Students ORDER BY last_name REVERSE 
 SELECT other_details FROM Students ORDER BY first_name 
 SELECT section_name FROM Sections WHERE section_name = "h"; 
 SELECT section_description FROM Sections WHERE section_name = "h"; 
 SELECT first_name FROM Students WHERE permanent_address_id IN     (SELECT permanent_address_id      FROM Addresses      WHERE country = "Haiti")   OR cell_mobile_number = "09700166582"; 
 SELECT first_name FROM Students WHERE permanent_address_id = 1   OR cell_mobile_number = "09700166582" 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" 
 SELECT COUNT (DISTINCT Cartoon.title) FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id WHERE Cartoon.Written_by = "Joseph Kuhr" 
 SELECT count(*) FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id WHERE TV_series.Written_by = "Joseph Kuhr" 
 SELECT title,        directed_by FROM cartoon ORDER BY original_air_date 
 SELECT Title,        Directed_by FROM Cartoon ORDER BY Original_air_date 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"   OR Directed_by = "Brandon Vietti" 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"   OR Directed_by = "Brandon Vietti" 
 SELECT Country,        count(*) FROM TV_channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT Country,        count(*) FROM TV_channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT series_name),        content FROM TV_channel 
 SELECT count(DISTINCT series_name,              content) FROM TV_channel 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT content FROM TV_series WHERE title = "Sky Radio"; 
 SELECT package_option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT Package_Option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT count(*) FROM TV_channel WHERE language = 'english' 
 SELECT count(*) FROM TV_channel WHERE Language = 'English' 
 SELECT Language,        count(*) FROM TV_channel GROUP BY Language ORDER BY count(*) DESC LIMIT 1 
 SELECT Language,        count(*) FROM TV_channel GROUP BY Language ORDER BY count(*) ASC LIMIT 1 
 SELECT Language,        count(*) FROM TV_CHANNEL GROUP BY Language 
 SELECT Language,        COUNT(*) FROM TV_Channel GROUP BY Language 
 SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.id = TV_series.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!"; 
 SELECT TV_series.series_name FROM TV_series JOIN TV_channel ON TV_series.channel = TV_channel.id JOIN cartoon ON TV_series.id = cartoon.id WHERE cartoon.title = "The Rise of the Blue Beetle" 
 SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Series_name = "Sky Radio" 
 SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Series_name = "Sky Radio" 
 SELECT Episode FROM TV_series ORDER BY Rating DESC 
 SELECT Episode FROM TV_series ORDER BY Rating 
 SELECT episode,        rating FROM TV_series ORDER BY rating DESC LIMIT 3 
 SELECT episode,        rating FROM TV_series ORDER BY rating DESC LIMIT 3 
 SELECT min(Share),        max(Share) FROM TV_series 
 SELECT max(Share),        min(Share) FROM TV_series 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"; 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"; 
 SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime" 
 SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Series_name = "Sky Radio" 
 SELECT Episode FROM TV_series WHERE title = "Sky Radio" 
 SELECT COUNT (DISTINCT directed_by) FROM Cartoon 
 SELECT COUNT (DISTINCT directed_by),        directed_by FROM Cartoon GROUP BY directed_by 
 SELECT Production_code,        Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1 
 SELECT Production_code,        Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1 
 SELECT package_option,        series_name FROM TV_series WHERE hight_definition_tv = 'Yes' 
 SELECT package_option,        series_name FROM TV_channel WHERE hight_definition_tv = 'yes' 
 SELECT tv_channel.Country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.Written_by = "Todd Casey" 
 SELECT Country FROM TV_channel WHERE Channel IN     (SELECT Channel      FROM Cartoon      WHERE Written_by = "Todd Casey") 
 SELECT Country FROM TV_channel EXCEPT SELECT Country FROM Cartoon JOIN TV_channel ON Cartoon.Channel = TV_channel.id WHERE Cartoon.Written_by = "Todd Casey" 
 SELECT Country FROM TV_channel EXCEPT SELECT Country FROM Cartoon WHERE Written_by = "Todd Casey" 
 SELECT TV_channel.series_name,        TV_channel.Country FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE Cartoon.directed_by = "Ben Jones" INTERSECT   SELECT TV_channel.series_name,          TV_channel.Country   FROM TV_channel   JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE Cartoon.directed_by = "Michael Chang" 
 SELECT TV_channel.series_name,        TV_channel.Country FROM TV_channel JOIN Cartoon ON TV_channel.id = Cartoon.id WHERE Cartoon.directed_by = "Ben Jones"   AND Cartoon.directed_by = "Michael Chang" 
 SELECT tv_channel.id,        tv_channel.pixel_aspect_ratio,        tv_channel.Country FROM tv_channel EXCEPT SELECT tv_channel.id,        tv_channel.pixel_aspect_ratio,        tv_channel.Country FROM tv_channel JOIN TV_series ON tv_channel.id = TV_series.channel WHERE tv_series.language = 'English' 
 SELECT TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Language = 'English' 
 SELECT tv_channel.id FROM tv_channel JOIN tv_channel ON tv_channel.id = tv_channel.id GROUP BY tv_channel.id HAVING count(*) > 2 
 SELECT id FROM TV_CHANNEL GROUP BY id HAVING count(*) > 2 
 SELECT id FROM TV_channel EXCEPT SELECT TV_channel.id FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.directed_by = "Ben Jones" 
 SELECT id FROM TV_channel EXCEPT SELECT TV_channel.id FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel EXCEPT SELECT package_option FROM (SELECT channel          FROM TV_series          WHERE directed_by = "Ben Jones") 
 SELECT package_option FROM TV_channel EXCEPT SELECT package_option FROM (SELECT channel          FROM TV_series          WHERE directed_by = "Ben Jones") 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT max(poker_player.final_table_made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 200000 
 SELECT max(poker_player.final_table_made) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings < 200000 
 SELECT Name FROM people 
 SELECT Name FROM people 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player_Final_Table_Made ASC 
 SELECT Name FROM poker_player ORDER BY Final_Table_Made ASC 
 SELECT Birth_Date FROM people ORDER BY Earnings ASC LIMIT 1 
 SELECT Birth_Date FROM people ORDER BY Earnings ASC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
 SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
 SELECT avg(Earnings) FROM poker_player WHERE Height > 200 
 SELECT Name FROM poker_player ORDER BY Earnings DESC 
 SELECT Name FROM poker_player ORDER BY Earnings DESC 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Name,        Birth_Date FROM people ORDER BY Name ASC 
 SELECT Name,        Birth_Date FROM people ORDER BY Name 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people EXCEPT SELECT people.Name FROM people JOIN people ON people.People_ID = people.People_ID WHERE people.Nationality = "Russia" 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
 SELECT Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT state) FROM AREA_CODE_STATE 
 SELECT contestant_number,        contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
 SELECT vote_id,        phone_number,        state FROM VOTES 
 SELECT max(area_code),        min(area_code) FROM AREA_CODE_STATE 
 SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1 
 SELECT DISTINCT contestant_name FROM contestants EXCEPT SELECT contestant_name FROM contestants WHERE contestant_name = 'Jessie Alloway' 
 SELECT DISTINCT state,                 created FROM VOTES 
 SELECT DISTINCT contestant_number,                 contestant_name FROM VOTES GROUP BY contestant_number HAVING count(*) >= 2 
 SELECT contestant_number,        contestant_name FROM contestants ORDER BY votes LIMIT 1 
 SELECT COUNT(*) FROM VOTES WHERE state = 'NY'   OR state = 'CA' 
 SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN     (SELECT contestant_number      FROM VOTES) 
 SELECT area_code FROM votes GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT votes.created,        votes.state,        votes.phone_number FROM votes JOIN CONTESTANTS ON votes.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' 
 SELECT DISTINCT area_code FROM votes WHERE contestant_number = 1   AND contestant_number = 2 
 SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%' 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
 SELECT count(*) FROM country WHERE governmentform ='republic' 
 SELECT sum(surfaceArea) FROM country WHERE Region = "Caribbean" 
 SELECT sum(surfacearea) FROM country WHERE continent = 'Caribbean' 
 SELECT Continent FROM country WHERE Name = "Anguilla" 
 SELECT continent FROM country WHERE name = "Anguilla" 
 SELECT Region FROM city WHERE Name = "Kabul" 
 SELECT Region FROM country WHERE Name = "Kabul"; 
 SELECT language FROM countrylanguage WHERE countrycode = "aru" GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE countrycode = "aru"   AND percentage > 50; 
 SELECT population,        lifeexpectancy FROM country WHERE name = "Brazil" 
 SELECT population,        lifeexpectancy FROM country WHERE name = "Brazil"; 
 SELECT region,        population FROM country WHERE name = "angola" 
 SELECT region,        population FROM country WHERE name = "angola" 
 SELECT avg(LifeExpectancy) FROM country WHERE Region = "Central Africa" 
 SELECT avg(LifeExpectancy) FROM country WHERE Region = "Central Africa" 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countryregion = 'Asia'   AND countrylifeexpectancy =     (SELECT MIN(countrylifeexpectancy)      FROM country      WHERE region = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1 
 SELECT sum(population),        max(gnp) FROM country WHERE continent = 'Asia' 
 SELECT Asia,        MAX(GNP) FROM country WHERE Region = 'Asia' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa'   AND GovernmentForm = 'Republic' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Africa"   AND GovernmentForm = "Republic" 
 SELECT sum(surfaceArea) FROM country WHERE continent = 'Asia'   OR continent = 'Europe' 
 SELECT sum(surfacearea) FROM country WHERE continent = 'Asia'   OR continent = 'Europe' 
 SELECT Population FROM city WHERE District = "Gelderland"; 
 SELECT sum(Population) FROM city WHERE District = "Gelderland"; 
 SELECT avg(GNP),        sum(Population) FROM country WHERE GovernmentForm = 'Territory' 
 SELECT avg(GNP),        sum(Population) FROM country WHERE CountryCode IN     (SELECT CountryCode      FROM country      WHERE Continent = 'North America') 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "aru" 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "aru"   AND language = "english"   OR language = "papi"   OR language = "nederlands" 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "AFG"   AND isofficial = "yes" 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "AFG"   AND isofficial = "yes" 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.language ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM country WHERE population =     (SELECT MAX (population)      FROM country)   AND language =     (SELECT language      FROM countrylanguage      GROUP BY language      ORDER BY count(*) DESC      LIMIT 1) 
 SELECT continent FROM country GROUP BY continent ORDER BY count(*) DESC LIMIT 1 
 SELECT continent FROM country GROUP BY continent ORDER BY count(*) DESC LIMIT 1 
 SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Dutch' INTERSECT   SELECT COUNT(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' 
 SELECT count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'english' INTERSECT   SELECT count(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'dutch' 
 SELECT name FROM country WHERE language = 'english' INTERSECT   SELECT name   FROM country   WHERE language = 'french' 
 SELECT name FROM country WHERE language = 'english' INTERSECT   SELECT name   FROM country   WHERE language = 'french' 
 SELECT name FROM country WHERE language = 'english' INTERSECT   SELECT name   FROM country   WHERE language = 'french' 
 SELECT name FROM country WHERE language = 'english' INTERSECT   SELECT name   FROM country   WHERE language = 'french' 
 SELECT count(DISTINCT continent) FROM country WHERE language = 'Chinese' 
 SELECT count(*) FROM country WHERE name = "China"   AND language = "Chinese" 
 SELECT Region FROM country WHERE Language = 'English'   OR Language = 'Dutch' 
 SELECT Region FROM country WHERE Language = 'Dutch'   OR Language = 'English' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT language FROM countrylanguage WHERE continent = 'Asia' GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE region = 'Asia') GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE countrycode = 'USA' GROUP BY language HAVING count(*) = 1 
 SELECT language FROM countrylanguage WHERE isofficial = 'yes'   AND countrygovernmentform ='republic' GROUP BY language HAVING count(*) = 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.cityid WHERE countrylanguage.language = 'english' ORDER BY city.population DESC LIMIT 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.cityid WHERE countrylanguage.language = 'english' GROUP BY city.name ORDER BY count(*) DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE region = 'Asia' ORDER BY surfacearea DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE region = 'Asia' ORDER BY surfacearea DESC LIMIT 1 
 SELECT avg(LifeExpectancy) FROM country WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'english') 
 SELECT avg(LifeExpectancy) FROM country WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'english') 
 SELECT sum(Population) FROM country WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'english') 
 SELECT count(*) FROM country WHERE language!= 'english' 
 SELECT language FROM countrylanguage WHERE headofstate = 'Beatrix' 
 SELECT language FROM countrylanguage WHERE countrycode = (SELECT capital                      FROM country                      WHERE name = "Beatrix") 
 SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE indepyear < 1930) 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.foundingyear < 1930 
 SELECT name FROM country WHERE surfacearea >     (SELECT surfacearea      FROM country      WHERE continent = 'Europe') 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countryregion = 'Europe'   AND countryarea > (SELECT MAX (countryarea)                     FROM country) 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.language = 'african'   AND country.population < (SELECT min(population)                         FROM country                         WHERE continent = 'asia') 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.language = 'african'   AND country.population < (SELECT min(population)                         FROM country                         WHERE continent = 'asia') 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.language = 'asian'   AND country.population >     (SELECT max(population)      FROM country      WHERE continent = 'africa') 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.language = 'asian'   AND country.population >     (SELECT max(population)      FROM country      WHERE continent = 'africa') 
 SELECT CountryCode FROM country WHERE Language!= 'English' 
 SELECT CountryCode FROM country WHERE Language!= 'English' 
 SELECT countrycode FROM country WHERE language!= 'english' 
 SELECT countrycode FROM country WHERE language!= 'english' 
 SELECT code FROM country EXCEPT SELECT code FROM country WHERE language = 'english'   AND governmentform = 'Republic' 
 SELECT countrycode FROM country EXCEPT SELECT countrycode FROM country WHERE language = 'english'   AND governmentform = 'Republic' 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'Europe' EXCEPT SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'Europe'   AND country.language = 'english' 
 SELECT name FROM city WHERE countrycode NOT IN     (SELECT countrycode      FROM country      WHERE language = 'english') 
 SELECT DISTINCT city.name FROM city JOIN countrylanguage ON city.countrycode = countrycode WHERE country.language = 'Chinese'   AND country.countrycode IN     (SELECT countrycode      FROM country      WHERE region = 'Asia') 
 SELECT DISTINCT city.name FROM city JOIN countrylanguage ON city.countrycode = countrycode WHERE countrycode = 'Asia'   AND language = 'Chinese' 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT population,        name,        headofstate FROM country ORDER BY surfacearea DESC LIMIT 1 
 SELECT name,        population,        headofstate FROM country ORDER BY surfacearea DESC LIMIT 1 
 SELECT country.name,        count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(*) >= 3 
 SELECT country.name,        count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(*) > 2 
 SELECT city.District,        count(*) FROM city JOIN city ON city.ID = city.ID WHERE city.Population >     (SELECT avg(Population)      FROM city) GROUP BY city.District 
 SELECT city.District,        city.Population FROM city JOIN city ON city.ID = city.ID GROUP BY city.District HAVING city.Population >     (SELECT avg(Population)      FROM city) 
 SELECT governmentform,        sum(population) FROM country GROUP BY governmentform HAVING avg(lifeexpectancy) > 72 
 SELECT sum(population),        governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform 
 SELECT avg(LifeExpectancy),        sum(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY continent 
 SELECT continent,        sum(population),        avg(lifeexpectancy) FROM country WHERE avg(lifeexpectancy < 72) GROUP BY continent 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT name FROM city ORDER BY population DESC LIMIT 3 
 SELECT count(*) FROM country WHERE continent = 'Asia' 
 SELECT count(*) FROM country WHERE continent = 'Asia' 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000 
 SELECT name FROM country WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE continent = "Europe"      AND population = 80000) 
 SELECT sum(Population),        avg(SurfaceArea) FROM country WHERE Continent = 'North America'   AND SurfaceArea > 3000 
 SELECT sum(population),        avg(surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
 SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language,        country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY count(*) DESC LIMIT 1 
 SELECT countrycode,        language FROM countrylanguage GROUP BY language ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language ='spanish'   AND percentage =     (SELECT MAX(percentage)      FROM countrylanguage      WHERE language ='spanish') 
 SELECT count(*) FROM countrylanguage WHERE language ='spanish' 
 SELECT countrycode FROM countrylanguage WHERE language ='spanish' GROUP BY countrycode ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT countrycode FROM countrylanguage WHERE language ='spanish' 
 SELECT count(*) FROM conductor 
 SELECT count(*) FROM conductor 
 SELECT Name FROM conductor ORDER BY Age ASC 
 SELECT Name FROM conductor ORDER BY Age 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT avg(Attendance) FROM show 
 SELECT avg(Attendance) FROM show 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT name FROM conductor ORDER BY YEAR_OF_WORK DESC 
 SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN performance ON conductor.conductor_id = performance.conductor_id GROUP BY conductor.name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING count(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING count(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.year_of_founded > 2008 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) ASC 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) DESC 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT ORchester FROM orchestra EXCEPT SELECT ORchester FROM performance 
 SELECT ORchester FROM orchestra EXCEPT SELECT ORchester FROM performance 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format = 'CD'   OR major_record_format = 'DVD' 
 SELECT YEAR_OF_FOUNDED FROM orchestra GROUP BY YEAR_OF_FOUNDED HAVING count(*) > 1 
 SELECT YEAR_OF_FOUNDED FROM ORCHESTRA GROUP BY YEAR_OF_FOUNDED HAVING COUNT(*) > 1 
 SELECT count(*) FROM Highschooler 
 SELECT count(*) FROM Highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT DISTINCT grade FROM Highschooler 
 SELECT grade FROM Highschooler 
 SELECT grade FROM Highschooler WHERE name = "Kyle"; 
 SELECT grade FROM Highschooler WHERE name = "Kyle" 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT ID FROM Highschooler WHERE name = "Kyle" 
 SELECT ID FROM Friend WHERE friend_id = 1; 
 SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM Highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT student_id,        count(*) FROM Friend GROUP BY student_id 
 SELECT count(*),        student_id FROM Friend GROUP BY student_id 
 SELECT name,        count(*) FROM Highschooler GROUP BY name 
 SELECT name,        count(*) FROM Friend GROUP BY name 
 SELECT name FROM Highschooler ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM Highschooler GROUP BY name HAVING count(*) >= 3 
 SELECT name FROM Highschooler GROUP BY name HAVING count(*) >= 3 
 SELECT Friend.friend_id FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id WHERE Highschooler.name = "Kyle" 
 SELECT Friend.friend_id FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id WHERE Highschooler.name = "Kyle" 
 SELECT count(*) FROM Friend WHERE friend_id = 1 
 SELECT count(*) FROM Friend WHERE friend_id = 1 
 SELECT student_id FROM Highschooler EXCEPT SELECT DISTINCT student_id FROM Friend 
 SELECT ID FROM Highschooler EXCEPT SELECT DISTINCT student_id FROM Friend 
 SELECT name FROM Highschooler EXCEPT SELECT name FROM Friend 
 SELECT name FROM Highschooler EXCEPT SELECT DISTINCT name FROM Friend 
 SELECT DISTINCT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Highschooler ON Friend.friend_id = Highschooler.id WHERE Highschooler.id IN     (SELECT DISTINCT student_id      FROM Likes      WHERE liked_id IN          (SELECT student_id           FROM Likes           WHERE student_id IN               (SELECT DISTINCT student_id                FROM Likes                WHERE liked_id IN                    (SELECT student_id                     FROM Friend                     WHERE friend_id IN                         (SELECT friend_id                         FROM Friend                         WHERE friend_id IN                             (SELECT student_id                              FROM Likes                              WHERE liked_id IN                                  (SELECT student_id                                   FROM Likes                                   WHERE liked_id IN                                       (SELECT student_id                                        FROM Friend                                        WHERE friend_id IN                                            (SELECT student_id                                             FROM Likes                                             WHERE liked_id IN                                                 (SELECT student_id                                                  FROM Friend                                                  WHERE friend_id IN                                                      (SELECT student_id                                                       FROM Likes                                                       WHERE liked_id IN                                                           (SELECT student_id                    FROM Friend                    WHERE friend_id IN                        (SELECT student_id                         FROM
 SELECT student_id FROM Friend WHERE friend_id IN     (SELECT student_id      FROM Likes) 
 SELECT name FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Friend      WHERE friend_id IN          (SELECT liked_id           FROM Likes) UNION SELECT name FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Likes) 
 SELECT name FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Friend      WHERE friend_id IN          (SELECT liked_id           FROM Likes)) 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT likes.student_id,        count(*) FROM likes JOIN Highschooler ON likes.liked_id = Highschooler.id GROUP BY likes.student_id 
 SELECT likes.student_id,        count(*) FROM likes JOIN highschooler ON likes.liked_id = highschooler.id GROUP BY likes.student_id 
 SELECT name FROM Highschooler ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM likes GROUP BY likes.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT DISTINCT likes.student_id FROM likes JOIN highschooler ON likes.liked_id = highschooler.id GROUP BY likes.student_id HAVING count(*) >= 2 
 SELECT name FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Likes      GROUP BY student_id      HAVING count(*) >= 2) 
 SELECT name FROM Highschooler WHERE grade > 5   AND friend_id IN     (SELECT friend_id      FROM Friend      GROUP BY friend_id      HAVING count(*) >= 2) 
 SELECT name FROM Highschooler WHERE grade > 5   AND friend_id IN     (SELECT friend_id      FROM Friend      GROUP BY friend_id      HAVING count(*) >= 2) 
 SELECT count(*) FROM Likes WHERE student_id = 1; 
 SELECT count(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.id WHERE Highschooler.name = "Kyle" 
 SELECT avg(grade) FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Friend      GROUP BY student_id      HAVING count(*) > 1) 
 SELECT avg(grade) FROM Highschooler WHERE ID IN     (SELECT student_id      FROM Friend      GROUP BY student_id      HAVING count(*) >= 2) 
 SELECT min(grade) FROM Highschooler WHERE ID NOT IN     (SELECT student_id      FROM Friend) 
 SELECT min(grade) FROM Highschooler WHERE ID NOT IN     (SELECT student_id      FROM Friend) 
 SELECT state FROM owners INTERSECT SELECT state FROM Professionals 
 SELECT state FROM owners INTERSECT SELECT state FROM professionals 
 SELECT avg(age) FROM Dogs WHERE dog_id IN     (SELECT dog_id      FROM Treatments) 
 SELECT avg(age) FROM Dogs WHERE dog_id IN     (SELECT dog_id      FROM Treatments) 
 SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) > 2 UNION SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" 
 SELECT Professionals.professional_id,        Professionals.first_name,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) > 2 UNION SELECT Professionals.professional_id,        Professionals.first_name,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) > 2 
 SELECT name FROM dogs EXCEPT SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000 
 SELECT name FROM dogs WHERE owner_id NOT IN     (SELECT owner_id      FROM treatments      WHERE cost_of_treatment > 1000) 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.email_address FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id EXCEPT SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.email_address FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id JOIN Treatment_Types ON Dogs.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Professionals.professional_id,        Professionals.role_code,        Owners.email_address FROM Professionals JOIN Owners ON Professionals.owner_id = Owners.owner_id WHERE Professionals.role_code!= "TREATMENT_Types" 
 SELECT Owners.owner_id,        Owners.first_name,        Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Owners.owner_id,        Owners.first_name,        Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT breed_name FROM Dogs GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT treatment_type_description FROM treatment_types ORDER BY sum(cost_of_treatment) LIMIT 1 
 SELECT treatment_type_description FROM treatment_types ORDER BY sum(cost_of_treatment) LIMIT 1 
 SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id GROUP BY owners.owner_id ORDER BY sum(charges.charge_amount) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY sum(dogs.weight) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Professionals.first_name,        Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost <     (SELECT min(cost)      FROM Treatments) 
 SELECT first_name,        last_name FROM Professionals WHERE professional_id IN     (SELECT professional_id      FROM Treatments      WHERE cost_of_treatment <          (SELECT avg(cost_of_treatment)           FROM Treatments)) 
 SELECT treatment_id,        first_name,        last_name FROM treatments 
 SELECT treatment_id,        first_name,        last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Professionals.professional_id 
 SELECT treatment_type_code,        cost_of_treatment FROM treatments 
 SELECT treatment_type_code,        cost_of_treatment FROM treatments 
 SELECT Owners.first_name,        Owners.last_name,        Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.name = "Bella" 
 SELECT Owners.first_name,        Owners.last_name,        Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id 
 SELECT Owners.first_name,        Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id 
 SELECT Owners.first_name,        Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id 
 SELECT dogs.name,        treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_name = "Rough Collie" GROUP BY dogs.name ORDER BY count(*) DESC LIMIT 1 
 SELECT dogs.name,        dogs.date_adopted FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_name =     (SELECT breed_name      FROM breeds      GROUP BY breed_name      ORDER BY count(*) DESC      LIMIT 1) 
 SELECT Owners.first_name,        Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = "Virginia" 
 SELECT Owners.first_name,        Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = "Virginia" 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id 
 SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age LIMIT 1 
 SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age =     (SELECT min(age)      FROM dogs) 
 SELECT email_address FROM Professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT email_address FROM Professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT count(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id 
 SELECT count(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id 
 SELECT count(*) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.dog_id!= 0 
 SELECT count(*) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.dog_id!= 0 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Professionals JOIN Owners ON Professionals.owner_id = Owners.owner_id WHERE Owners.city LIKE '%West%' 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Professionals JOIN Owners ON Professionals.owner_id = Owners.owner_id WHERE Owners.city LIKE '%West%' 
 SELECT first_name,        last_name,        email_address FROM owners WHERE state LIKE '%North%' 
 SELECT first_name,        last_name,        email_address FROM owners WHERE state LIKE '%North%' 
 SELECT count(*) FROM Dogs WHERE age <     (SELECT avg(age)      FROM Dogs) 
 SELECT count(*) FROM Dogs WHERE age <     (SELECT avg(age)      FROM Dogs) 
 SELECT max(cost_of_treatment) FROM treatments 
 SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments) 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM treatments) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM Professionals EXCEPT SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.dog_id!= 0 
 SELECT count(*) FROM Professionals EXCEPT SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id 
 SELECT name,        age,        weight FROM dogs WHERE abandoned_yn = '1' 
 SELECT name,        age,        weight FROM dogs WHERE abandoned_yn = '1' 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT charge_type,        sum(charge_amount) FROM charges GROUP BY charge_type 
 SELECT charge_type,        sum(charge_amount) FROM charges GROUP BY charge_type 
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT DISTINCT breed_name,                 size_description FROM sizes UNION SELECT breed_name,        size_code FROM breeds 
 SELECT DISTINCT breed_name,                 size_description FROM dogs 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Professionals JOIN Treatment_Types ON Professionals.professional_id = Treatment_Types.professional_id 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Professionals JOIN Treatment_Types ON Professionals.professional_id = Treatment_Types.professional_id 
 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= 'France' 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT count(*),        citizenship FROM singer GROUP BY citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT max(net_worth_millions),        citizenship FROM singer GROUP BY citizenship 
 SELECT Title,        Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT Title,        Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT DISTINCT singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID WHERE song.Sales > 300000 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT Name FROM singer GROUP BY Name HAVING COUNT(*) > 1 
 SELECT Name FROM singer GROUP BY Name HAVING COUNT(*) > 1 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name 
 SELECT sum(sales),        name FROM song GROUP BY name 
 SELECT Name FROM singer EXCEPT SELECT singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID 
 SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
 SELECT CITIZEN FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT CITIZEN   FROM singer WHERE Birth_Year > 1955 
 SELECT CITIZEN FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT CITIZEN   FROM singer WHERE Birth_Year > 1955 
 SELECT count(*) FROM Other_Available_Features 
 SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = "AirCon" 
 SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code 
 SELECT properties.property_name FROM properties JOIN other_property_features ON properties.property_id = other_property_features.property_id WHERE properties.room_count > 1 
