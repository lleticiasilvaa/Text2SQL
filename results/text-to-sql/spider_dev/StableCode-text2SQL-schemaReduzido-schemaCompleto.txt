 SELECT count(*) FROM singer WHERE Is_male = 1   AND age > 40   AND country = "USA"   AND song_release_year > 2010   AND highest > 1000   AND lowest < 100   AND average > 50 
 SELECT count(*) FROM singer 
 SELECT singer.name,        singer.country,        singer.age FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON stadium.stadium_id = concert.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE stadium.name = "Stadium_1"   AND concert.theme = "Average" ORDER BY singer.age DESC 
 SELECT singer.name,        singer.country,        singer.age FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON stadium.stadium_id = concert.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE stadium.name = "West Gate" ORDER BY singer.age DESC 
 SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.country = "France"   AND concert.theme = "Love Songs"   AND concert.year >= 2000 
 SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.country = "France"   AND concert.theme = "Love Songs"   AND concert.year >= 2000 
 SELECT singer.Song_Name,        singer.Song_release_year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE stadium.Location = "London"   AND singer.Is_male = 1   AND singer.Age =     (SELECT min(age)      FROM singer) 
 SELECT singer.Song_Name,        singer.Song_release_year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE stadium.Highest = stadium.Lowest   AND singer.Is_male = 0   AND concert.Theme = "Love" ORDER BY singer.Age LIMIT 1 
 SELECT DISTINCT singer.country FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > 20 
 SELECT DISTINCT singer.country FROM singer JOIN concert ON singer.singer_id = concert.concert_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > 20 
 SELECT singer.country,        COUNT(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON stadium.stadium_id = concert.stadium_id WHERE stadium.capacity > 1000   AND stadium.highest > 1000   AND stadium.lowest > 1000   AND concert.theme = "Love"   AND singer.is_male = 1   AND singer.age > 40 GROUP BY singer.country 
 SELECT country,        count(*) FROM singer WHERE Is_male = 1 GROUP BY country 
 SELECT singer.Song_Name FROM stadium JOIN singer ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.age >     (SELECT avg(age)      FROM singer) 
 SELECT singer.Song_Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.age > stadium.average 
 SELECT location,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),        avg(average) FROM stadium 
 SELECT avg(capacity),        max(capacity) FROM stadium 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT stadium.name,        count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name 
 SELECT count(*),        stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name 
 SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT stadium.name,        stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY stadium.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE capacity = 0   AND highest = 0   AND lowest = 0   AND average = 0 
 SELECT name FROM stadium WHERE capacity = 0   AND highest = 0   AND lowest = 0   AND average = 0 
 SELECT singer.country FROM singer JOIN concert ON singer.singer_id = concert.concert_id JOIN stadium ON stadium.stadium_id = concert.stadium_id WHERE singer.age > 40 INTERSECT   SELECT singer.country   FROM singer   JOIN concert ON singer.singer_id = concert.concert_id   JOIN stadium ON stadium.stadium_id = concert.stadium_id WHERE singer.age < 30 
 SELECT name FROM stadium WHERE location!=     (SELECT stadium.location      FROM stadium      JOIN concert ON stadium.stadium_id = concert.stadium_id      WHERE concert.year = 2014) 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert      WHERE YEAR = 2014) 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer_in_concert ON stadium.stadium_id = singer_in_concert.stadium_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.is_male = 1   AND singer.age > 40   AND stadium.location = "London"   AND concert.year > 2010 GROUP BY concert.concert_name ORDER BY concert.theme 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer_in_concert ON stadium.stadium_id = singer_in_concert.stadium_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.country = "Male"   AND singer.age > 50   AND stadium.capacity > 20000   AND stadium.highest > 1000   AND stadium.lowest < 100   AND concert.year > 2010 GROUP BY concert.concert_name,          concert.theme 
 SELECT singer.name,        count(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON stadium.stadium_id = concert.stadium_id WHERE stadium.location = "London"   AND singer.age > 40   AND singer.is_male = 1   AND concert.theme = "Love"   AND concert.year > 2010 GROUP BY singer.name 
 SELECT singer.name,        count(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON stadium.stadium_id = concert.stadium_id WHERE stadium.location = "London"   AND singer.is_male = 1   AND singer.age > 60   AND concert.theme = "Love"   AND concert.year > 2010 GROUP BY singer.name 
 SELECT singer.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.singer_in_concert JOIN concert ON concert.concert_ID = stadium.concert_ID WHERE stadium.Highest = stadium.Lowest   AND concert.Year = 2014 
 SELECT singer.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.singer_in_concert JOIN concert ON concert.concert_ID = stadium.concert_ID WHERE stadium.Highest = stadium.Lowest   AND concert.Year = 2014 
 SELECT singer.name,        singer.country FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.theme = 'Hey' 
 SELECT singer.name,        singer.country FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.song_name LIKE '%Hey%' 
 SELECT stadium.name,        stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015 
 SELECT stadium.name,        stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.song_release_year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN concert ON stadium.stadium_id = concert.stadium_id   JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id   JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.song_release_year = 2015 
 SELECT count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10   AND Student.sex = 'F'   AND Student.age > 18   AND Student.major = 'Computer Science'   AND Student.advisor = '1121'   AND Student.city_code = 'BAL' 
 SELECT Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = 'F'   AND Pets.pet_age =     (SELECT min(pet_age)      FROM Pets      WHERE pet_type = 'dog') 
 SELECT weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = 'F'   AND Pets.pet_age =     (SELECT min(pet_age)      FROM Pets      WHERE pet_type = 'dog') 
 SELECT max(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F'   AND student.age > 20 GROUP BY pets.pettype 
 SELECT max(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F'   AND student.age > 20 GROUP BY pets.pettype 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age > 20 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age > 20 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = "F"   AND Pets.pet_age > 1   AND Pets.weight > 20 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = "F"   AND Pets.pettype = "Dog"   AND Pets.pet_age > 5   AND Pets.weight > 20 
 SELECT count(DISTINCT pettype) FROM pets WHERE pet_age > 10   AND weight > 20 
 SELECT count(DISTINCT pettype) FROM pets 
 SELECT Student.fname FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.petid = Pets.petid WHERE Pets.pettype = "Cat"   OR Pets.pettype = "Dog"   AND Student.sex = "F"   AND Student.age > 18   AND Student.major = "History"   AND Student.advisor = "212"   AND Student.city_code = "BAL" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = "Dog" UNION SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = "Cat" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Cat" INTERSECT   SELECT STUDENT.Fname   FROM STUDENT   JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Dog" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 1   AND Pets.pet_age < 2   AND Pets.weight < 1   AND Pets.pet_type = "Cat" INTERSECT   SELECT STUDENT.Fname   FROM STUDENT   JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = "Dog" 
 SELECT Major,        age FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.pet_age > 5        AND Pets.pettype = 'Cat') 
 SELECT major,        age FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.PetID = Pets.PetID      WHERE Pets.pet_age > 0        AND Pets.pettype = "Cat") 
 SELECT StuID FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.PetID = Pets.PetID      WHERE Pets.pet_age > 5        AND Pets.weight > 20) 
 SELECT StuID FROM Has_pet EXCEPT SELECT StuID FROM Has_pet JOIN Pets ON Has_pet.petid = Pets.petid WHERE Pets.pettype = "Cat" 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = 'Dog' EXCEPT SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = 'Cat' 
 SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20 EXCEPT SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Cat" 
 SELECT Pets.pettype,        Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = 'F'   AND Student.age =     (SELECT min(age)      FROM Student      WHERE sex = 'F') ORDER BY Pets.pet_age LIMIT 1 
 SELECT Pets.pettype,        Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = 'F'   AND Student.age =     (SELECT min(age)      FROM Student      WHERE sex = 'F') ORDER BY Pets.pet_age LIMIT 1 
 SELECT Pets.PetID,        Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age > 1 
 SELECT Pets.PetID,        Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age > 1 
 SELECT avg(pets.pet_age),        max(pets.pet_age),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'M'   AND student.major = 'EECS'   AND student.advisor = '1121' GROUP BY pets.pettype 
 SELECT avg(pets.pet_age),        max(pets.pet_age),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'M'   AND student.major = 'EECS'   AND student.advisor = '1121' GROUP BY pets.pettype 
 SELECT avg(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F'   AND student.age > 20   AND student.major = 120   AND city_code = 'BAL' GROUP BY pets.pettype 
 SELECT avg(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F'   AND student.age > 20   AND city_code = 'BAL' GROUP BY pets.pettype 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Student.sex = 'F'   AND Student.major = 600   AND Student.advisor = 7   AND Student.city_code = 'BAL' 
 SELECT DISTINCT Student.Fname,                 Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID 
 SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = "Smith" 
 SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = "Smith" 
 SELECT count(*),        student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'B' GROUP BY student.stuid 
 SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Student.sex = "F"   AND Student.major = "EECS"   AND Student.advisor = "1121"   AND Student.city_code = "BAL" GROUP BY Student.StuID 
 SELECT Student.fname,        sex FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.petid = Pets.petid GROUP BY Student.StuID HAVING count(*) > 1 
 SELECT Student.fname,        sex FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.petid = Pets.petid GROUP BY Student.StuID HAVING count(*) > 1 
 SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   AND pets.pet_age = 3 
 SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   AND pets.pet_age = 3   AND student.sex = 'B'   AND student.major = 'Biology'   AND student.advisor = '212'   AND student.city_code = 'BAL' 
 SELECT avg(age) FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet) 
 SELECT avg(age) FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.PetID = Pets.PetID) 
 SELECT count(DISTINCT continent) FROM countries 
 SELECT count(DISTINCT continent) FROM countries 
 SELECT countries.contid,        continents.continent,        count(*) FROM continents JOIN countries ON continents.contid = countries.contid GROUP BY continents.contid 
 SELECT continents.contid,        continents.continent,        count(*) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY continents.contid 
 SELECT count(DISTINCT countries.countryname) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 2005   AND cars_data.accelerate > 60   AND cars_data.cylinders = 4   AND cars_data.edispl > 300   AND cars_data.horsepower > 400   AND cars_data.weight > 3000   AND continents.continent = "North America"; 
 SELECT count(DISTINCT countries.countryname) FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE continents.continent = "Europe"   AND cars_data.year > 1980   AND cars_data.weight < 3000   AND cars_data.accelerate > cars_data.mpg   AND cars_data.cylinders > 4   AND cars_data.edispl > cars_data.horsepower; 
 SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_makers.Id = cars_data.Id JOIN car_names ON car_names.MakeId = cars_data.Id WHERE car_names.Model = model_list.Model GROUP BY car_makers.Id 
 SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON cars_data.Edispl = model_list.Edispl JOIN car_names ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 2005 GROUP BY car_makers.Id 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Year = 2005 ORDER BY cars_data.Horsepower LIMIT 1 
 SELECT model_list.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT car_makers.FullName FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970 
 SELECT car_makers.FullName FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970 GROUP BY car_makers.FullName 
 SELECT car_names.Make,        cars_data.Year FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE continents.Continent = "Europe"   AND cars_data.Year =     (SELECT min(YEAR)      FROM cars_data) 
 SELECT car_makers.FullName,        cars_data.year FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota" ORDER BY cars_data.year LIMIT 1 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980 
 SELECT countries.continent,        count(*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.continent 
 SELECT countries.continent,        count(*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.continent 
 SELECT countries.countryname FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid ORDER BY count(*) DESC LIMIT 1 
 SELECT countries.countryname FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*),        car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_makers.id = cars_data.id JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year = 2005 GROUP BY car_makers.fullname 
 SELECT car_makers.id,        car_makers.fullname,        count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.id 
 SELECT cars_data.Accelerate FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "AMC Hornet Sportabout (SW)" 
 SELECT Accelerate FROM cars_data WHERE Cylinders = 2   AND Edispl = 200   AND Horsepower = 200   AND Weight = 3500   AND Year = 1998   AND car_names.Model = "AMC Hornet Sportabout (SW)" 
 SELECT count(*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.countryname = "france" 
 SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = "France" 
 SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.model = model_list.model WHERE countries.continent = "North America" 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.country = "United States" 
 SELECT avg(cars_data.mpg) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "Toyota"   AND cars_data.cylinders = 4 
 SELECT avg(cars_data.mpg) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "Toyota"   AND cars_data.cylinders = 4 
 SELECT min(cars_data.Weight) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Ford"   AND cars_data.Cylinders = 8   AND cars_data.Year = 1974 
 SELECT min(cars_data.Weight) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Cylinders = 8   AND cars_data.Year = 1974 
 SELECT car_makers.maker,        model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker 
 SELECT car_makers.maker,        model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_makers.id = cars_data.id JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE continents.continent = "Europe"   AND cars_data.year = 2005   AND cars_data.accelerate > cars_data.mpg   AND cars_data.weight < cars_data.cylinders   AND cars_data.edispl > cars_data.horsepower ORDER BY car_makers.full_name 
 SELECT countries.CountryName,        countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country 
 SELECT countries.CountryName,        countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT count(*) FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = "Hennes"   AND cars_data.horsepower > 150 
 SELECT cars_data.year,        avg(cars_data.weight) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE continents.continent = "Europe"   AND car_makers.maker = "Toyota" GROUP BY cars_data.year 
 SELECT cars_data.year,        avg(cars_data.weight) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE continents.continent = "Europe"   AND model_list.model = "Hennes" GROUP BY cars_data.year 
 SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING count(*) >= 3 
 SELECT countries.countryname FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING count(*) >= 3 
 SELECT max(cars_data.Horsepower),        car_names.Make FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make 
 SELECT car_makers.FullName,        max(cars_data.Horsepower) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Cylinders = 3 GROUP BY car_makers.FullName 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Year = 2005 GROUP BY car_names.Model ORDER BY cars_data.mpg DESC LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota" ORDER BY cars_data.mpg DESC LIMIT 1 
 SELECT avg(cars_data.Horsepower) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Year < 1980 
 SELECT avg(cars_data.Horsepower) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Year < 1980 
 SELECT avg(cars_data.Edispl) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = "volvo" 
 SELECT avg(cars_data.Edispl) FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Volvo" 
 SELECT max(Accelerate),        Cylinders FROM cars_data WHERE YEAR = 1975 GROUP BY Cylinders 
 SELECT max(accelerate),        cylinders FROM cars_data GROUP BY cylinders 
 SELECT model_list.model FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model_list.model ORDER BY count(*) DESC LIMIT 1 
 SELECT model_list.model FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "Toyota" GROUP BY model_list.model ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Cylinders > 4 
 SELECT count(*) FROM cars_data WHERE Cylinders > 4 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980 
 SELECT count(*) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_makers.id = car_names.maker JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid WHERE cars_data.year = 1980   AND continents.continent = "Europe"   AND car_makers.fullname = "Toyota"   AND car_makers.maker = "Toyota"   AND car_makers.model = "Corolla"   AND cars_data.cylinder = 6   AND cars_data.edispl = 200   AND cars_data.horsepower = 150   AND cars_data.weight = 3000   AND cars_data.accelerate = 10; 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON cars_data.id = model_list.modelid WHERE car_makers.fullname = "American Motor Company" 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON cars_data.id = model_list.modelid WHERE car_makers.fullname = "American Motor Company" 
 SELECT car_makers.FullName,        car_makers.Id FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id HAVING count(*) > 3 
 SELECT car_makers.FullName,        car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING count(*) > 3 
 SELECT DISTINCT model_list.Model FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "General Motors"   AND cars_data.Weight > 3500 
 SELECT DISTINCT model_list.Model FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "General Motors"   OR cars_data.Weight > 3500 
 SELECT cars_data.year FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3000   AND cars_data.weight > 4000 
 SELECT DISTINCT cars_data.year FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 4000 INTERSECT   SELECT DISTINCT cars_data.year   FROM continents   JOIN countries ON continents.contid = countries.contid   JOIN car_makers ON countries.countryid = car_makers.countryid   JOIN model_list ON car_makers.id = model_list.maker   JOIN car_names ON car_makers.id = car_names.makeid   JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight > 3000 
 SELECT car_names.Model,        cars_data.Horsepower FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE continents.Continent = "Europe" ORDER BY cars_data.Accelerate DESC LIMIT 1 
 SELECT car_names.Model,        cars_data.Horsepower FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Year = 2005 ORDER BY cars_data.Accelerate DESC LIMIT 1 
 SELECT cars_data.cylinders FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.model = "volvo" ORDER BY cars_data.accelerate LIMIT 1 
 SELECT cars_data.cylinders FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "volvo" ORDER BY cars_data.accelerate LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE horsepower =          (SELECT max(Horsepower)           FROM cars_data)) 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT max(Horsepower)           FROM cars_data)) 
 SELECT count(*) FROM   (SELECT countries.countryid    FROM countries    JOIN car_makers ON countries.countryid = car_makers.country    GROUP BY countries.countryid    HAVING count(*) > 2) 
 SELECT count(*) FROM   (SELECT countries.countryid    FROM countries    JOIN car_makers ON countries.countryid = car_makers.country    GROUP BY countries.countryid    HAVING count(*) > 2) 
 SELECT count(*) FROM cars_data WHERE Cylinders > 6 
 SELECT count(*) FROM cars_data WHERE Cylinders > 6 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.CountryId JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "Toyota"   AND cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1 
 SELECT car_names.makeid,        car_names.make FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.horsepower >     (SELECT min(horsepower)      FROM cars_data) INTERSECT   SELECT car_names.makeid,          car_names.make   FROM continents   JOIN countries ON continents.contid = countries.contid   JOIN car_makers ON countries.countryid = car_makers.countryid   JOIN model_list ON car_makers.id = model_list.maker   JOIN cars_data ON car_names.modelid = cars_data.id WHERE cars_data.cylinders > 3 
 SELECT car_names.MakeId,        car_names.Make FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower < car_makers.FullName   AND cars_data.Cylinders < 4 
 SELECT max(cars_data.mpg) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "Toyota"   AND cars_data.cylinders = 8   AND cars_data.year < 1980 
 SELECT max(cars_data.mpg) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "Ford Motor Company"   AND cars_data.cylinders = 8   AND cars_data.year < 1980 
 SELECT model_list.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName!= "Ford Motor Company"   AND cars_data.Weight < 3500 
 SELECT DISTINCT model_list.Model FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName!= "Ford Motor Company"   AND cars_data.Weight < 3500 
 SELECT countries.CountryName FROM countries JOIN car_makers ON countries.ContId = car_makers.Country GROUP BY countries.CountryId HAVING count(*) = 1 
 SELECT continent FROM continents EXCEPT SELECT countries.continent FROM countries JOIN car_makers ON countries.countryid = car_makers.country 
;
 SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.id HAVING count(*) >= 2 INTERSECT SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.id HAVING count(*) >= 2 HAVING count(*) > 3 
 SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_names ON car_names.makeid = model_list.maker WHERE model_list.model = "fiat" GROUP BY countries.countryid HAVING count(*) > 3 
 SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.makeid = cars_data.id WHERE model_list.model = "Fiat" GROUP BY countries.countryid HAVING count(*) > 3 
 SELECT airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = "JetBlue Airways" 
 SELECT airlines.country FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'Jetblue' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = "JetBlue Airways"   AND airports.country = "United States"; 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'Jetblue Airways'   AND airports.country = 'United States' 
 SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "USA" 
 SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.CountryAbbrev = "USA" 
 SELECT airports.AirportCode,        airports.AirportName FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = "Anthony" 
 SELECT airports.AirportCode,        airports.AirportName FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = "Anthony" 
 SELECT count(DISTINCT abbreviation) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports WHERE country = "United States" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports ON flights.destairport = airports.airportcode WHERE airports.country = "United States"   AND airports.countryabbrev = "US" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports ON flights.destairport = airports.airportcode WHERE airports.country = "United States"   AND airports.countryabbrev = "US"   AND flights.flightno = "AA"; 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airlines.abbreviation = 'UAL' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airlines.abbreviation = 'UAL' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT count(DISTINCT airlines.abbreviation) FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airlines.country = "USA" 
 SELECT airports.city,        airports.country FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.airportname = "Alton" 
 SELECT airports.city,        airports.country FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.airportname = "Alton" 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.SourceAirport WHERE airports.AirportCode = 'AKO' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.SourceAirport WHERE airports.AirportCode = 'AKO' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.SourceAirport WHERE airports.City = "Aberdeen" 
 SELECT AirportName FROM airports WHERE City = "Aberdeen"   AND CountryAbbrev = "GB"; 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG' 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG' 
 SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = "ATO" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "ATO" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport JOIN airports ON airports.airportcode = flights.destairport WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley' 
 SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport JOIN airports ON airports.airportcode = flights.destairport WHERE airports.city = "Aberdeen"   AND airports.city = "Ashley" 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'JetBlue Airways'   AND airports.country = 'United States'; 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = 'Jetblue Airways' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines'   AND airports.AirportCode = 'ASY'; 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = "United Airlines"   AND airports.countryabbrev = "ASY" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = 'UA' JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'AHD' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = "United Airlines"   AND airports.airportcode = "AHD"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = 'United' JOIN flights ON airlines.uid = flights.airline WHERE airports.city = 'Aberdeen' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = 'United' JOIN flights ON airlines.uid = flights.airline WHERE airports.city = 'Aberdeen' 
 SELECT airports.city FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.airportname = "London Heathrow" GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.AirportCode FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.airportcode FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city =     (SELECT cities.city      FROM airports      JOIN cities ON airports.city = cities.city      GROUP BY cities.city      ORDER BY count(*) DESC      LIMIT 1) GROUP BY airports.airportcode ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.AirportCode FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY count(*) LIMIT 1 
 SELECT airports.airportcode FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city = "Los Angeles" GROUP BY airports.airportcode ORDER BY count(*) ASC LIMIT 1 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "United States" GROUP BY airlines.abbreviation ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "United States" GROUP BY airlines.abbreviation ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "United States" GROUP BY airlines.uid ORDER BY count(*) LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airlines.uid ORDER BY count(*) LIMIT 1 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airports.airportcode = "AHD" 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airports.airportcode = 'AHD' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airports.airportcode = "AHD" 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'APG' INTERSECT   SELECT airlines.abbreviation   FROM airlines   JOIN airports ON airlines.uid = airports.country   JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'CVO' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.sourceairport WHERE airports.airportcode = 'APG' INTERSECT   SELECT airlines.abbreviation   FROM airlines   JOIN airports ON airlines.uid = airports.country   JOIN flights ON airlines.uid = flights.sourceairport WHERE airports.airportcode = 'CVO' 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'CVO' EXCEPT SELECT DISTINCT airlines.abbreviation FROM airlines JOIN airports ON airlines.uid = airports.country JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'APG' 
 SELECT airlines.abbreviation FROM airlines JOIN airports ON airports.airportcode = flights.sourceairport WHERE airports.airportname = "CVO" EXCEPT SELECT airlines.abbreviation FROM airlines JOIN airports ON airports.airportcode = flights.sourceairport WHERE airports.airportname = "APG" 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "United States" GROUP BY airlines.abbreviation HAVING count(*) >= 10 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = "United States" GROUP BY airlines.abbreviation HAVING count(*) >= 10 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) < 200 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) < 200 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.uid = airports.AirportCode JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "United Airlines"   AND airports.CountryAbbrev = "United States"; 
 SELECT DISTINCT flights.flightno FROM airlines JOIN airports ON airlines.abbreviation = 'United' JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports ON flights.destairport = airports.airportcode WHERE airports.country = 'United States'   AND airports.countryabbrev = 'US'   AND airlines.country = 'United States'   AND airlines.countryabbrev = 'US'; 
 SELECT FlightNo FROM flights WHERE sourceairport IN     (SELECT AirportCode      FROM airports      WHERE AirportName = "APG") 
 SELECT FlightNo FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'APG' 
 SELECT FlightNo FROM flights WHERE DestAirport IN     (SELECT AirportCode      FROM airports      WHERE AirportName = "APG"        AND Country = "Guatemala") 
 SELECT FLIGHTNo FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.airportcode = 'APG' 
 SELECT FLIGHTNo FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen" 
 SELECT FLIGHTNO FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen" 
 SELECT FLIGHTNo FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen" 
 SELECT FLIGHTNO FROM airlines JOIN airports ON airlines.abbreviation = airports.countryabbrev JOIN flights ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen"   OR airports.airportname = "Abilene" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen"   OR airports.airportname = "Abilene" 
 SELECT AirportName FROM airports WHERE CountryAbbrev NOT IN     (SELECT DestAirport.CountryAbbrev      FROM flights      JOIN airports ON flights.DestAirport = airports.AirportCode      JOIN airports ON flights.SourceAirport = airports.AirportCode) 
 SELECT AirportCode,        AirportName FROM airports WHERE Country = "United States" EXCEPT SELECT airports.AirportCode,        airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport UNION SELECT airports.AirportCode,        airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee WHERE age > 30   AND city = 'London' 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Manager_name JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID ORDER BY employee.Age 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Manager_name JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID ORDER BY employee.Age ASC 
 SELECT count(*),        employee.city FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE shop.location = "London"   AND evaluation.year_awarded > 2010 GROUP BY employee.city 
 SELECT count(*),        employee.city FROM employee JOIN shop ON employee.employee_id = shop.manager_name JOIN hiring ON shop.shop_id = hiring.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE hiring.is_full_time = 1 GROUP BY employee.city 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT LOCATION,        COUNT(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,        COUNT(*) FROM shop GROUP BY LOCATION 
 SELECT shop.manager_name,        shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = 2011 GROUP BY shop.district ORDER BY sum(employee.age) DESC LIMIT 1 
 SELECT shop.manager_name,        shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = 2016 GROUP BY shop.district ORDER BY sum(shop.number_products) DESC LIMIT 1 
 SELECT min(shop.Number_products),        max(shop.Number_products) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE shop.District = "Kowloon Bay"   AND evaluation.Year_awarded >= 2010 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT shop.name,        shop.location,        shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY shop.number_products DESC 
 SELECT shop.name,        shop.location,        shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = 2015 ORDER BY shop.number_products DESC 
 SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE shop.number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE shop.number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON shop.shop_id = hiring.shop_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE shop.district = "Kowloon Bay"   AND hiring.is_full_time = 1 GROUP BY employee.employee_id ORDER BY count(*) DESC LIMIT 1 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = hiring.Employee_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE hiring.Is_full_time = 1   AND evaluation.Year_awarded = 2011 GROUP BY employee.Name ORDER BY SUM (evaluation.Bonus) DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN shop ON employee.city = shop.location JOIN hiring ON shop.shop_id = hiring.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE hiring.is_full_time = 1 ORDER BY evaluation.bonus DESC LIMIT 1 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = hiring.Employee_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE hiring.Is_full_time = 1   AND evaluation.Year_awarded = 2015 ORDER BY evaluation.Bonus DESC LIMIT 1 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation) 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM hiring) 
 SELECT shop.name FROM employee JOIN shop ON employee.city = shop.location JOIN hiring ON shop.shop_id = hiring.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = 2011 GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1 
 SELECT shop.name FROM employee JOIN shop ON employee.city = shop.location JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE location = 'Not in the city'   AND district = 'Not in the city'   AND number_products = 0   AND manager_name = 'Not in the city' 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT shop.name,        COUNT(*) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE shop.district = "Kowloon Bay"   AND employee.age > 40 GROUP BY shop.name 
 SELECT count(*),        shop.name FROM employee JOIN shop ON employee.city = shop.location JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.name 
 SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.City = shop.Location JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE hiring.Is_full_time = 1   AND shop.District = "Kowloon Bay"   AND employee.Age > 40 
 SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.City = shop.Location JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE hiring.Is_full_time = 1   AND shop.District = "Kowloon Bay"   AND employee.Age > 40 
 SELECT * FROM hiring JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE shop.Location = "London"   AND employee.Age > 40   AND evaluation.Bonus > 5   AND hiring.Is_full_time = 1 
 SELECT * FROM hiring JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE shop.Location = "London"   AND employee.Age > 40   AND evaluation.Bonus > 0   AND hiring.Is_full_time = 1 
 SELECT DISTINCT shop.district FROM employee JOIN shop ON employee.city = shop.location WHERE shop.number_products < 3000 INTERSECT   SELECT DISTINCT shop.district   FROM employee   JOIN shop ON employee.city = shop.location WHERE shop.number_products > 10000 
 SELECT DISTINCT shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE shop.number_products < 3000 INTERSECT   SELECT DISTINCT shop.district   FROM shop   JOIN hiring ON shop.shop_id = hiring.shop_id   JOIN employee ON hiring.employee_id = employee.employee_id   JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE shop.number_products > 10000 
 SELECT count(DISTINCT shop.location) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE shop.district = "Kowloon Bay"   AND hiring.is_full_time = 1   AND evaluation.year_awarded > 2010 
 SELECT count(DISTINCT shop.location) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE employee.city = "New York"   AND hiring.is_full_time = 1   AND evaluation.year_awarded > 2010 
 SELECT count(DISTINCT documents.document_name) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_description = "Paragraph" 
 SELECT count(*) FROM documents 
 SELECT Documents.Document_ID,        Documents.Document_Name,        Documents.Document_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID 
 SELECT Documents.document_id,        Documents.document_name,        Documents.document_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id 
 SELECT Documents.document_name,        Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Documents.document_name,        Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Documents.document_id,        Templates.template_id,        Documents.document_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Robbin CV" 
 SELECT Documents.document_id,        Templates.template_id,        Documents.document_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Robbin CV" 
 SELECT count(DISTINCT templates.template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id 
 SELECT count(DISTINCT templates.template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id 
 SELECT count(DISTINCT documents.document_name) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_code = "PPT" 
 SELECT count(DISTINCT documents.document_name) FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE Ref_template_types.template_type_description = "PPT" 
 SELECT Templates.Template_ID,        count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID 
 SELECT Templates.template_id,        count(*) FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Templates.template_id 
 SELECT templates.template_id,        templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT templates.template_id,        templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id GROUP BY Templates.template_id HAVING count(*) > 1 
 SELECT Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id GROUP BY Templates.template_id HAVING count(*) > 1 
 SELECT template_id FROM templates WHERE template_id NOT IN     (SELECT template_id      FROM documents) 
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id 
 SELECT count(*) FROM Ref_template_types 
 SELECT count(*) FROM templates 
 SELECT Templates.template_id,        Templates.version_number,        Templates.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code 
 SELECT Templates.template_id,        Templates.version_number,        Templates.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = "PP"   OR Ref_Template_Types.Template_Type_Code = "PPT" 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = "PP"   OR Ref_Template_Types.Template_Type_Code = "PPT" 
 SELECT count(*) FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code WHERE Ref_template_types.template_type_description = "CV" 
 SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Ref_template_types.template_type_description = "CV" 
 SELECT Templates.version_number,        Templates.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Templates.version_number > 5 
 SELECT Templates.Version_Number,        Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Version_Number > 5 
 SELECT Ref_Template_Types.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code GROUP BY templates.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Ref_template_types GROUP BY template_type_code HAVING count(*) < 3 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING count(*) < 3 
 SELECT min(Templates.Version_Number),        Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code 
 SELECT min(Templates.Version_Number),        Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code 
 SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN Documents ON Documents.template_id = templates.template_id WHERE Documents.document_name = "Data base" 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Data base" 
 SELECT Documents.Document_Name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Ref_Template_Types.Template_Type_Code = "BK" 
 SELECT Documents.Document_Name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Ref_Template_Types.Template_Type_Code = "BK" 
 SELECT Ref_Template_Types.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id 
 SELECT template_type_code FROM Ref_template_types EXCEPT SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id 
 SELECT Ref_Template_Types.Template_Type_Code,        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Ref_Template_Types.Template_Type_Code,        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Date_Effective_From >= '2000-01-01'   AND Templates.Date_Effective_To <= '2021-12-31' 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code = "AD" 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code = "AD" 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Book" 
 SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Ref_template_types.template_type_description = "Book" 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Ref_template_types.template_type_description = "Presentation" 
 SELECT Templates.template_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Ref_template_types.template_type_description = 'Presentation' 
 SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE templates.template_type_code = "CV"   AND templates.version_number =     (SELECT max(version_number)      FROM templates      WHERE template_type_code = "CV") 
 SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE templates.template_type_code = "CV"   AND templates.version_number = 1   AND documents.document_description = "CV" 
 SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show' 
 SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show' 
 SELECT Paragraphs.other_details FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = "Korea " 
 SELECT Templates.Template_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea%' 
 SELECT Paragraphs.paragraph_id,        Paragraphs.paragraph_text FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = 'Welcome to NY' 
 SELECT Paragraphs.paragraph_text FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = 'Welcome to NY' 
 SELECT Paragraphs.paragraph_text FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Customer reviews" 
 SELECT Paragraphs.paragraph_text FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = 'Customer reviews' 
 SELECT Documents.document_id,        count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Templates.date_effective_from >= '2000-01-01'   AND Templates.date_effective_to <= '2021-12-31' GROUP BY Documents.document_id ORDER BY Documents.document_id 
 SELECT Documents.document_id,        count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY Documents.document_id 
 SELECT Documents.document_id,        Documents.document_name,        count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Templates.date_effective_from >= '2000-01-01'   AND Templates.date_effective_to <= '2021-12-31' GROUP BY Documents.document_id 
 SELECT Documents.document_id,        Documents.document_name,        count(*) FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN paragraphs ON Documents.document_id = paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) >= 2 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN paragraphs ON Documents.document_id = paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) >= 2 
 SELECT documents.document_id,        documents.document_name FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT documents.document_id,        documents.document_name FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT documents.document_id FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) LIMIT 1 
 SELECT documents.document_id FROM Ref_template_types JOIN templates ON Ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) LIMIT 1 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN paragraphs ON Documents.document_id = paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) >= 1 AND count(*) <= 2 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN paragraphs ON Documents.document_id = paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Brazil' INTERSECT   SELECT Documents.document_id   FROM Ref_template_types   JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code   JOIN Documents ON Documents.template_id = Templates.template_id   JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Ireland' 
 SELECT Documents.document_id FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Brazil' INTERSECT   SELECT Documents.document_id   FROM Ref_template_types   JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code   JOIN Documents ON Documents.template_id = Templates.template_id   JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = 'Ireland' 
 SELECT count(DISTINCT teacher.name) FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = 'Calculus'   AND teacher.age > 40   AND teacher.hometown = 'Los Angeles'   AND course_arrange.grade = 'A' 
 SELECT count(*) FROM teacher 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade = "A" ORDER BY teacher.Age ASC 
 SELECT teacher.name FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = "Introduction to Art" ORDER BY teacher.age 
 SELECT teacher.age,        teacher.hometown FROM course JOIN teacher ON course.course_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id WHERE course_arrange.grade = 'A' 
 SELECT teacher.age,        teacher.hometown FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id 
 SELECT teacher.name FROM course JOIN teacher ON course.course_id = teacher.teacher_id WHERE course.staring_date = "Spring"   AND teacher.hometown!= "Little Lever Urban District" 
 SELECT teacher.name FROM course JOIN teacher ON course.course_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id WHERE teacher.hometown!= 'Little Lever Urban District' 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID WHERE teacher.age = 32   OR teacher.age = 33 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE teacher.age = 32   OR teacher.age = 33 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade = "A" ORDER BY teacher.Age LIMIT 1 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade =     (SELECT min(grade)      FROM course_arrange) 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,        count(*) FROM teacher GROUP BY Hometown 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE teacher.Age > 40 
 SELECT teacher.name,        course.course FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN course_arrange ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE teacher.age >= 40 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID WHERE course_arrange.Grade = 'A' ORDER BY teacher.Name ASC 
 SELECT teacher.name,        course.course FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
 SELECT teacher.name,        count(*) FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course_arrange.grade >= 50 GROUP BY teacher.name 
 SELECT teacher.name,        count(*) FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course_arrange.grade = 'A' GROUP BY teacher.name 
 SELECT teacher.Name FROM course JOIN teacher ON course.Course_ID = course_arrange.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade >= 50 GROUP BY teacher.Name HAVING COUNT(*) >= 2 
 SELECT teacher.name FROM course JOIN teacher ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course_arrange.grade >= 50 GROUP BY teacher.name HAVING count(*) >= 2 
 SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange) 
 SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange) 
 SELECT count(*) FROM museum JOIN VISITOR JOIN VISIT ON museum.Museum_ID = VISIT.Museum_ID AND VISITOR.ID = VISIT.visitor_ID WHERE museum.Num_of_Staff > 100   AND VISITOR.Level_of_membership = 1   AND VISIT.Total_spent > VISIT.Num_of_Ticket   AND VISITOR.age < 30 
 SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC 
 SELECT avg(visitor.age) FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.num_of_staff > 100   AND visit.num_of_ticket > 1   AND visitor.level_of_membership > 4 
 SELECT visitor.name,        visitor.level_of_membership FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership > 4 ORDER BY visitor.age 
 SELECT museum.name,        museum.museum_id FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009 
 SELECT museum.open_year,        museum.num_of_staff FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.name = "Plaza Museum" 
 SELECT museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id WHERE museum.num_of_staff >     (SELECT min(num_of_staff)      FROM museum      WHERE open_year > 2010) 
 SELECT visitor.id,        visitor.name,        visitor.age FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id GROUP BY visitor.id HAVING count(*) > 1 
 SELECT visitor.id,        visitor.name,        visitor.level_of_membership FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visit.total_spent =     (SELECT max(total_spent)      FROM visit) 
 SELECT museum.name,        museum.museum_id FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN VISITOR ON visit.visitor_id = VISITOR.id WHERE VISITOR.level_of_membership = 1 GROUP BY museum.museum_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM visit) 
 SELECT visitor.name,        visitor.age FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visit.num_of_ticket =     (SELECT max(num_of_ticket)      FROM visit) 
 SELECT avg(visit.Num_of_Ticket),        max(visit.Num_of_Ticket) FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN VISITOR ON VISITOR.ID = visit.VISITOR_ID WHERE museum.Num_of_Staff > 100   AND VISITOR.Level_of_membership = 1   AND VISITOR.Age > 60   AND museum.Open_Year > 2010 
 SELECT sum(visit.Num_of_Ticket) FROM museum JOIN VISITOR JOIN visit ON museum.Museum_ID = visit.Museum_ID AND VISITOR.ID = visit.visitor_ID WHERE museum.Name = "Museum of Art"   AND VISITOR.Level_of_membership = 1   AND VISITOR.Age > 60 
 SELECT visitor.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year < 2009 INTERSECT   SELECT visitor.name   FROM museum   JOIN visit ON museum.museum_id = visit.museum_id   JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year > 2011 
 SELECT count(*) FROM VISITOR WHERE id NOT IN     (SELECT visitor_id      FROM visit      JOIN museum ON visit.museum_id = museum.museum_id      WHERE museum.open_year > 2010) 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches WHERE winner_id IN     (SELECT player_id      FROM players      WHERE hand = "right")   AND loser_id IN     (SELECT player_id      FROM players      WHERE hand = "right") 
 SELECT count(*) FROM matches WHERE loser_age > 40   AND winner_age < 30   AND loser_hand = "left"   AND winner_hand = "right"   AND loser_seed > 5   AND winner_seed < 3   AND loser_ioc = "TUR"   AND winner_ioc = "TUR"   AND loser_rank > 5   AND winner_rank < 3   AND loser_rank_points > 10   AND winner_rank_points < 8   AND loser_name = "Dominique Bileschi"   AND winner_name = "Alex De La Cruz"   AND surface = "Clay"   AND tourney_level = "Final"   AND tourney_date > "2012-07-11"   AND year < 2013   AND best_of = 1   AND draw_size = 7   AND minutes > 1500; 
 SELECT players.first_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.country_code = "USA" 
 SELECT players.first_name,        players.birth_date FROM players WHERE players.country_code = "USA" 
 SELECT avg(matches.loser_age) FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "Loser"   AND matches.year = 2011   AND matches.tourney_level = "Final"   AND matches.draw_size = 1   AND matches.best_of = 1   AND matches.minutes < 600   AND players.hand = "Right"   AND players.birth_date > "1989-01-01"   AND players.country_code = "TUR"   AND rankings.ranking_points > 0   AND rankings.tours > 10 
 SELECT avg(matches.loser_age),        avg(matches.winner_age) FROM matches JOIN players ON matches.loser_id = players.player_id JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2011   AND matches.surface = "Clay"   AND matches.best_of = 1   AND matches.draw_size = 1   AND players.hand = "Right"   AND rankings.ranking_points > 0   AND rankings.tours > 0; 
 SELECT avg(matches.winner_rank) FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016   AND matches.score = "Win"   AND matches.best_of = 5   AND matches.draw_size = 5   AND matches.loser_age > 40   AND players.hand = "Right"   AND players.birth_date > "1989-01-01"   AND rankings.ranking_points > 200   AND rankings.tours > 100 
 SELECT avg(winner_rank) FROM matches WHERE winner_id IN     (SELECT player_id      FROM players      WHERE hand = "right") 
 SELECT max(matches.loser_rank) FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016   AND matches.loser_hand = "left"   AND matches.loser_seed = 1   AND players.hand = "right"   AND rankings.ranking_points > 0   AND rankings.tours > 1 
 SELECT max(rankings.ranking) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.year = 2016   AND matches.loser_hand = "left"   AND matches.loser_seed = 0   AND matches.score = "0-0"   AND matches.surface = "hard"   AND matches.tourney_level = "Final"   AND matches.winner_hand = "right"   AND matches.winner_seed = 0; 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT matches.loser_name) FROM matches JOIN players ON matches.loser_id = players.player_id WHERE matches.year = 2016   AND players.hand = "right"   AND players.country_code = "TUR"   AND matches.loser_age > 30   AND matches.loser_rank > 1000   AND matches.loser_rank_points > 100   AND matches.minutes > 1500   AND matches.score = "15-15"   AND matches.surface = "hard"; 
 SELECT count(DISTINCT matches.loser_name) FROM matches JOIN players ON matches.loser_id = players.player_id WHERE players.hand = "right"   AND matches.year = 2016   AND matches.score = "6-4"   AND matches.surface = "hard"; 
 SELECT matches.tourney_name FROM matches JOIN players ON matches.loser_id = players.player_id GROUP BY matches.tourney_name HAVING count(*) > 10 
 SELECT matches.tourney_name FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.tourney_name HAVING count(*) > 10 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT   SELECT players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016 
 SELECT count(*) FROM matches WHERE matches.year = 2013   OR matches.year = 2016 
 SELECT count(*) FROM matches WHERE matches.year = 2013   OR matches.year = 2016 
 SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "WTA Championships" INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "WTA Championships" INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.birth_date =     (SELECT min(birth_date)      FROM players) 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.hand = "R"   AND matches.minutes = 1 ORDER BY players.birth_date LIMIT 1 
 SELECT players.first_name,        players.last_name FROM players ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE players.hand = "left"   AND players.hand = "L" ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.round = "Final" GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2011 GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT matches.year FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY matches.year ORDER BY count(*) DESC LIMIT 1 
 SELECT matches.year FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY matches.year ORDER BY count(*) DESC LIMIT 1 
 SELECT players.winner_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2011 GROUP BY players.winner_name ORDER BY count(*) DESC LIMIT 1 
 SELECT players.first_name,        players.last_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" ORDER BY matches.winner_rank_points DESC LIMIT 1 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" GROUP BY players.player_id ORDER BY sum(rankings.ranking_points) DESC LIMIT 1 
 SELECT matches.loser_name,        matches.winner_name FROM matches JOIN players ON matches.loser_id = players.player_id JOIN players ON matches.winner_id = players.player_id WHERE matches.minutes =     (SELECT max(matches.minutes)      FROM matches) 
 SELECT matches.winner_name,        matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.minutes =     (SELECT max(minutes)      FROM matches) 
 SELECT avg(rankings.ranking),        players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name 
 SELECT players.first_name,        avg(rankings.ranking) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id 
 SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id 
 SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id 
 SELECT count(*),        country_code FROM players GROUP BY country_code 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT count(*) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.loser_hand = "left"   AND matches.winner_hand = "right"   AND matches.score = "6-4"   AND matches.minutes < 300   AND matches.year = 2016 GROUP BY rankings.ranking_date 
 SELECT count(*) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.year = 2011   AND matches.score = "6-4"   AND matches.surface = "Cloth"   AND matches.best_of = "5"   AND matches.draw_size = "7"   AND matches.loser_hand = "left"   AND matches.loser_age > 40   AND matches.winner_hand = "right"   AND matches.winner_age < 30   AND rankings.ranking_points > 100   AND rankings.tours > 1000 GROUP BY rankings.ranking_date 
 SELECT count(*),        matches.year FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.birth_date > "1981-08-25"   AND players.country_code = "TUR"   AND matches.surface = "hard"   AND matches.loser_hand = "right"   AND rankings.ranking_points > 8000 GROUP BY matches.year 
 SELECT count(*),        matches.year FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = "right"   AND players.birth_date > "1981-08-14" GROUP BY matches.year ORDER BY matches.year 
 SELECT players.first_name,        players.last_name,        rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016   AND matches.score = "Win" ORDER BY players.birth_date DESC LIMIT 3 
 SELECT players.first_name,        players.last_name,        matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016   AND matches.score = "Win" ORDER BY matches.winner_rank ASC LIMIT 3 
 SELECT count(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = "left"   AND matches.tourney_name = "WTA Championships" 
 SELECT count(*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = "left"   AND matches.tourney_name = "WTA Championships" 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.year = 2016 GROUP BY players.player_id ORDER BY sum(rankings.ranking_points) DESC LIMIT 1 
 SELECT count(*),        hand FROM players GROUP BY hand 
 SELECT count(*),        hand FROM players GROUP BY hand 
 SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured' 
 SELECT ship.name,        ship.tonnage FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'fleet'   AND ship.disposition_of_ship = 'destroyed'   AND battle.result = 'victory' ORDER BY ship.name DESC 
 SELECT battle.name,        battle.date,        battle.result FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id 
 SELECT max(death.killed),        min(death.killed) FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.ship_type = 'Destroyer'   AND ship.location = 'Bulgaria'   AND battle.result = 'Loss'   AND battle.latin_commander = 'Vincent van den Eyn'   AND battle.bulgarian_commander = 'Valerii Miroshnichenko' 
 SELECT avg(death.injured) FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.ship_type = 'Destroyer'   AND ship.location = 'Bulgaria'   AND battle.result = 'Loss'   AND battle.latin_commander = 'Vincent van Severen'   AND battle.bulgarian_commander = 'Valerii Miroshnichenko' 
 SELECT death.note,        death.killed,        death.injured FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' 
 SELECT name,        result FROM battle WHERE bulgarian_commander!= "Boril" 
 SELECT DISTINCT battle.id,                 battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' 
 SELECT id,        name FROM battle WHERE id IN     (SELECT caused_by_ship_id      FROM death      GROUP BY caused_by_ship_id      HAVING sum(killed) > 10) 
 SELECT ship.id,        ship.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id ORDER BY sum(death.injured) DESC LIMIT 1 
 SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE battle.bulgarian_commander = "Kaloyan"   AND battle.latin_commander = "Baldwin I" 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE tonnage = 225) 
 SELECT battle.date,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'HMS Atalanta'   AND ship.ship_type = 'frigate'   AND ship.disposition_of_ship = 'lost'   AND ship.tonnage > 4000 UNION SELECT battle.date,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice'   AND ship.ship_type = 'frigate'   AND ship.disposition_of_ship = 'lost'   AND ship.tonnage > 4000 
 SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location!= 'English Channel' 
 SELECT death.note FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.name LIKE '%East%' 
 SELECT line_1,        line_2 FROM addresses WHERE line_3!= "" 
 SELECT line_1,        line_2 FROM addresses 
 SELECT count(*) FROM courses 
 SELECT count(*) FROM courses 
 SELECT Courses.course_description FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id WHERE Courses.course_name = "Math" 
 SELECT Courses.course_description FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id WHERE Courses.course_name = "Math" 
 SELECT Addresses.zip_postcode FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Students.current_address_id = Addresses.address_id   AND Addresses.city = "Port Chelsea" 
 SELECT addresses.zip_postcode FROM addresses JOIN courses ON addresses.address_id = courses.other_details WHERE courses.course_name = "Port Chelsea" 
 SELECT Departments.department_name,        Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Departments.department_name,        Degree_Programs.degree_program_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT department_name) FROM departments WHERE department_description!= "Other"   AND other_details!= "Other" 
 SELECT count(DISTINCT department_name) FROM departments 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(DISTINCT degree_programs.degree_summary_name) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'Engineering' 
 SELECT count(DISTINCT degree_programs.degree_summary_name) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'Engineering' 
 SELECT Sections.section_name,        Sections.section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id 
 SELECT Sections.section_name,        Sections.section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) <= 2 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) < 2 
 SELECT SECTIONS.section_name FROM SECTIONS JOIN Courses ON SECTIONS.course_id = Courses.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.course_id JOIN Student_Enrolment ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment.transcript_id JOIN Transcript_Contents ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id WHERE Student_Enrolment.student_id = 1 ORDER BY Courses.course_name DESC 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT Semesters.semester_name,        Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Semesters.semester_name,        Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT department_description FROM departments WHERE department_name LIKE '%computer%' 
;
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Student_Enrolment.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Semesters.semester_id HAVING count(*) = 2 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Students.student_id HAVING count(*) = 2 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelor" 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelors" 
;
;
 SELECT Degree_Programs.degree_program_id,        Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1 
;
 SELECT Student_Enrolment.student_id,        Students.first_name,        Students.middle_name,        Students.last_name,        count(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Student_Enrolment.student_id,        count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT semester_name FROM semesters WHERE semester_id NOT IN     (SELECT semester_id      FROM student_enrolment) 
 SELECT semester_name FROM semesters WHERE semester_id NOT IN     (SELECT semester_id      FROM student_enrolment) 
;
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id 
 SELECT Courses.course_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.address_id JOIN Student_Enrolment ON Student_Enrolment.course_id = Courses.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Courses.course_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.address_id JOIN Student_Enrolment ON Student_Enrolment.course_id = Courses.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = "North Carolina" EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id 
 SELECT Students.last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.state_province_county = "North Carolina" EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id 
 SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING count(*) >= 2 
 SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Addresses JOIN Courses ON Addresses.address_id = Courses.other_details JOIN Student_Enrolment ON Student_Enrolment.course_id = Courses.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id GROUP BY Transcripts.transcript_id HAVING count(*) >= 2 
 SELECT Students.cell_mobile_number FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Students.first_name = "Timmothy"   AND Students.last_name = "Ward" 
 SELECT Students.cell_mobile_number FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Courses ON Student_Enrolment.course_id = Courses.course_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Students.first_name = "Timothy"   AND Students.last_name = "Ward"   AND Semesters.semester_name = "WN"   AND Semesters.semester_description = "WN" 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.date_first_registered =     (SELECT date_first_registered      FROM Student_Enrolment      ORDER BY date_first_registered      LIMIT 1) 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id ORDER BY Student_Enrolment.date_first_registered LIMIT 1 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.semester_id =     (SELECT semester_id      FROM Semesters      WHERE semester_name = "Graduation") ORDER BY Student_Enrolment.date_left LIMIT 1 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment.transcript_id JOIN Transcript_Contents ON Transcript_Contents.student_course_id = Student_Enrolment.student_course_id JOIN Courses ON Courses.course_id = Transcript_Contents.course_id WHERE Courses.course_name = "Early Childhood Education" ORDER BY Transcripts.transcript_date LIMIT 1 
 SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.line_1!= Addresses.line_1   OR Addresses.line_2!= Addresses.line_2   OR Addresses.line_3!= Addresses.line_3 
 SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.line_1!= Addresses.line_1   OR Addresses.line_2!= Addresses.line_2   OR Addresses.line_3!= Addresses.line_3 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2,        Addresses.line_3,        Addresses.city,        Addresses.zip_postcode,        Addresses.state_province_county,        Addresses.country FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcripts.transcript_date) FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN courses ON courses.course_id = student_enrolment_courses.course_id JOIN departments ON courses.department_id = departments.department_id WHERE departments.department_name = "Computer Science" GROUP BY courses.course_name 
 SELECT avg(transcripts.transcript_date) FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN courses ON courses.course_id = student_enrolment_courses.course_id JOIN departments ON courses.department_id = departments.department_id WHERE departments.department_name = "Computer Science" 
 SELECT Transcripts.transcript_date,        Transcripts.other_details FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id WHERE Courses.course_name = "Database Systems" ORDER BY Transcripts.transcript_date LIMIT 1 
;
 SELECT count(*) FROM transcripts WHERE other_details = 'Released' 
 SELECT count(*) FROM transcripts 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT Student_Enrolment_Courses.student_course_id,        count(*) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcript_Contents ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id JOIN Transcripts ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY count(*) DESC LIMIT 1; 
 SELECT max(count(*)),        Courses.course_id,        Student_Enrolment.student_enrolment_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment ON Student_Enrolment.course_id = Sections.course_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment.transcript_id JOIN Transcript_Contents ON Transcript_Contents.student_course_id = Student_Enrolment.student_course_id GROUP BY Courses.course_id,          Student_Enrolment.student_enrolment_id 
 SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1 
;
;
 SELECT count(DISTINCT current_address_id) FROM Students WHERE current_address_id!= 0 
 SELECT DISTINCT Addresses.line_1,                 Addresses.line_2,                 Addresses.line_3,                 Addresses.city,                 Addresses.zip_postcode,                 Addresses.state_province_county,                 Addresses.country,                 Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.cell_mobile_number,                 Students.email_address,                 Students.ssn FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id 
 SELECT other_student_details FROM Students ORDER BY other_student_details DESC 
;
 SELECT SECTIONS.section_name,        SECTIONS.section_description,        COURSES.course_name,        COURSES.course_description FROM SECTIONS JOIN COURSES ON SECTIONS.course_id = COURSES.course_id WHERE COURSES.course_name = "h" 
 SELECT SECTIONS.section_description FROM SECTIONS JOIN Courses ON SECTIONS.course_id = Courses.course_id WHERE Courses.course_name = "h" 
 SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = "Haiti"   OR Students.cell_mobile_number = "0 9700166582" 
 SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.permanent_address_id = Students.permanent_address_id WHERE Addresses.country = "Haiti" UNION SELECT Students.first_name FROM Students WHERE Students.cell_mobile_number = "0 9700166582" 
 SELECT cartoon.Title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.Channel WHERE LANGUAGE = "English"   AND Country = "United States"   AND Hight_definition_TV = "Yes"   AND Pixel_aspect_ratio_PAR = "16:9"   AND Pay_per_view_PPV = "No"   AND TV_series.18_49_Rating_Share > 0.5   AND TV_series.Share > 0.5   AND TV_series.Weekly_Rank > 1 ORDER BY cartoon.Title 
 SELECT cartoon.Title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.Channel WHERE tv_channel.series_name = "The Simpsons"   AND tv_channel.Country = "United States"   AND tv_channel.Language = "English"   AND tv_channel.Content = "Animation"   AND tv_channel.Pixel_aspect_ratio_PAR = "16:9"   AND tv_channel.Hight_definition_TV = "Yes"   AND tv_channel.Pay_per_view_PPV = "No"   AND tv_channel.Package_Option = "No" ORDER BY cartoon.Title 
 SELECT Cartoon.Title FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE TV_series.Directed_by = "Ben Jones" 
 SELECT Cartoon.Title FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE Directed_by = "Ben Jones" 
 SELECT COUNT (DISTINCT Cartoon.Title) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Joseph Kuhr" 
 SELECT COUNT (DISTINCT Cartoon.Title) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Joseph Kuhr" 
 SELECT Cartoon.Title,        Cartoon.Directed_by FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE TV_series.Air_Date = "1970-01-01" ORDER BY TV_series.Air_Date 
 SELECT Cartoon.Title,        Cartoon.Directed_by FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE TV_series.Air_Date = "1970-01-01" ORDER BY TV_series.Air_Date 
 SELECT Cartoon.Title FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE TV_series.Directed_by = "Ben Jones"   OR TV_series.Directed_by = "Brandon Vietti" 
 SELECT cartoon.Title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.Channel WHERE tv_channel.Directed_by = "Ben Jones"   OR tv_channel.Written_by = "Brandon Vietti" 
 SELECT country,        count(*) FROM TV_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1; 
 SELECT country,        count(*) FROM TV_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1; 
 SELECT series_name,        content,        count(*) FROM TV_channel GROUP BY series_name,          content 
 SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_channel 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT TV_channel.Content FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_series.series_name = "Sky Radio"; 
 SELECT TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_series.series_name = "Sky Radio" 
 SELECT COUNT (DISTINCT TV_channel.id) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_channel.id = Cartoon.channel WHERE TV_channel.language = "English" 
 SELECT COUNT(*) FROM TV_channel WHERE LANGUAGE = "English" 
 SELECT LANGUAGE,        COUNT(*) FROM TV_channel GROUP BY LANGUAGE ORDER BY COUNT(*) ASC LIMIT 1; 
 SELECT LANGUAGE,        count(*) FROM TV_channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1; 
 SELECT LANGUAGE,        COUNT(*) FROM TV_channel GROUP BY LANGUAGE 
 SELECT LANGUAGE,        COUNT(*) FROM TV_channel WHERE CONTENT = "TV" GROUP BY LANGUAGE 
 SELECT TV_channel.series_name FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.title = "The Rise of the Blue Beetle!" 
 SELECT TV_channel.series_name FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.title = "The Rise of the Blue Beetle" 
 SELECT Cartoon.Title FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT cartoon.title FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE tv_channel.series_name = "Sky Radio" 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Country = "United States"   AND TV_channel.Language = "English"   AND TV_channel.Content = "TV"   AND TV_channel.Pixel_aspect_ratio_PAR = "16:9"   AND TV_channel.Hight_definition_TV = "Yes"   AND TV_channel.Pay_per_view_PPV = "No"   AND TV_channel.Package_Option = "No" ORDER BY TV_series.Rating 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Country = "United States"   AND TV_channel.Language = "English"   AND TV_channel.Content = "Cartoon"   AND TV_series.Rating > 0 ORDER BY TV_series.Rating 
 SELECT TV_series.Episode,        TV_series.Rating FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Country = "United States"   AND TV_channel.Language = "English"   AND TV_channel.Content = "TV"   AND TV_channel.Hight_definition_TV = "Yes"   AND TV_channel.Pay_per_view_PPV = "No"   AND TV_channel.Package_Option = "No" ORDER BY TV_series.Rating DESC LIMIT 3; 
 SELECT TV_series.Episode,        TV_series.Rating FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Country = "United States"   AND TV_channel.Language = "English"   AND TV_channel.Content = "Cartoon" GROUP BY TV_series.Episode ORDER BY SUM (TV_series.18_49_Rating_Share) DESC LIMIT 3; 
 SELECT min(18_49_rating_share),        max(18_49_rating_share) FROM TV_series WHERE share > 0   AND weekly_rank > 0   AND channel IN     (SELECT id      FROM TV_channel      WHERE country = "United States"        AND language = "English"        AND content = "Cartoon"        AND pixel_aspect_ratio_par = "16:9"        AND hight_definition_tv = "Yes"        AND pay_per_view_ppv > 0        AND package_option = "TV") 
 SELECT max(18_49_rating_share),        min(18_49_rating_share) FROM TV_series WHERE share > 0 
 SELECT TV_series.Air_Date FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "A Love of a Lifetime" 
 SELECT TV_series.Air_Date FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_series.Title = "A Love of a Lifetime"   AND TV_channel.Country = "United States"   AND TV_channel.Language = "English"   AND TV_channel.Content = "Cartoon"   AND TV_channel.Pixel_aspect_ratio_PAR = "16:9"   AND TV_channel.Hight_definition_TV = "Yes"   AND TV_channel.Pay_per_view_PPV = "No"   AND TV_channel.Package_Option = "No"; 
 SELECT TV_series.Weekly_Rank FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "A Love of a Lifetime" 
 SELECT TV_series.Weekly_Rank FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel JOIN Cartoon ON TV_channel.id = Cartoon.Channel WHERE Cartoon.Title = "A Love of a Lifetime" 
 SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_series.Episode = "A Love of a Lifetime" 
 SELECT TV_series.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_series.Episode = "A Love of a Lifetime" 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT Directed_by,        COUNT(*) FROM Cartoon WHERE Written_by = "David Letterman"   AND Original_air_date < "1989-01-01" GROUP BY Directed_by 
 SELECT Directed_by,        COUNT(*) FROM Cartoon WHERE Written_by = "Dan Harmon" GROUP BY Directed_by; 
 SELECT Cartoon.Production_code,        TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_series.Air_Date =     (SELECT Air_Date      FROM TV_series      WHERE Share =          (SELECT MAX(Share)           FROM TV_series)) 
 SELECT Cartoon.Production_code,        TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Country = "United States"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Cartoon" ORDER BY Cartoon.Original_air_date DESC LIMIT 1 
 SELECT TV_channel.Package_Option,        TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Hight_definition_TV = 'Yes' 
 SELECT TV_channel.Package_Option,        TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.Hight_definition_TV = 'Yes' 
 SELECT TV_channel.country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.written_by = "Todd Casey" 
 SELECT TV_channel.country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.Written_by = "Todd Casey" 
 SELECT country FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      JOIN TV_channel ON cartoon.channel = TV_channel.id      WHERE written_by = "Todd Casey") 
 SELECT country FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      JOIN TV_channel ON cartoon.channel = TV_channel.id      WHERE written_by = "Todd Casey") 
 SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.Directed_by = "Ben Jones"   AND cartoon.Written_by = "Michael Chang" 
 SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.Directed_by = "Ben Jones" UNION SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.Written_by = "Michael Chang" 
 SELECT TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Country FROM TV_channel WHERE TV_channel.Language!= "English" 
 SELECT pixel_aspect_ratio_par,        country FROM TV_channel WHERE LANGUAGE!= "English" 
 SELECT id FROM TV_channel GROUP BY Country HAVING count(*) > 2 
 SELECT id FROM TV_channel GROUP BY id HAVING count(*) > 2 
 SELECT id FROM TV_channel EXCEPT SELECT TV_channel.id FROM TV_channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE Directed_by = "Ben Jones" 
 SELECT id FROM TV_channel EXCEPT SELECT Channel FROM cartoon WHERE Directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE directed_by = "Ben Jones") 
 SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE directed_by = "Ben Jones") 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT poker_player.Final_Table_Made,        poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 ORDER BY Earnings DESC 
 SELECT poker_player.Final_Table_Made,        poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 180 ORDER BY people.Nationality,          people.Name 
 SELECT avg(earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC LIMIT 1 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC LIMIT 1 
 SELECT max(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200   AND Earnings < 200000 
 SELECT max(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200   AND Earnings < 200000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings > 300000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings > 300000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made 
 SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings LIMIT 1 
 SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings LIMIT 1 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC 
 SELECT people.Nationality,        COUNT(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality 
 SELECT people.Nationality,        COUNT(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY people.Nationality 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING COUNT(*) >= 2 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING COUNT(*) >= 2 
 SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings =     (SELECT MAX(Earnings)      FROM poker_player) ORDER BY people.Name ASC 
 SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Name 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= "Russia" 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= "Russia" 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Best_Finish < 3   AND poker_player.Money_Rank > 3   AND people.Height > 200 
 SELECT Name FROM people WHERE Height > 100   AND Birth_Date!= "1973-11-29"   AND Nationality!= "United States" 
 SELECT count(DISTINCT people.Nationality) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT count(DISTINCT people.Nationality) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
 SELECT count(DISTINCT AREA_CODE_STATE.state) FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.area_code JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number WHERE AREA_CODE_STATE.state = "AL" GROUP BY CONTESTANTS.contestant_number ORDER BY CONTESTANTS.contestant_name DESC 
 SELECT VOTES.vote_id,        VOTES.phone_number,        VOTES.state FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.state = CONTESTANTS.state JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE AREA_CODE_STATE.area_code = 12345 
 SELECT max(area_code),        min(area_code) FROM area_code_state 
 SELECT VOTES.created FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number WHERE AREA_CODE_STATE.state = "CA" ORDER BY VOTES.created DESC LIMIT 1 
 SELECT contestants.contestant_name FROM area_code_state JOIN contestants ON area_code_state.area_code = VOTES.phone_number JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE area_code_state.state = "TX"   AND contestants.contestant_name!= "Jessie Alloway" 
 SELECT DISTINCT AREA_CODE_STATE.state,                 VOTES.created FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE AREA_CODE_STATE.state = "AL" GROUP BY CONTESTANTS.contestant_number HAVING COUNT(*) >= 2 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE VOTES.created =     (SELECT MIN(VOTES.created)      FROM VOTES) 
 SELECT count(*) FROM area_code_state JOIN contestants ON area_code_state.area_code = VOTES.phone_number JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE area_code_state.state = "NY"   OR area_code_state.state = "CA" 
 SELECT count(*) FROM contestants WHERE contestant_number NOT IN     (SELECT contestant_number      FROM votes) 
 SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT VOTES.created,        AREA_CODE_STATE.state,        VOTES.phone_number FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.area_code JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = "Tabatha Gehling" 
 SELECT area_code FROM area_code_state WHERE state =     (SELECT area_code_state.state      FROM area_code_state      JOIN votes ON area_code_state.area_code = votes.phone_number      JOIN contestants ON contestants.contestant_number = votes.contestant_number      WHERE contestants.contestant_name = 'Tabatha Gehling') INTERSECT   SELECT area_code   FROM area_code_state WHERE state =     (SELECT area_code_state.state      FROM area_code_state      JOIN votes ON area_code_state.area_code = votes.phone_number      JOIN contestants ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name = 'Kelly Clauss') 
 SELECT CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = VOTES.phone_number WHERE AREA_CODE_STATE.state = "AL"   AND CONTESTANTS.contestant_name LIKE "%Al%"   AND VOTES.created >= "2018-01-01 00:00:00" 
 SELECT name FROM city WHERE countrycode IN     (SELECT code      FROM country      WHERE indepyear > 1950) 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.indepyear > 1950 
 SELECT count(*) FROM country WHERE governmentform = 'Republic' 
 SELECT count(*) FROM country WHERE governmentform = 'Republic' 
 SELECT sum(country.SurfaceArea) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Caribbean" 
 SELECT SUM (country.SurfaceArea) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Caribbean"; 
 SELECT country.Continent FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE city.name = "Anguilla"; 
 SELECT country.continent FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE city.name = "Anguilla"; 
 SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = "Kabul"; 
 SELECT country.Region FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE city.name = "Kabul"; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Aruba" ORDER BY countrylanguage.percentage DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Aruba"   AND sqlite_sequence.seq = country.indepyear   AND country.continent = "North America"   AND country.region = "Central America and Caribbean"   AND country.surfacearea > 8220   AND country.population > 12600 GROUP BY countrylanguage.language ORDER BY countrylanguage.percentage DESC LIMIT 1; 
 SELECT country.population,        country.lifeexpectancy FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.name = "Brazil"; 
 SELECT country.population,        country.LifeExpectancy FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.name = "Brazil"; 
 SELECT country.region,        country.population FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.name = "Angola"; 
 SELECT country.region,        country.population FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.name = "Angola"; 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Central Africa" 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE city.District = "Central Africa" 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia'   AND countrylanguage.isofficial = 'T'   AND country.lifeexpectancy =     (SELECT MIN(lifeexpectancy)      FROM country      WHERE continent = 'Asia') 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy LIMIT 1 
 SELECT sum(country.population),        max(country.gnp) FROM city JOIN country ON city.id = country.capital WHERE country.continent = "Asia" 
 SELECT max(country.population),        country.continent FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = 'Asia' GROUP BY country.continent; 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Africa"   AND country.GovernmentForm = "Republic" 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.seq JOIN country ON country.Code = city.CountryCode WHERE country.GovernmentForm = "Republic"   AND country.Continent = "Africa" 
 SELECT sum(country.SurfaceArea) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia"   AND country.continent = "Europe" 
 SELECT sum(country.SurfaceArea) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia"   OR country.Continent = "Europe" 
 SELECT population FROM city WHERE district = "Gelderland" 
 SELECT sum(city.population) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq WHERE city.district = "Gelderland"   AND sqlite_sequence.name = "city"; 
 SELECT avg(country.gnp),        sum(country.population) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.governmentform = 'US territory' 
 SELECT avg(country.gnp),        sum(country.population) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE city.district = "us" 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.lifeexpectancy > 70   AND country.gnp > country.gnpoold   AND country.capital = city.id   AND countrylanguage.isofficial = 'T'   AND city.population > 150000; 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.region = "Europe"   AND country.surfacearea > 55000   AND country.population > 2000000   AND country.lifeexpectancy > 70   AND country.gnp > 5000   AND country.gnpold > 5000   AND country.localname!= "Helsinki"   AND country.governmentform!= "Democratic Republic"   AND country.headofstate!= "Emmarentia Palermo"   AND country.capital!= 158; 
 SELECT count(DISTINCT country.GovernmentForm) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = "Africa" 
 SELECT count(DISTINCT country.GovernmentForm) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = "Africa" 
 SELECT sum(countrylanguage.percentage) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Aruba"   AND countrylanguage.isofficial = 'T'; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Aruba" GROUP BY countrylanguage.language HAVING count(*) >= 2; 
 SELECT COUNT(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"; 
 SELECT COUNT(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"; 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY count(*) DESC LIMIT 1 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
 SELECT country.continent FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' GROUP BY country.continent ORDER BY count(DISTINCT countrylanguage.language) DESC LIMIT 1; 
 SELECT country.continent FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' GROUP BY country.continent ORDER BY count(*) DESC LIMIT 1; 
 SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT   SELECT COUNT(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Dutch" 
 SELECT count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT count(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.id = sqlite_sequence.seq   JOIN country ON country.code = city.countrycode   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.id = sqlite_sequence.name   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.id = sqlite_sequence.name   JOIN country ON country.code = city.countrycode   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.id = sqlite_sequence.name   JOIN country ON country.code = city.countrycode   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT COUNT (DISTINCT country.continent) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Chinese"; 
 SELECT count(DISTINCT country.continent) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Chinese"; 
 SELECT country.Region FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.language = "English"   OR countrylanguage.language = "Dutch" GROUP BY country.Region HAVING count(*) >= 2 
 SELECT country.Region FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.language = "Dutch"   OR countrylanguage.language = "English" GROUP BY country.Region HAVING count(*) >= 2 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch'   AND country.continent = 'Europe'   AND country.region = 'Western Europe'   AND country.population > 150000; 
;
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia" GROUP BY countrylanguage.language ORDER BY COUNT (DISTINCT city.name) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia" GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING count(*) = 1 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING count(*) = 1 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1; 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" GROUP BY city.name ORDER BY city.population DESC LIMIT 1; 
 SELECT country.name,        country.population,        country.lifeexpectancy FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "asian"   AND country.surfacearea =     (SELECT MAX (country.surfacearea)      FROM city      JOIN sqlite_sequence ON city.id = sqlite_sequence.seq      JOIN country ON city.countrycode = country.code      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language = "asian") 
 SELECT country.name,        country.population,        country.lifeexpectancy FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia" ORDER BY country.surfacearea DESC LIMIT 1 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.language = "English"   AND country.LifeExpectancy > 50   AND country.IndepYear > 1800   AND country.GNP > 4000   AND country.GNPOld > 2000   AND country.Capital > 150000   AND country.HeadOfState = "MOROITI"   AND country.GovernmentForm = "Republic"   AND country.Population > 150000   AND city.District = "MOROITI"   AND sqlite_sequence.seq > 5000; 
 SELECT avg(country.LifeExpectancy) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.language = "English"   AND country.LifeExpectancy!= "Infinity"   AND country.IndepYear!= 0   AND country.GNP!= 0   AND country.GNPOld!= 0   AND country.Capital!= 0   AND country.HeadOfState!= 0   AND country.GovernmentForm!= "Corrupt Government"   AND country.Code2!= "AI"   AND country.Continent!= "Africa"   AND country.Region!= "Central America and Caribbean"   AND country.Population!= 0   AND sqlite_sequence.seq!= 0 GROUP BY country.Continent HAVING avg(country.LifeExpectancy) > 0 
 SELECT sum(population) FROM city WHERE countrycode IN     (SELECT country.countrycode      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language!= "English") 
 SELECT sum(population) FROM city WHERE countrycode IN     (SELECT country.countrycode      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language!= "English") 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = "Beatrix" 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = "Beatrix" 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = "Africa"   AND country.population <     (SELECT min(population)      FROM country      WHERE continent = "Asia") 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = "Africa"   AND country.population <     (SELECT min(population)      FROM country      WHERE continent = "Asia") 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = 'Asia'   AND country.population >     (SELECT max(population)      FROM country      WHERE continent = 'Africa') 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = 'Asia'   AND country.population >     (SELECT max(population)      FROM country      WHERE continent = 'Africa') 
 SELECT countrycode FROM city WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = "English") 
 SELECT countrycode FROM city WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = "English") 
 SELECT country.code FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language!= "English" GROUP BY country.code HAVING max(countrylanguage.percentage) = 100 
 SELECT country.code FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language!= "English" GROUP BY country.code HAVING count(*) >= 2 
 SELECT country.code FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language!= "English"   AND country.governmentform!= "Republic" 
 SELECT code FROM country WHERE governmentform = "Republic" EXCEPT SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe'   AND NOT EXISTS     (SELECT 1      FROM countrylanguage      WHERE countrylanguage.countrycode = country.code        AND countrylanguage.language = 'English'        AND countrylanguage.isofficial = 'T') 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe'   AND NOT EXISTS     (SELECT 1      FROM countrylanguage      WHERE countrylanguage.countrycode = country.code        AND countrylanguage.language = 'English') 
 SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Chinese"   AND country.continent = "Asia" 
 SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia'   AND countrylanguage.language = 'Chinese'   AND countrylanguage.isofficial = 'T' 
 SELECT country.name,        country.indepyear,        country.surfacearea FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.population =     (SELECT MIN(population)      FROM country) 
 SELECT country.name,        country.indepyear,        country.surfacearea FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.population =     (SELECT MIN(population)      FROM country) 
 SELECT country.population,        country.name,        country.headofstate FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.surfacearea =     (SELECT MAX (surfacearea)      FROM country) 
 SELECT city.name,        country.population,        country.headofstate FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea =     (SELECT MAX (surfacearea)      FROM country) 
 SELECT country.name,        count(*) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' GROUP BY country.name HAVING count(*) >= 3 
 SELECT country.name,        countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) > 2 
 SELECT count(*),        city.district FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq WHERE population >     (SELECT avg(population)      FROM city) GROUP BY city.district 
 SELECT count(*),        city.district FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq WHERE population >     (SELECT avg(population)      FROM city) GROUP BY city.district 
 SELECT country.governmentform,        SUM (country.population) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.lifeexpectancy > 72 GROUP BY country.governmentform 
 SELECT country.GovernmentForm,        SUM (country.Population) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.LifeExpectancy > 72 GROUP BY country.GovernmentForm 
 SELECT avg(country.LifeExpectancy),        sum(country.Population) FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.seq JOIN country ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.language = "Chinese"   AND country.LifeExpectancy < 72 GROUP BY country.continent 
 SELECT country.continent,        SUM (country.population),        avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.lifeexpectancy < 72 GROUP BY country.continent 
 SELECT country.name,        country.area FROM country WHERE country.area IN     (SELECT country.area      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language = "Chinese"      GROUP BY country.area      ORDER BY count(*) DESC      LIMIT 5) 
 SELECT country.name,        country.surfacearea FROM country WHERE country.continent = "Asia" ORDER BY country.surfacearea DESC LIMIT 5 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE population =     (SELECT max(population)      FROM country) GROUP BY country.name ORDER BY count(*) DESC LIMIT 3; 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe" ORDER BY population DESC LIMIT 3; 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.continent = "Europe"   AND country.population <     (SELECT min(population)      FROM country      WHERE continent = "Europe") GROUP BY country.name ORDER BY country.population LIMIT 3; 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE population <     (SELECT min(population)      FROM country) GROUP BY country.name ORDER BY count(*) LIMIT 3; 
 SELECT count(*) FROM country WHERE Continent = "Asia" 
 SELECT count(*) FROM country WHERE Continent = "Asia" 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.continent = 'Europe'   AND city.population = 80000 
 SELECT country.name FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.continent = 'Europe'   AND city.population = 80000 
 SELECT country.population,        country.surfacearea FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.continent = "North America"   AND country.surfacearea > 3000 GROUP BY country.surfacearea 
 SELECT country.name,        country.population,        country.surfacearea FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.seq JOIN country ON country.code = city.countrycode WHERE country.continent = "North America"   AND country.surfacearea > 3000 GROUP BY country.name 
 SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000 
 SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe" GROUP BY countrylanguage.language ORDER BY COUNT (DISTINCT country.name) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe" GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.population > 150000 GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
 SELECT country.code,        countrylanguage.language FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.population > 150000 GROUP BY country.code ORDER BY countrylanguage.percentage DESC LIMIT 10; 
 SELECT count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
 SELECT count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish'   AND country.population > 150000; 
 SELECT country.code FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish" GROUP BY country.code ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
 SELECT country.code FROM city JOIN sqlite_sequence ON city.id = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish" GROUP BY country.code HAVING MAX(countrylanguage.percentage) = 100 
 SELECT count(*) FROM conductor WHERE age > 40   AND nationality = "American"   AND year_of_work > 2010 
 SELECT count(*) FROM conductor WHERE age > 40   AND nationality = "American"   AND year_of_work > 2010 
 SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC 
 SELECT conductor.Name FROM conductor ORDER BY conductor.Age 
 SELECT conductor.Name FROM conductor WHERE conductor.Nationality!= "USA" 
 SELECT name FROM conductor WHERE nationality!= "USA" 
 SELECT orchestra.Record_Company FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.Result = "Success" ORDER BY orchestra.Year_of_Founded DESC 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded DESC 
 SELECT avg(show.Attendance) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE conductor.Nationality = "American"   AND performance.Type = "Concert"   AND show.Result = "Success"   AND orchestra.Major_Record_Format = "CD"   AND orchestra.Record_Company = "Universal Music Group"   AND performance.Official_ratings_(millions) > 1   AND performance.Weekly_rank > 0   AND show.If_first_show = 1 
 SELECT avg(show.Attendance) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE conductor.Nationality = "American"   AND performance.Type = "Concert"   AND show.Result = "Success" 
 SELECT max(performance.share),        min(performance.share) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON performance.orchestra_id = orchestra.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE performance.type!= "Live final" 
 SELECT max(performance.share),        min(performance.share) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON performance.orchestra_id = orchestra.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE performance.type!= "Live final" 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.Result = "Success" ORDER BY conductor.Year_of_Work DESC 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.Result = "Success" GROUP BY conductor.Name ORDER BY count(*) DESC 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID GROUP BY conductor.Name ORDER BY sum(show.Attendance) DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE show.result = 'Success' GROUP BY conductor.name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.Result = "Success" GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT orchestra.Record_Company,        COUNT(*) FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.result = "Success" GROUP BY orchestra.Record_Company 
 SELECT Record_Company,        count(*) FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY Record_Company 
 SELECT orchestra.Major_Record_Format FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE conductor.Nationality = "American"   AND show.Result = "Success" GROUP BY orchestra.Major_Record_Format ORDER BY COUNT(*) ASC 
 SELECT orchestra.Major_Record_Format FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE conductor.Nationality = "American" GROUP BY orchestra.Major_Record_Format ORDER BY COUNT(*) DESC 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE performance.Share > 0.5 GROUP BY orchestra.Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE performance.Type = "First" GROUP BY orchestra.Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance) 
 SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance) 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE performance.Share > 0.5   AND orchestra.Year_of_Founded < 2003 INTERSECT   SELECT orchestra.Record_Company   FROM conductor   JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID   JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID   JOIN show ON show.Performance_ID = performance.Performance_ID WHERE performance.Share > 0.5   AND orchestra.Year_of_Founded > 2003 
 SELECT orchestra.Record_Company FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Date < 2003 INTERSECT   SELECT orchestra.Record_Company   FROM orchestra   JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Date > 2003 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT DISTINCT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE show.result = "Success" GROUP BY orchestra.orchestra_id HAVING COUNT(*) > 1 
 SELECT orchestra.Year_of_Founded FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.result = "No" GROUP BY orchestra.Year_of_Founding HAVING count(*) > 1 
 SELECT count(*) FROM highschooler 
 SELECT count(*) FROM highschooler WHERE grade = "12" 
 SELECT Highschooler.name,        Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id 
 SELECT highschooler.name,        highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id 
 SELECT DISTINCT grade FROM highschooler 
 SELECT grade FROM HIGHSCOLLEGE 
 SELECT grade FROM highschooler WHERE name = 'Kyle' 
 SELECT grade FROM HIGHSCOLLEGEER WHERE name = 'Kyle' 
 SELECT name FROM highschooler WHERE grade = 10 
 SELECT name FROM HIGHSCOLLEGEER WHERE grade = 10 
 SELECT id FROM highschooler WHERE name = 'Kyle' 
 SELECT id FROM highschooler WHERE name = 'Kyle' 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM HIGHSCOLLEGE GROUP BY grade 
 SELECT grade,        count(*) FROM HIGHSCOLLEGE GROUP BY grade 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT Highschooler.ID,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.student_id GROUP BY Highschooler.ID 
 SELECT count(DISTINCT friend.friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id WHERE highschooler.grade = 10 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id GROUP BY Highschooler.name 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.student_id GROUP BY Highschooler.id 
 SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id GROUP BY highschooler.id ORDER BY count(*) DESC LIMIT 1 
 SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id GROUP BY friend.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id GROUP BY Highschooler.id HAVING count(*) >= 3 
 SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id GROUP BY friend.student_id HAVING count(*) >= 3 
 SELECT HIGHSCOLLEGEER.name FROM HIGHSCOLLEGEER JOIN FRIEND ON HIGHSCOLLEGEER.id = FRIEND.friend_id JOIN likes ON HIGHSCOLLEGEER.id = likes.liked_id WHERE FRIEND.student_id =     (SELECT id      FROM HIGHSCOLLEGEER      WHERE name = 'Kyle')   AND likes.student_id =     (SELECT id      FROM HIGHSCOLLEGEER      WHERE name = 'Kyle') 
 SELECT HIGHSCOLLEGEER.name FROM HIGHSCOLLEGEER JOIN FRIEND ON HIGHSCOLLEGEER.id = FRIEND.friend_id JOIN LIKES ON HIGHSCOLLEGEER.id = LIKES.liked_id WHERE LIKES.student_id = (     SELECT id     FROM HIGHSCOLLEGEER     WHERE name = "Kyle" ) 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle' 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle' 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT name FROM HIGHSCOLLEGE WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT name FROM HIGHSCOLLEGEER WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Highschooler.id 
 SELECT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Highschooler.id UNION SELECT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Likes.student_id = Highschooler.id 
 SELECT DISTINCT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Highschooler.id WHERE Likes.student_id = Friend.student_id 
 SELECT count(*),        Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id GROUP BY Highschooler.id 
 SELECT count(*),        Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id GROUP BY Highschooler.id 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id GROUP BY Highschooler.name 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.student_id GROUP BY Likes.student_id 
 SELECT HIGHSCOLLEGEER.name FROM HIGHSCOLLEGEER JOIN FRIEND ON HIGHSCOLLEGEER.id = FRIEND.friend_id JOIN likes ON HIGHSCOLLEGEER.id = likes.liked_id GROUP BY HIGHSCOLLEGEER.id ORDER BY count(*) DESC LIMIT 1 
 SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.name ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id GROUP BY Likes.student_id HAVING count(*) >= 2 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Likes.liked_id = Friend.friend_id GROUP BY Likes.student_id HAVING count(*) >= 2 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id GROUP BY Highschooler.id HAVING count(*) >= 2 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.id = Likes.liked_id WHERE Highschooler.grade > 5 
 SELECT HIGHSCOUsher.name FROM HIGHSCOUsher JOIN Friend ON HIGHSCOUsher.id = Friend.friend_id GROUP BY HIGHSCOUsher.id HAVING count(*) >= 2 INTERSECT SELECT HIGHSCOUsher.name FROM HIGHSCOUsher JOIN Likes ON HIGHSCOUsher.id = Likes.liked_id WHERE HIGHSCOUsher.grade > 5 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id WHERE friend.student_id = 23   AND highschooler.name = 'Kyle' 
 SELECT count(*) FROM HIGHSCOUsher JOIN friend ON HIGHSCOUsher.id = friend.friend_id JOIN likes ON HIGHSCOUsher.id = likes.liked_id WHERE HIGHSCOUsher.name = 'Kyle' 
 SELECT avg(grade) FROM HIGHSCOLLEGEER WHERE id IN     (SELECT friend_id      FROM friend      UNION      SELECT student_id      FROM likes) 
 SELECT avg(grade) FROM HIGHSCOLLEGEER WHERE id IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.student_id = likes.liked_id) 
 SELECT min(grade) FROM HIGHSCOLLEGEER WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT grade FROM HIGHSCOLLEGEER EXCEPT SELECT HIGHSCOLLEGEER.grade FROM HIGHSCOLLEGEER JOIN FRIEND ON HIGHSCOLLEGEER.id = FRIEND.friend_id JOIN HIGHSCOLLEGEER ON HIGHSCOLLEGEER.id = FRIEND.student_id 
 SELECT state FROM Owners INTERSECT SELECT state FROM Professionals 
 SELECT state FROM Owners INTERSECT SELECT state FROM Professionals 
 SELECT avg(dogs.age) FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = dogs.size_code JOIN treatment_types ON treatment_types.treatment_type_code = charges.charge_type JOIN professionals ON professionals.professional_id = treatments.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id WHERE dogs.abandoned_yn = 0   AND dogs.date_of_birth > "1991-11-09"   AND dogs.gender = "F"   AND dogs.weight > 30   AND professionals.city = "San Francisco"   AND professionals.state = "California"   AND professionals.zip_code = "94102"   AND treatments.date_of_treatment > "2013-11-10"   AND treatments.cost_of_treatment > 100 
 SELECT avg(dogs.age) FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = dogs.size_code JOIN treatment_types ON treatment_types.treatment_type_code = charges.charge_type JOIN professionals ON professionals.professional_id = treatments.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id WHERE dogs.abandoned_yn = 0   AND dogs.date_of_birth > "1991-01-01"   AND dogs.gender = "F"   AND dogs.weight > 30   AND professionals.city = "San Francisco"   AND professionals.state = "California"   AND professionals.zip_code = "94102"   AND treatments.cost_of_treatment > 100   AND treatments.date_of_treatment > "2013-01-01"   AND treatments.treatment_type_code = breeds.breed_code   AND sizes.size_description = "Large"; 
 SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.date_of_birth BETWEEN '1980-01-01' AND '1990-01-01'   AND Professionals.state = 'Indiana' GROUP BY Treatments.professional_id HAVING count(*) > 2 
 SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.date_of_birth > '1990-01-01'   AND Dogs.date_of_birth < '2000-01-01'   AND Dogs.gender = 'F'   AND Dogs.weight > 20   AND Professionals.state = 'Indiana' GROUP BY Professionals.professional_id HAVING count(*) > 2 
 SELECT Dogs.name FROM Breeds JOIN Charges ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment > 1000 GROUP BY Dogs.name HAVING count(*) >= 1 
;
 SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT Dogs.name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name!= "Labrador"   AND Sizes.size_description!= "Large"   AND Treatment_Types.treatment_type_description!= "Vaccination"   AND Dogs.date_of_birth!= Dogs.date_arrived   AND Dogs.date_of_birth!= Dogs.date_departed   AND Dogs.gender!= "F"   AND Dogs.weight!= "60" 
 SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT Dogs.name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name!= "Labrador"   AND Sizes.size_description!= "Large"   AND Treatment_Types.treatment_type_description!= "Vaccination"   AND Professionals.role_code!= "Owner"   AND Professionals.role_code!= "Professional" 
 SELECT professionals.professional_id,        professionals.role_code,        professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id EXCEPT SELECT professionals.professional_id,        professionals.role_code,        professionals.email_address FROM professionals JOIN dogs ON dogs.owner_id = professionals.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id 
;
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Professionals.first_name,        Professionals.role_code,        Professionals.professional_id FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY owners.owner_id ORDER BY sum(charges.charge_amount) DESC LIMIT 1 
 SELECT dogs.owner_id,        owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN charges ON dogs.dog_id = charges.dog_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE owners.state = "New York"   AND dogs.abandoned_yn = 0 GROUP BY owners.owner_id ORDER BY sum(CHARGES.charge_amount) DESC LIMIT 1 
 SELECT Treatment_Types.treatment_type_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY sum(Treatments.cost_of_treatment) LIMIT 1 
 SELECT Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY sum(Treatments.cost_of_treatment) LIMIT 1 
 SELECT sum(treatments.cost_of_treatment),        owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id GROUP BY owners.owner_id ORDER BY sum(charges.charge_amount) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING count(DISTINCT Treatments.treatment_type_code) >= 2 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2 
 SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT Dogs.date_of_birth,        Professionals.first_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Dogs.owner_id = Professionals.owner_id WHERE Dogs.name = "Max"   AND Dogs.gender = "M"   AND Dogs.date_of_birth > "1991-01-01"   AND Sizes.size_description = "Large"   AND Professionals.role_code = "Vet" ORDER BY Dogs.date_of_birth 
 SELECT Treatments.date_of_treatment,        Professionals.first_name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id 
 SELECT Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Dogs.name,        Owners.first_name,        Owners.last_name,        Sizes.size_description FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code WHERE Dogs.abandoned_yn = 0 
 SELECT Owners.first_name,        Owners.last_name,        Dogs.size_code FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Owners ON Dogs.owner_id = Owners.owner_id 
 SELECT Dogs.name,        Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id 
 SELECT Dogs.name,        Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id 
 SELECT Dogs.name,        Treatments.date_of_treatment FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = "Rarest Breed" 
 SELECT Dogs.name,        Treatments.date_of_treatment FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name =     (SELECT breed_name      FROM Breeds      GROUP BY breed_name      ORDER BY count(*) ASC      LIMIT 1) 
 SELECT Dogs.name,        Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = "Virginia" 
 SELECT Dogs.name FROM Breeds JOIN Charges ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = "Virginia" 
;
;
 SELECT owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = charges.size_code JOIN treatment_types ON treatment_types.treatment_type_code = charges.treatment_type_code JOIN dogs ON dogs.breed_code = breeds.breed_code JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.date_of_birth =     (SELECT min(date_of_birth)      FROM dogs) 
 SELECT Dogs.owner_id FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Dogs.owner_id = Professionals.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id AND Treatments.professional_id = Professionals.professional_id AND Treatments.treatment_type_code = Charges.charge_type WHERE Dogs.date_of_birth =     (SELECT min(date_of_birth)      FROM Dogs) GROUP BY Dogs.owner_id HAVING min(date_of_birth) =     (SELECT min(date_of_birth)      FROM Dogs) ORDER BY Dogs.age LIMIT 1; 
 SELECT email_address FROM professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT email_address FROM professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.date_of_birth > '1991-08-06'   AND Dogs.gender = 'F'   AND Dogs.name = 'Mittens'   AND Owners.city = 'Springfield'   AND Owners.state = 'IL'   AND Owners.zip_code = '62701'   AND Professionals.cell_number = '217-555-0110'   AND Professionals.email_address ='mittens.
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.charge_type JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.date_of_birth > '1991-08-06'   AND Dogs.gender = 'F'   AND Dogs.name = 'Mittens'   AND Owners.city = 'Springfield'   AND Owners.state = 'IL'   AND Owners.zip_code = '62701'   AND Professionals.cell_number = '217-555-0110'   AND Professionals.email_address ='mittens.
 SELECT count(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id 
 SELECT count(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.abandoned_yn = 0   AND dogs.date_of_birth > "2000-01-01"   AND dogs.date_of_birth < "2010-01-01"   AND dogs.gender = "F"   AND dogs.weight > 20   AND treatments.cost_of_treatment > 100   AND treatments.date_of_treatment > "2010-01-01"   AND treatments.date_of_treatment < "2020-01-01"   AND treatments.treatment_type_code = "Surgery"   AND treatments.professional_id IN     (SELECT professional_id      FROM professionals      WHERE state = "California"        AND zip_code = "90210"        AND first_name = "Julie"        AND last_name = "Smith") 
 SELECT count(DISTINCT professionals.first_name) FROM Breeds JOIN charges ON Breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = Breeds.size_code JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code JOIN dogs ON dogs.size_code = sizes.size_code JOIN professionals ON dogs.owner_id = professionals.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id AND treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code 
 SELECT count(DISTINCT professionals.first_name) FROM Breeds JOIN charges ON Breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = Breeds.size_code JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code JOIN dogs ON dogs.size_code = sizes.size_code JOIN professionals ON dogs.owner_id = professionals.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id AND treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.owner_id IN     (SELECT Dogs.owner_id      FROM Dogs      JOIN Owners ON Dogs.owner_id = Owners.owner_id      WHERE Owners.city LIKE '%West%') 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.date_of_birth > '2000-01-01'   AND Dogs.date_of_birth < '2010-01-01'   AND Dogs.name LIKE '%West%' 
 SELECT Owners.first_name,        Owners.last_name,        Owners.email_address FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state LIKE '%North%' 
 SELECT first_name,        last_name,        email_address FROM Owners WHERE state LIKE '%North%' 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT treatments.cost_of_treatment FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON sizes.size_code = dogs.size_code JOIN treatment_types ON treatment_types.treatment_type_code = charges.charge_type JOIN professionals ON professionals.professional_id = treatments.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id WHERE dogs.date_of_birth > '2000-01-01'   AND dogs.date_of_birth < '2010-01-01'   AND dogs.name = 'Max'   AND dogs.gender = 'F'   AND sizes.size_description = 'Large'   AND treatment_types.treatment_type_description = 'Vaccination'   AND professionals.last_name = 'Smith'   AND professionals.state = 'NY' ORDER BY dogs.date_of_birth DESC LIMIT 1 
 SELECT charges.charge_amount FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.breed_code = sizes.size_code JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code JOIN dogs ON dogs.size_code = sizes.size_code JOIN professionals ON dogs.owner_id = professionals.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE professionals.first_name = "Drew"   AND professionals.last_name = "Bond"   AND treatment_types.treatment_type_description = "Teeth Cleaning" ORDER BY treatments.date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM dogs WHERE abandoned_yn = 1   AND date_of_birth > "2000-01-01"   AND date_of_birth < "2010-01-01"   AND date_arrived > "2010-01-01"   AND date_departed < "2010-01-01"   AND gender = "F"   AND weight > 20   AND size_code = "L"   AND breed_code = "Labrador" 
 SELECT count(*) FROM dogs WHERE date_of_birth > '2000-01-01'   AND date_of_birth < '2010-01-01'   AND abandoned_yn = '0'   AND date_arrived > '2000-01-01'   AND date_arrived < '2010-01-01'   AND date_departed > '2000-01-01'   AND date_departed < '2010-01-01'   AND weight > 20   AND gender = 'F' 
 SELECT count(*) FROM Owners WHERE home_phone IS NULL   AND cell_number IS NULL   AND state = "NY"   AND zip_code = "12345"   AND email_address = "n/a"   AND city = "Temporary"   AND first_name = "n/a"   AND last_name = "n/a"   AND street = "n/a" 
 SELECT count(*) FROM Owners WHERE home_phone IS NULL   AND cell_number IS NULL   AND email_address IS NULL   AND city = "null"   AND state = "null"   AND zip_code = "null"   AND first_name = "null"   AND last_name = "null"   AND street = "null" 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT Dogs.name,        Dogs.age,        Dogs.weight FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code WHERE Dogs.abandoned_yn = 1 
 SELECT Dogs.name,        Dogs.age,        Dogs.weight FROM Breeds JOIN Charges ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Dogs ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.abandoned_yn = 1 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs 
 SELECT age FROM Dogs ORDER BY date_of_birth LIMIT 1 
 SELECT age FROM Dogs ORDER BY date_of_birth LIMIT 1 
 SELECT CHARGE_TYPES.charge_type,        CHARGES.charge_amount FROM CHARGES JOIN CHARGE_TYPES ON CHARGES.charge_type = CHARGE_TYPES.charge_type 
 SELECT CHARGE_TYPES.charge_type,        CHARGES.charge_amount FROM CHARGES JOIN CHARGE_TYPES ON CHARGES.charge_type = CHARGE_TYPES.charge_type 
 SELECT max(CHARGES.charge_amount) FROM charges JOIN treatments ON charges.charge_id = treatments.charge_id JOIN dogs ON dogs.dog_id = treatments.dog_id JOIN professionals ON dogs.owner_id = professionals.owner_id WHERE professionals.role_code = 'VET' 
 SELECT max(CHARGES.charge_amount) FROM CHARGES WHERE CHARGES.charge_type =     (SELECT TREATMENT_TYPES.treatment_type_code      FROM TREATMENT_TYPES      JOIN TREATMENTS ON TREATMENTS.treatment_type_code = TREATMENT_TYPES.treatment_type_code      GROUP BY TREATMENT_TYPES.treatment_type_code      ORDER BY sum(TREATMENTS.cost_of_treatment) DESC      LIMIT 1) 
 SELECT email_address,        cell_number,        home_phone FROM professionals 
 SELECT email_address,        cell_number,        home_phone FROM professionals 
 SELECT Breeds.breed_name,        Sizes.size_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code 
 SELECT DISTINCT Breeds.breed_name,                 Sizes.size_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Sizes.size_code = Dogs.size_code 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT count(DISTINCT name) FROM singer WHERE birth_year!= "null"   AND citizenship!= "null"   AND net_worth_millions!= "null" 
 SELECT count(*) FROM singer WHERE Citizenship = "USA"   AND Net_Worth_Millions > 1   AND Birth_Year > 1980   AND Highest_Position > 5   AND Sales > 1000000 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions ASC 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions ASC 
 SELECT singer.birth_year,        singer.citizenship FROM singer JOIN song ON singer.singer_id = song.singer_id ORDER BY song.highest_position 
 SELECT singer.birth_year,        singer.citizenship FROM singer JOIN song ON singer.singer_id = song.singer_id ORDER BY song.highest_position 
 SELECT singer.Name FROM singer WHERE singer.citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= "French" 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year = 1948   OR singer.Birth_Year = 1949 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year = 1948   OR singer.Birth_Year = 1949 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year =     (SELECT min(Birth_Year)      FROM singer) ORDER BY singer.Net_Worth_Millions DESC LIMIT 1 
 SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE singer.citizenship = "American" ORDER BY singer.net_worth_millions DESC LIMIT 1 
 SELECT Citizenship,        COUNT(*) FROM singer WHERE Birth_Year >= 1980 GROUP BY Citizenship 
 SELECT Citizenship,        COUNT(*) FROM singer WHERE Birth_Year >= 1980 GROUP BY Citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT max(singer.Net_Worth_Millions),        singer.citizenship FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.citizenship 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American"   AND song.Highest_Position = 1   AND song.Sales > 50000 ORDER BY singer.Net_Worth_Millions DESC 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American" GROUP BY singer.Name 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American" GROUP BY singer.Name 
 SELECT Name FROM singer WHERE Birth_Year!= "null"   AND Net_Worth_Millions!= "null"   AND Citizenship!= "null" EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT name FROM singer WHERE singer_id NOT IN     (SELECT singer_id      FROM song) 
 SELECT singer.citizenship FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE singer.birth_year < 1945 INTERSECT   SELECT singer.citizenship   FROM singer   JOIN song ON singer.singer_id = song.singer_id WHERE singer.birth_year > 1955 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT count(*) FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code 
 SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = "AirCon" 
 SELECT Ref_Property_Types.property_type_description FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.property_type_code JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code JOIN Properties ON Properties.property_id = Other_Available_Features.property_id WHERE Ref_Feature_Types.feature_type_name = "Other" 
 SELECT properties.property_name FROM properties JOIN other_property_features ON properties.property_id = other_property_features.property_id WHERE properties.room_count > 1   AND other_property_features.property_feature_description = 'house' UNION SELECT properties.property_name FROM properties JOIN other_property_features ON properties.property_id = other_property_features.property_id WHERE other_property_features.property_feature_description = 'apartment' 
