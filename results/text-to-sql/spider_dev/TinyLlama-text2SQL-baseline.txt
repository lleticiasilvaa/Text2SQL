SELECT count(*) FROM singer 
SELECT count(*) FROM singer 
SELECT name,  country,  age FROM singer ORDER BY age DESC 
SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC 
SELECT avg(age),  min(age),  max(age) FROM singer WHERE Country  =  'France' 
SELECT avg(age),  min(age),  max(age) FROM singer WHERE Country  =  'France' 
SELECT T2.song_name,  T2.song_release_year FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID ORDER BY T1.Age ASC LIMIT 1 
SELECT T2.Song_Name,  T2.Song_release_year FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Is_male  =  'True' ORDER BY T1.Age ASC LIMIT 1 
SELECT DISTINCT Country FROM singer WHERE Age  >  20 
SELECT DISTINCT Country FROM singer WHERE Age  >  20 
SELECT Country,  COUNT(*) FROM singer GROUP BY Country 
SELECT Country,  COUNT(*) FROM singer GROUP BY Country 
SELECT Song_Name FROM singer WHERE Age  >  18 ORDER BY Is_male DESC LIMIT 1 
SELECT T2.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Is_male  =  'Yes' AND T1.Age  >  (SELECT avg(Age) FROM singer) 
SELECT T2.location,  T1.name FROM stadium AS T1 JOIN stadium AS T2 ON T1.capacity BETWEEN 5000 AND 10000 
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
SELECT max(capacity),  avg(capacity) FROM stadium 
SELECT avg(capacity),  max(capacity) FROM stadium 
SELECT T2.name,  T2.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T1.capacity DESC LIMIT 1 
SELECT T2.name,  T2.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T1.capacity DESC LIMIT 1 
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
SELECT T2.name,  count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id 
SELECT count(*),  T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID 
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 
SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >  2013 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T2.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.name NOT IN (SELECT T1.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id) 
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) 
SELECT Country FROM singer WHERE Age  >  40 INTERSECT SELECT Country FROM singer WHERE Age  <  30 
SELECT T2.Name FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2014 
SELECT T2.Name FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2014 
SELECT T2.concert_name,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id 
SELECT T2.concert_name,  T3.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id GROUP BY T1.concert_id 
SELECT T2.Name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name 
SELECT T2.Name,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name 
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID WHERE T1.Year  =  2014 
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Year  =  2014 
SELECT T2.Name,  T2.Nation FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name  =  "Hey" 
SELECT T2.Name,  T2.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name LIKE "%Hey%" 
SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2015 
SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2014 INTERSECT SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.Year  =  2015 
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID ORDER BY T2.Highest DESC LIMIT 1 
SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Capacity  =  (SELECT max(Capacity) FROM stadium) 
SELECT count(*) FROM Pets WHERE weight  >  10 
SELECT count(*) FROM Pets WHERE weight  >  10 
SELECT min(weight) FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets) 
SELECT pet_age * weight FROM Pets WHERE weight  =  (SELECT min(weight) FROM Pets); 
SELECT max(weight),  pet_type FROM Pets GROUP BY pet_type 
SELECT max(weight),  max(pet_type) FROM Pets 
SELECT count(*) FROM Has_pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T1.StuID  >  20 
SELECT count(*) FROM Has_pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T1.StuID IN (SELECT StuID FROM Student WHERE age  >  20) 
SELECT count(*) FROM Has_pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T1.sex  =  'F' 
SELECT count(*) FROM Has_pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.sex  =  'F' 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT T1.fname FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  'Cat' OR T2.pettype  =  'Dog' 
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = "Cat" OR T2.pettype = "Dog" 
SELECT T1.fname FROM Has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T1.petid  =  T3.petid WHERE T3.pet_type  =  'cat' INTERSECT SELECT T1.fname FROM Has_pet AS T1 JOIN student AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T1.petid  =  T3.petid WHERE T3.pet_type  =  'dog' 
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet_type = "Cat" INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet_type = "Dog" 
SELECT major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet WHERE PetType  =  'Cat') 
SELECT major FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet WHERE PetType  =  'Cat') 
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_pet WHERE PetType  =  'Cat') 
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_pet WHERE PetType  =  'Cat') 
SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  'Dog' EXCEPT SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  'Cat' 
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = "Dog" EXCEPT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = "Cat" 
SELECT pet_type,  weight FROM Pets ORDER BY pet_age LIMIT 1 
SELECT pet_type,  pet_age,  weight FROM Pets ORDER BY pet_age LIMIT 1 
SELECT T1.pet_age,  T1.weight FROM Pets AS T1 JOIN Has_pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.age  >  1 
SELECT pet_age,  weight FROM Pets WHERE pet_age  >  1 
SELECT pet_type,  avg(pet_age),  max(pet_age) FROM Pets GROUP BY pet_type 
SELECT avg(pet_age),  max(pet_age),  pet_type FROM Pets GROUP BY pet_type 
SELECT avg(weight),  pet_type FROM Pets GROUP BY pet_type 
SELECT avg(weight),  pet_type FROM Pets GROUP BY pet_type 
SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid = T2.stuid 
SELECT DISTINCT T1.fname,  T1.age FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid 
SELECT pet_id FROM Pets WHERE pet_age  >  0 AND pet_type  =  'Dog' AND LName  =  'Smith' 
SELECT pet_id FROM Pets WHERE pet_type  =  'Dog' AND LName  =  'Smith' 
SELECT count(*),  StuID FROM Has_pet GROUP BY StuID 
SELECT count(*),  StuID FROM Has_pet GROUP BY StuID 
SELECT T1.fname,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1 
SELECT T1.fname,  T1.sex,  count(*) FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1 
SELECT T1.Lname FROM Student AS T1 JOIN Has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.pet_age  =  3 
SELECT T1.Lname FROM Student AS T1 JOIN Has_pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.pet_age  =  3 AND T3.pet_type  =  "Cat" AND T1.Lname  =  "Smith" 
SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_pet) 
SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT StuID FROM has_pet) 
SELECT count(*) FROM continents; 
SELECT count(*) FROM continents; 
SELECT ContId,  Continent,  COUNT(*) FROM continents GROUP BY ContId 
SELECT ContId,  Continent,  COUNT(*) FROM continents GROUP BY ContId 
SELECT count(DISTINCT Continent) FROM continents; 
SELECT count(*) FROM continents; 
SELECT T2.FullName,  T1.Maker,  count(*) FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker GROUP BY T1.Maker 
SELECT T2.FullName,  T1.maker,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Horsepower  =  (SELECT min(Horsepower) FROM cars_data) 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId ORDER BY T1.Horsepower LIMIT 1 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Weight  <  (SELECT avg(Weight) FROM cars_data) 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Weight  <  (SELECT avg(Weight) FROM cars_data) 
SELECT T2.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Year  =  1970 
SELECT DISTINCT T2.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Year  =  1970 
SELECT T2.Make,  T1.Year FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Make  =  T2.Maker WHERE T1.Year  =  (SELECT min(Year) FROM cars_data) 
SELECT T2.Maker,  T1.Year FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Year  =  (SELECT min(Year) FROM cars_data) 
SELECT DISTINCT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Year  >  1980 
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Year  >  1980 
SELECT Continent,  COUNT(*) FROM car_makers GROUP BY Continent 
SELECT Continent,  COUNT(*) FROM countries GROUP BY Continent 
SELECT T2.Country FROM car_makers AS T1 JOIN countries AS T2 ON T1.Continent  =  T2.ContId ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Country FROM car_makers AS T1 JOIN countries AS T2 ON T1.Continent  =  T2.ContId GROUP BY T1.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT count(*),  T2.Maker FROM model_list AS T1 JOIN car_names AS T2 ON T1.MakeId  =  T2.MakeId GROUP BY T2.Maker 
SELECT T2.FullName,  T1.Maker,  count(*) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Maker  =  T2.MakeId GROUP BY T1.Maker 
SELECT Accelerate FROM cars_data WHERE Make = "amc" AND Horsepower  =  "hornet sportabout"; 
SELECT Accelerate FROM cars_data WHERE Year  =  2005 AND Make  =  "Amc" AND Model  =  "Hornet Sportabout"; 
SELECT count(*) FROM car_makers WHERE country  =  'France' 
SELECT count(*) FROM car_makers WHERE country  =  'France' 
SELECT count(*) FROM model_list WHERE Maker  =  'USA' 
SELECT count(*) FROM model_list WHERE Country  =  'United States' 
SELECT avg(MPG) FROM cars_data WHERE Cylinders  =  4 
SELECT avg(MPG) FROM cars_data WHERE Cylinders  =  4 
SELECT min(Weight) FROM cars_data WHERE Cylinders  =  8 AND YEAR  =  1974 
SELECT min(Weight) FROM cars_data WHERE YEAR  =  1974 AND Cylinders  =  8 
SELECT Maker,  Model FROM car_names 
SELECT Maker,  Model FROM car_names 
SELECT T2.Continent,  T1.Country FROM countries AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.ContId GROUP BY T1.ContId HAVING count(*)  >=  1 
SELECT T2.country,  T1.id FROM countries AS T1 JOIN car_names AS T2 ON T1.continent  =  T2.makeid WHERE T1.continent  >  0 
SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
SELECT avg(Weight) FROM cars_data 
SELECT avg(Weight),  avg(Year) FROM cars_data GROUP BY YEAR 
SELECT T1.Continent FROM continents AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.ContId JOIN countries AS T3 ON T2.Continent  =  T3.ContId WHERE T3.Continent  =  "Europe" GROUP BY T1.ContId HAVING COUNT(*)  >=  3 
SELECT T2.Continent FROM countries AS T1 JOIN car_makers AS T2 ON T1.Continent  =  T2.ContId WHERE T1.Continent  =  'Europe' GROUP BY T2.ContId HAVING COUNT(*)  >=  3 
SELECT max(Horsepower),  Make FROM cars_data WHERE Cylinders  =  3 
SELECT max(Horsepower),  make FROM cars_data WHERE Cylinders  =  3 GROUP BY make 
SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Gasoline  =  (SELECT max(Gasoline) FROM car_names) 
SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.MakeId ORDER BY T2.MPG DESC LIMIT 1 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR  <  1980 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR  <  1980 
SELECT avg(Edispl) FROM cars_data WHERE Make  =  "Volvo"; 
SELECT avg(Edispl) FROM cars_data WHERE Make  =  "Volvo"; 
SELECT max(Accelerate),  Cylinders FROM cars_data GROUP BY Cylinders 
SELECT max(Accelerate) FROM cars_data 
SELECT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId GROUP BY T1.MakeId ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.MakeId GROUP BY T1.MakeId ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM cars_data WHERE Cylinders  >  4 
SELECT count(*) FROM cars_data WHERE Cylinders  >  4 
SELECT count(*) FROM cars_data WHERE YEAR  =  1980 
SELECT count(*) FROM car_names WHERE YEAR  =  1980 
SELECT count(*) FROM car_names WHERE FullName  =  "American Motor Company" 
SELECT count(*) FROM model_list AS T1 JOIN car_names AS T2 ON T1.MakeId  =  T2.MakeId WHERE T2.Maker  =  "American Motor Company" 
SELECT T2.FullName,  T1.MakeId FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Make  =  "Mazda" GROUP BY T1.MakeId HAVING COUNT(*)  >  3 
SELECT Maker,  COUNT(*) FROM model_list GROUP BY Maker HAVING COUNT(*)  >  3 
SELECT DISTINCT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Make  =  "General Motors" OR T1.Weight  >  3500 
SELECT DISTINCT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Make  =  "General Motors" OR T1.Weight  >  3500 
SELECT YEAR FROM cars_data WHERE Weight  >=  3000 AND Weight  <=  4000 
SELECT DISTINCT YEAR FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE Weight  >  3000 
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
SELECT T2.Cylinders FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Model  =  "volvo" ORDER BY T1.Accelerate LIMIT 1 
SELECT Cylinders FROM CARS_DATA WHERE Make  =  "Volvo" ORDER BY Accelerate LIMIT 1 
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data) 
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data) 
SELECT count(*) FROM car_makers WHERE country  >  2 
SELECT count(*) FROM car_makers WHERE country  >  2 
SELECT count(*) FROM cars_data WHERE Cylinders  >  6 
SELECT count(*) FROM cars_data WHERE Cylinders  >  4 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Cylinders  =  4 AND T1.Horsepower  =  (SELECT max(Horsepower) FROM cars_data) 
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker WHERE T1.Cylinders  =  4 AND T1.Horsepower  =  (SELECT max(Horsepower) FROM cars_data) 
SELECT T2.Make,  T1.Make FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Make  =  T2.Maker WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) AND T2.Cylinders  >  3 
SELECT T2.Make,  T1.Make FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Make  =  T2.Maker WHERE T1.Horsepower  <  4 
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 AND Year  <  1980 
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 AND YEAR  <  1980 
SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.Make  =  'Ford Motor Company' AND T2.Weight  <  3500 
SELECT DISTINCT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.MakeId WHERE T1.MPG  <  3500 AND T2.Weight  <  3500 
SELECT DISTINCT country FROM countries WHERE countryid NOT IN (SELECT countryid FROM car_makers) 
SELECT T2.Continent FROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.ContId WHERE T1.Continent  =  "Unknown" 
SELECT T2.Maker,  T1.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker GROUP BY T1.Maker HAVING count(*)  >=  2 INTERSECT SELECT T2.Maker,  T1.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker GROUP BY T1.Maker HAVING count(*)  >  3 
SELECT T2.Maker,  T1.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker GROUP BY T1.Maker HAVING count(*)  >=  2 INTERSECT SELECT T2.Maker,  T1.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.MakeId  =  T2.Maker GROUP BY T1.Maker HAVING count(*)  >=  3 
SELECT T1.ContId,  T2.Maker FROM countries AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.ContId GROUP BY T1.ContId HAVING count(*)  >  3 UNION SELECT T1.ContId,  T2.Maker FROM countries AS T1 JOIN car_names AS T2 ON T1.ContId  =  T2.MakeId WHERE T2.Make  =  'Fiat' GROUP BY T1.ContId HAVING count(*)  >  1 
SELECT T1.ContId,  T2.Maker FROM countries AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.ContId GROUP BY T1.ContId HAVING count(*)  >  3 INTERSECT SELECT T1.ContId,  T2.Maker FROM countries AS T1 JOIN car_makers AS T2 ON T1.ContId  =  T2.ContId WHERE T2.Maker  =  "Fiat" 
SELECT Country FROM airlines WHERE Airline  =  "JetBlue Airways" 
SELECT Country FROM airlines WHERE Airline  =  "Jetblue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline  =  "JetBlue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline  =  "Jetblue Airways" 
SELECT Airline,  Abbreviation FROM airlines WHERE Country  =  "USA" 
SELECT T2.Airline,  T2.Airline FROM airlines AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Country  =  'USA' 
SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airports 
SELECT count(*) FROM airports 
SELECT count(*) FROM flights 
SELECT count(*) FROM flights 
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
SELECT count(*) FROM airlines WHERE Country  =  'USA' 
SELECT count(*) FROM airlines WHERE Country  =  'USA' 
SELECT City,  Country FROM airports WHERE AirportCode  =  "ALT" 
SELECT City,  Country FROM airports WHERE AirportName  =  "Alton" 
SELECT AirportName FROM airports WHERE AirportCode  =  'AKO' 
SELECT AirportName FROM airports WHERE AirportCode  =  'AKO' 
SELECT AirportName FROM airports WHERE City  =  'Aberdeen' 
SELECT AirportName FROM airports WHERE Country  =  "United Kingdom" AND CountryAbbrev  =  "GBR" AND City  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  'APG' 
SELECT count(*) FROM flights WHERE DestAirport  =  'APG' 
SELECT count(*) FROM flights WHERE DestAirport  =  "ATO" 
SELECT count(*) FROM flights WHERE DestAirport  =  "ATO" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN airports AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Aberdeen' AND T3.City  =  'Ashley' 
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen" AND T1.SourceAirport  =  "Ashley" 
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.Airline WHERE T2.Airline  =  'JetBlue Airways' 
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.Airline WHERE T2.Airline  =  "Jetblue Airways" 
SELECT count(*) FROM flights ASY AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.Airline  =  "United Airlines" 
SELECT count(*) FROM flights ASY ASY WHERE DestAirport  =  "ASY" AND Airline  =  "United Airlines" 
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Airline  =  "United Airlines" AND T2.City  =  "AHD" 
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Airline  =  "United Airlines" 
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.Airline WHERE T2.Airline  =  'United Airlines' AND T1.SourceAirport  =  'Aberdeen' 
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.Airline WHERE T2.Airline  =  "United Airlines" AND T1.SourceAirport  =  "Aberdeen" 
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
SELECT T2.City FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T2.City ORDER BY count(*) DESC LIMIT 1 
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1 
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T1.DestAirport ORDER BY count(*) DESC LIMIT 1 
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T1.DestAirport ORDER BY count(*) DESC LIMIT 1 
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T1.DestAirport ORDER BY count(*) LIMIT 1 
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode ORDER BY count(*) LIMIT 1 
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.DestAirport GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.DestAirport GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Airline,  T2.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.SourceAirport GROUP BY T2.Airline ORDER BY count(*) ASC LIMIT 1 
SELECT T2.Airline,  T2.Country FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T1.DestAirport ORDER BY count(*) LIMIT 1 
SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  'AHD' 
SELECT T2.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "AHD" 
SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  'AHD' 
SELECT T2.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.DestAirport  =  "AHD" 
SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  'APG' INTERSECT SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport 
SELECT T1.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  "APG" INTERSECT SELECT T1.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport WHERE T1.City  =  "CVO" 
SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  'CVO' EXCEPT SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport 
SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  "CVO" EXCEPT SELECT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport 
SELECT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.DestAirport  =  T2.AirportCode GROUP BY T1.Airline HAVING count(*)  >=  10 
SELECT count(*) FROM flights WHERE airline  >  10 
SELECT Airline FROM flights WHERE flights  <  200 
SELECT Airline FROM flights WHERE DestAirport  <  200 
SELECT FlightNo FROM flights WHERE Airline  =  "United Airlines" 
SELECT FlightNo FROM flights WHERE Airline  =  "United Airlines" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "APG" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "APG" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "APG" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "APG" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT FlightNo FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  "Aberdeen" OR T1.City  =  "Abilene" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" OR DestAirport  =  "Abilene" 
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DestAirport FROM flights) 
SELECT AirportCode FROM airports WHERE AirportName!= "Departing" AND AirportName!= "Arriving" 
SELECT count(*) FROM employee 
SELECT count(*) FROM employee 
SELECT name FROM employee ORDER BY age ASC 
SELECT name,  age FROM employee ORDER BY age ASC 
SELECT count(*),  city FROM employee GROUP BY city 
SELECT count(*),  city FROM employee GROUP BY city 
SELECT city FROM employee WHERE age  <=  30 GROUP BY city HAVING count(*)  >  1 
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION 
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION 
SELECT manager_name,  district FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT manager_name,  district FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT min(number_products),  max(number_products) FROM shop 
SELECT min(Number_products),  max(Number_products) FROM shop 
SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) 
SELECT T2.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id WHERE T1.number_products  >  (SELECT avg(number_products) FROM shop) 
SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1 
SELECT T2.name FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T1.start_from DESC LIMIT 1 
SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T1.bonus DESC LIMIT 1 
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation) 
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation) 
SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) 
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) 
SELECT count(*),  T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.name 
SELECT count(*),  T2.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.shop_id 
SELECT sum(bonus) FROM evaluation 
SELECT sum(bonus) FROM evaluation 
SELECT * FROM hiring 
SELECT * FROM hiring 
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000 
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(*) FROM Documents 
SELECT count(*) FROM Documents 
SELECT document_id,  document_name,  document_description FROM Documents 
SELECT document_id,  document_name,  document_description FROM Documents 
SELECT T1.document_name,  T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_description LIKE "%w%" 
SELECT T2.Document_Name,  T1.template_id FROM Documents AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_description LIKE "%w%" 
SELECT T1.document_id,  T2.template_id,  T2.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Robbin CV" 
SELECT T1.document_id,  T2.template_id,  T2.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Robbin CV" 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(*) FROM Documents WHERE template_type_code  =  'PPT' 
SELECT count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Template_Type_Code  =  'PPT' 
SELECT T1.template_id,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id 
SELECT count(*),  T1.template_id FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id 
SELECT template_id,  template_type_code FROM Templates ORDER BY count(*) DESC LIMIT 1 
SELECT template_id,  template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT T2.template_id FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id HAVING count(*)  >  1 
SELECT T2.template_id FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id HAVING count(*)  >  1 
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents 
SELECT template_id FROM Templates EXCEPT SELECT T1.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id 
SELECT count(*) FROM Templates 
SELECT count(*) FROM Templates 
SELECT T1.template_id,  T1.version_number,  T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code 
SELECT template_id,  version_number,  template_type_code FROM Templates 
SELECT DISTINCT T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code 
SELECT DISTINCT T2.template_type_code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code 
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT' 
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT' 
SELECT count(*) FROM Templates WHERE Template_Type_Code  =  "CV" 
SELECT count(*) FROM Templates WHERE Template_Type_Code  =  "CV" 
SELECT T1.version_number,  T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.version_number  >  5 
SELECT T2.template_type_code,  T1.version_number FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.version_number  >  5 
SELECT count(*),  T1.template_type_code FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code 
SELECT count(*),  T1.template_type_code FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code 
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  < 3 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description IN (SELECT template_type_description FROM Templates GROUP BY template_type_description HAVING count(*)  <  3) 
SELECT min(Version_Number),  template_type_code FROM Templates GROUP BY template_type_code 
SELECT min(Version_Number),  template_type_code FROM Templates GROUP BY template_type_code 
SELECT T2.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Data base" 
SELECT T2.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  "Data base" 
SELECT T2.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'BK' 
SELECT T2.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Template_Type_Code  =  "BK" 
SELECT count(*),  T1.template_type_code FROM ref_template_types AS T1 JOIN documents AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code 
SELECT count(*),  T1.template_type_code FROM ref_template_types AS T1 JOIN documents AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code 
SELECT T2.template_type_code FROM Documents AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM Ref_template_types ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM documents 
SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM documents 
SELECT template_type_code,  template_type_description FROM Ref_template_types 
SELECT template_type_code,  template_type_description FROM Ref_template_types 
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD" 
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD' 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book" 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book" 
SELECT DISTINCT T2.template_type_description FROM Documents AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code 
SELECT DISTINCT T2.template_type_description FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id 
SELECT template_id FROM Templates WHERE template_type_description  =  "Presentation" 
SELECT template_id FROM Templates WHERE template_type_description  =  'Presentation' 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T1.Document_Name  =  'Summer Show' 
SELECT count(*) FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID  =  t2.Document_ID WHERE t1.Document_Name  =  'Summer Show' 
SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T1.Document_Name  =  'Korea' 
SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T1.Document_Description  =  'Korea' 
SELECT T1.Paragraph_ID,  T1.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  'Welcome to NY' 
SELECT T1.Paragraph_ID,  T1.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T1.Document_Description  =  "Welcome to NY" 
SELECT Paragraph_Text FROM Documents WHERE Document_Name  =  "Customer reviews" 
SELECT Paragraph_Text FROM Documents WHERE Document_Name  =  'Customer reviews' 
SELECT document_id,  count(*) FROM Documents GROUP BY document_id ORDER BY document_id 
SELECT document_id,  count(*) FROM Documents GROUP BY document_id ORDER BY count(*) 
SELECT document_id,  document_name,  count(*) FROM Documents GROUP BY document_id 
SELECT document_id,  document_name,  count(*) FROM Documents GROUP BY document_id 
SELECT DISTINCT document_id FROM documents GROUP BY document_id HAVING count(*)  >=  2 
SELECT document_id FROM Documents GROUP BY document_id HAVING count(*)  >=  2 
SELECT document_id,  document_name FROM Documents GROUP BY document_name ORDER BY count(*) DESC LIMIT 1 
SELECT document_id,  document_name FROM Documents GROUP BY document_name ORDER BY count(*) DESC LIMIT 1 
SELECT document_id FROM Documents GROUP BY document_id ORDER BY count(*) LIMIT 1 
SELECT document_id FROM Documents GROUP BY document_id ORDER BY count(*) LIMIT 1 
SELECT document_id FROM Documents WHERE document_name LIKE "%1 to 2%" 
SELECT document_id FROM Documents WHERE document_name LIKE "%paragraphs%" AND document_description LIKE "%between%"; 
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Brazil' INTERSECT SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Paragraph_Text  =  'Ireland' 
SELECT document_id FROM documents WHERE document_name LIKE "%Brazil%" AND document_name LIKE "%Ireland%" 
SELECT count(*) FROM teacher 
SELECT count(*) FROM teacher 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Age,  Hometown FROM teacher 
SELECT Age,  Hometown FROM teacher 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
SELECT hometown FROM teacher ORDER BY age LIMIT 1 
SELECT Name FROM teacher ORDER BY Age LIMIT 1 
SELECT DISTINCT hometown,  count(*) FROM teacher GROUP BY hometown 
SELECT count(*),  Hometown FROM teacher GROUP BY Hometown 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2 
SELECT DISTINCT T2.Hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2 
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name 
SELECT T2.Name,  T1.Course_ID FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name 
SELECT Name FROM course_arrange WHERE Course_ID  =  1 AND Grade  =  3 
SELECT Name FROM teacher WHERE Teacher_ID  =  (SELECT Teacher_ID FROM course_arrange WHERE Course  =  'Math') 
SELECT name,  count(*) FROM course_arrange GROUP BY name 
SELECT name,  count(*) FROM course_arrange GROUP BY name 
SELECT Name FROM teacher GROUP BY Name HAVING count(*)  >=  2 
SELECT Name FROM teacher GROUP BY Name HAVING count(*)  >=  2 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange) 
SELECT Name FROM teacher WHERE Course_ID NOT IN (SELECT Course_ID FROM course_arrange) 
SELECT count(*) FROM visitor WHERE Age  <  30 
SELECT T2.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.Level_of_membership  >  4 
SELECT avg(age) FROM visitor WHERE level_of_membership!= 4 
SELECT T2.name,  T1.level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.visitor_id  =  T2.visitor_id WHERE T1.level_of_membership  >  4 ORDER BY T1.age 
SELECT T2.Museum_ID,  T1.Name FROM museum AS T1 JOIN visitor AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1 
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year  <  2009 
SELECT Open_Year,  Num_of_Staff FROM museum WHERE Name  =  "Plaza Museum" 
SELECT name FROM museum WHERE open_year  >  2010 GROUP BY name HAVING count(*)  >  (SELECT min(count(*) ) FROM museum WHERE open_year  >  2010) 
SELECT T2.visitor_id,  T1.name,  T1.age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.visitor_id GROUP BY T1.visitor_id HAVING count(*)  >  1 
SELECT T2.visitor_id,  T1.name,  T1.membership_level FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id  =  T2.id GROUP BY T1.visitor_id ORDER BY sum(T1.total_spent) DESC LIMIT 1 
SELECT T2.Museum_ID,  T1.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit) 
SELECT T2.Name,  T2.Age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID GROUP BY T1.visitor_ID ORDER BY sum(T1.Num_of_Ticket) DESC LIMIT 1 
SELECT avg(Num_of_Ticket),  max(Num_of_Ticket) FROM visit 
SELECT sum(T2.Num_of_Ticket) FROM visitor AS T1 JOIN visit AS T2 ON T1.visitor_ID  =  T2.visitor_ID WHERE T1.level_of_membership  =  1 
SELECT T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.Num_of_Ticket  >  0 AND T1.open_year  <  2011 INTERSECT SELECT T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.Num_of_Ticket  <  0 AND T1.open_year  >  2009 
SELECT count(*) FROM visitor WHERE visitor_id NOT IN (SELECT visitor_id FROM visit WHERE open_year  >  2010) 
SELECT count(*) FROM museum WHERE Open_Year  >  2013 OR Open_Year  <  2008 
SELECT count(*) FROM players 
SELECT count(*) FROM players 
SELECT count(*) FROM matches 
SELECT count(*) FROM matches 
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA' 
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA' 
SELECT avg(loser_age),  avg(winner_age) FROM matches 
SELECT avg(loser_age),  avg(winner_age) FROM matches 
SELECT avg(winner_rank) FROM matches 
SELECT avg(winner_rank) FROM matches 
SELECT max(loser_rank) FROM matches 
SELECT max(loser_rank) FROM matches 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
SELECT T2.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id WHERE T1.year  =  2013 INTERSECT SELECT T2.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.year  =  2016 
SELECT T2.player_name FROM matches AS T1 JOIN rankings AS T2 ON T1.loser_id  =  T2.loser_id WHERE T1.year  =  2013 INTERSECT SELECT T2.player_name FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id  =  T2.winner_id WHERE T1.year  =  2016 
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 
SELECT count(*) FROM matches WHERE tourney_date LIKE "%2013%" OR tourney_date LIKE "%2016%" 
SELECT T2.country_code,  T1.first_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id WHERE T1.tourney_name  =  "WTA Championships" INTERSECT SELECT T2.country_code,  T1.first_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id WHERE T1.tourney_name  =  "Australian Open" 
SELECT T2.first_name,  T2.country_code FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id JOIN rankings AS T3 ON T1.match_num  =  T3.match_num WHERE T1.tourney_name  =  "WTA Championships" INTERSECT SELECT T2.first_name,  T2.country_code FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id JOIN rankings AS T4 ON T1.match_num  =  T4.match_num WHERE T1.tourney_name  =  "Australian Open" 
SELECT first_name,  country_code FROM players ORDER BY birth_date DESC LIMIT 1 
SELECT first_name,  country_code FROM players ORDER BY birth_date DESC LIMIT 1 
SELECT first_name,  last_name FROM players ORDER BY birth_date 
SELECT first_name,  last_name FROM players ORDER BY birth_date 
SELECT first_name,  last_name FROM players WHERE hand  =  "L" ORDER BY birth_date 
SELECT first_name,  last_name FROM players WHERE hand  =  'left' ORDER BY birth_date 
SELECT T2.first_name,  T2.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.first_name,  T2.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT T2.rank_points,  T1.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.tourney_id  =  (SELECT tourney_id FROM matches ORDER BY score DESC LIMIT 1) GROUP BY T1.winner_name ORDER BY T1.rank_points DESC LIMIT 1 
SELECT T2.winner_name,  T3.rank_points FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id JOIN matches AS T3 ON T3.winner_id  =  T2.player_id GROUP BY T2.winner_id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.tourney_id  =  "Australian Open" AND T1.ranking  =  (SELECT max(ranking) FROM rankings) 
SELECT T2.winner_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.tournament_name  =  "Australian Open" ORDER BY T1.ranking_points DESC LIMIT 1 
SELECT loser_name,  winner_name FROM matches ORDER BY minutes DESC LIMIT 1 
SELECT T2.winner_name,  T1.loser_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id ORDER BY T1.minutes DESC LIMIT 1 
SELECT avg(ranking),  first_name FROM rankings GROUP BY first_name 
SELECT avg(ranking),  first_name FROM players GROUP BY first_name 
SELECT sum(ranking_points),  first_name FROM rankings GROUP BY first_name 
SELECT sum(ranking_points),  first_name FROM players GROUP BY first_name 
SELECT count(*),  country_code FROM players GROUP BY country_code 
SELECT country_code,  count(*) FROM players GROUP BY country_code 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 
SELECT sum(tours),  ranking_date FROM rankings GROUP BY ranking_date 
SELECT tourney_date,  count(*) FROM rankings GROUP BY tourney_date 
SELECT count(*),  YEAR FROM matches GROUP BY YEAR 
SELECT count(*),  YEAR FROM matches GROUP BY YEAR 
SELECT T2.winner_name,  T2.winner_rank FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.tourney_name  =  "Tournament" GROUP BY T2.winner_rank ORDER BY T2.winner_age LIMIT 3 
SELECT T2.winner_name,  T2.winner_rank FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id WHERE T1.tourney_name  =  "Tournament" AND T1.tourney_rank  =  "Youngest" ORDER BY T2.winner_age LIMIT 3 
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_level  =  "WTA Championships" AND winner_hand  =  "left" 
SELECT count(*) FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id WHERE T2.hand  =  "left" AND T1.tourney_name  =  "WTA Championships" 
SELECT T2.first_name,  T2.country_code,  T1.birth_date FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id ORDER BY T1.rank_points DESC LIMIT 1 
SELECT T2.first_name,  T2.country_code,  T1.birth_date FROM matches AS T1 JOIN rankings AS T2 ON T1.loser_id  =  T2.loser_id ORDER BY T2.ranking_points DESC LIMIT 1 
SELECT count(*),  hand FROM players GROUP BY hand 
SELECT count(*),  hand FROM players GROUP BY hand 
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured' 
SELECT name,  tonnage FROM ship ORDER BY name DESC 
SELECT name,  date,  result FROM battle 
SELECT max(death),  min(death),  id FROM death GROUP BY id 
SELECT avg(injured) FROM death 
SELECT T2.id,  T1.id FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't' 
SELECT T2.name,  T1.result FROM battle AS T1 JOIN battle AS T2 ON T1.id  =  T2.bulgarian_commander WHERE T1.bulgarian_commander!= 'Boril' 
SELECT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig' 
SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING sum(T2.killed)  >  10 
SELECT T2.id,  T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T1.caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1 
SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' OR latin_commander  =  'Baldwin I' 
SELECT count(DISTINCT result) FROM battle 
SELECT count(*) FROM battle WHERE lost_in_battle!= 0 AND tonnage  =  225 
SELECT T2.name,  T2.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.id WHERE T1.name  =  'Lettice' INTERSECT SELECT T1.name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.id WHERE T1.name  =  'HMS Atalanta' 
SELECT name,  result,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT battle.id FROM battle WHERE location  =  "English Channel") 
SELECT T2.note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T1.note LIKE "%East%" 
SELECT * FROM addresses WHERE line_1  =  "line_1" AND line_2  =  "line_2" 
SELECT T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Courses AS T2 ON T1.course_id  =  T2.course_id 
SELECT count(*) FROM Courses 
SELECT count(*) FROM Courses 
SELECT course_description FROM Courses WHERE course_name  =  "Mathematics"; 
SELECT course_description FROM Courses WHERE course_name  =  "Mathematics"; 
SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea" 
SELECT zip_postcode FROM Courses WHERE course_name  =  "Port Chelsea"; 
SELECT department_name,  department_id FROM degrees GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
SELECT department_name,  department_id FROM degrees GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
SELECT count(DISTINCT department_id) FROM degrees 
SELECT count(DISTINCT department_id) FROM degrees 
SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
SELECT count(DISTINCT degree_summary_description) FROM degrees 
SELECT count(*) FROM departments AS department_id JOIN degree_programs AS degree_program_id ON department_id.department_id  =  degree_program_id.department_id WHERE degree_program_id.degree_summary_description  =  "Engineering" 
SELECT count(*) FROM departments AS department_id JOIN degree_programs AS degree_program_id ON department_id.department_id  =  degree_program_id.department_id WHERE degree_program_id.degree_summary_description  =  "Engineering" 
SELECT T1.section_name,  T1.section_description FROM SECTIONS AS T1 JOIN DEPARTMENTS AS T2 ON T1.department_id  =  T2.department_id 
SELECT T1.section_name,  T1.section_description FROM SECTIONS AS T1 JOIN DEPARTMENTS AS T2 ON T1.department_id  =  T2.department_id 
SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN CLASS_SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2 
SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN CLASS_SECTIONS AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <  2 
SELECT section_name FROM SECTIONS ORDER BY section_name 
SELECT section_name FROM SECTIONS ORDER BY section_name 
SELECT T1.semester_name,  T1.student_id FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.semester_name,  T1.student_id,  T1.semester_id FROM Student_enrolment AS T1 JOIN Student_enrolment_courses AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
SELECT department_description FROM departments WHERE department_name LIKE "%the computer%"; 
SELECT department_description FROM departments WHERE department_name LIKE "%computer%" 
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.student_id,  T2.degree_summary_name,  T2.degree_summary_description,  T2.other_details FROM Degree_Programs AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.semester_id  =  1 
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_summary_name,  T2.degree_summary_description,  T3.student_id,  T3.semester_id,  T3.date_enrolled FROM Degree_Programs AS T2 JOIN Courses AS T1 ON T2.course_id  =  T1.course_id JOIN Students AS T3 ON T3.student_id  =  T2.degree_program_id WHERE T2.degree_summary_description  =  "Bachelor" AND T3.semester_id  =  1 
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM STUDENTS AS T1 JOIN Degree_programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  "Bachelor" 
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  "Bachelor" 
SELECT T1.degree_summary_description FROM DEPARTMENTS AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1 
SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.degree_summary_description,  T1.degree_program_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT student_id,  count(*),  first_name,  middle_name,  last_name FROM student_enrolment GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.first_name,  T1.middle_name,  T1.last_name,  count(*),  T2.degree_summary_name,  T2.degree_summary_description,  T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id 
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment) 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 
SELECT t1.last_name FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id  =  t2.student_id WHERE t2.semester_id  =  1 AND t2.degree_program_id  =  "Degree Programs" AND t1.state_province_county  =  "North Carolina" EXCEPT SELECT t1.last_name FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id  =  t2.student_id WHERE t2.semester_id  =  1 AND t2.degree_program_id  =  "Degree Programs" AND t1.state_province_county  =  "North Carolina" 
SELECT T1.last_name FROM STUDENTS AS T1 JOIN STUDENT_ENROLLMENT AS T2 ON T1.student_id  =  T2.student_id WHERE T1.state_province_county  =  "North Carolina" EXCEPT SELECT T1.last_name FROM STUDENTS AS T1 JOIN STUDENT_ENROLLMENT AS T2 ON T1.student_id  =  T2.student_id WHERE T1.state_province_county  =  "North Carolina" 
SELECT T1.transcript_date,  T1.transcript_id FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2 
SELECT transcript_date,  transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*)  >=  2 
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward"; 
SELECT cell_mobile_number FROM students WHERE first_name  =  "Timmothy" AND last_name  =  "Ward"; 
SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_registered DESC LIMIT 1 
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_registered DESC LIMIT 1 
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM STUDENTS AS T1 JOIN STUDENT_ENROLLMENT AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_summary_description  =  "Bachelor of Science" ORDER BY T2.date_left 
SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM STUDENTS AS T1 JOIN DEPARTMENTS AS T2 ON T1.department_id  =  T2.department_id WHERE T1.date_first_registered  =  (SELECT min(date_first_registered) FROM STUDENTS) 
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T1.first_name!= T2.first_name 
SELECT T1.first_name FROM STUDENTS AS T1 JOIN STUDENT_ENROLLMENT AS T2 ON T1.student_id  =  T2.student_id WHERE T1.permanent_address_id!= T2.permanent_address_id 
SELECT T1.address_id,  T2.line_1 FROM addresses AS T1 JOIN student_enrolment AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
SELECT avg(transcript_date) FROM TRANSCRIPTS 
SELECT avg(transcript_date) FROM TRANSCRIPTS 
SELECT transcript_date,  other_details FROM TRANSCRIPTS ORDER BY transcript_date LIMIT 1 
SELECT T1.transcript_date,  T2.other_details FROM TRANSCRIPTS AS T1 JOIN TRANSCRIPT_CONTENTS AS T2 ON T1.transcript_id  =  T2.transcript_id 
SELECT count(*) FROM TRANSCRIPTS 
SELECT count(*) FROM TRANSCRIPTS 
SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1 
SELECT transcript_date FROM TRANSCRIPTS ORDER BY transcript_date DESC LIMIT 1 
SELECT count(*),  T1.course_id FROM student_enrolment_courses AS T1 JOIN student_enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.course_id,  T2.transcript_id,  max(T1.enrollment_id) FROM Courses AS T1 JOIN Transcripts AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id 
SELECT transcript_date,  student_course_id FROM Transcripts ORDER BY count(*) LIMIT 1 
SELECT transcript_date,  transcript_id FROM transcripts ORDER BY count(*) LIMIT 1 
SELECT T1.semester_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  "Master" INTERSECT SELECT T1.semester_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  "Bachelor" 
SELECT semester_id FROM student_enrolment WHERE degree_program_id  =  "Masters" INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id  =  "Bachelors" 
SELECT count(DISTINCT address_id) FROM students 
SELECT DISTINCT T1.address_id FROM Courses AS T2 JOIN Departments AS T1 ON T2.department_id  =  T1.department_id JOIN Students AS T3 ON T3.student_id  =  T2.student_id WHERE T3.first_name  =  "John" AND T3.last_name  =  "Smith" 
SELECT other_details FROM students ORDER BY last_name 
SELECT other_student_details FROM Students ORDER BY last_name 
SELECT section_name FROM SECTIONS; 
SELECT section_description FROM SECTIONS WHERE section_name  =  "h"; 
SELECT T1.first_name FROM STUDENTS AS T1 JOIN addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.country  =  "Haiti" OR T1.cell_mobile_number  =  "09700166582" 
SELECT T1.first_name FROM STUDENTS AS T1 JOIN addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.city  =  "Haiti" OR T2.cell_mobile_number  =  "09700166582" 
SELECT title FROM Cartoon ORDER BY title 
SELECT Title FROM Cartoon ORDER BY Title 
SELECT T2.title FROM Cartoon AS T1 JOIN Directed_by AS T2 ON T1.directed_by  =  T2.id WHERE T1.directed_by  =  "Ben Jones" 
SELECT title FROM Cartoon WHERE directed_by  =  "Ben Jones" 
SELECT count(*) FROM Cartoon WHERE written_by  =  "Joseph Kuhr" 
SELECT count(*) FROM Cartoon WHERE written_by  =  "Joseph Kuhr" 
SELECT title,  directed_by FROM Cartoon ORDER BY original_air_date 
SELECT T2.title,  T1.directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id ORDER BY T1.original_air_date 
SELECT title FROM Cartoon WHERE directed_by  =  "Brandon Vietti" OR directed_by  =  "Ben Jones" 
SELECT title FROM Cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti" 
SELECT Country,  COUNT(*) FROM TV_channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Country,  COUNT(*) FROM TV_channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT count(DISTINCT series_name),  count(DISTINCT Content) FROM TV_Channel 
SELECT count(DISTINCT series_name),  count(DISTINCT Content) FROM TV_Channel 
SELECT Content FROM TV_Channel WHERE series_name  =  "Sky Radio" 
SELECT Content FROM TV_series WHERE title  =  "Sky Radio"; 
SELECT Package_Option FROM TV_Channel WHERE series_name  =  "Sky Radio" 
SELECT Package_Option FROM TV_Channel WHERE series_name  =  "Sky Radio" 
SELECT count(*) FROM TV_channel WHERE Language  =  "English" 
SELECT count(*) FROM TV_channel WHERE Language  =  'English' 
SELECT Language,  COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Language,  COUNT(*) FROM TV_channel GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Language,  COUNT(*) FROM TV_channel GROUP BY Language 
SELECT Language,  COUNT(*) FROM TV_channel GROUP BY Language 
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  "The Rise of the Blue Beetle!" 
SELECT T2.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.series_name  =  "The Rise of the Blue Beetle" 
SELECT title FROM cartoon WHERE channel  =  ( SELECT id FROM TV_Channel WHERE series_name  =  "Sky Radio" ) 
SELECT T2.title FROM TV_channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.series_name  =  "Sky Radio" 
SELECT Episode FROM TV_series ORDER BY Rating 
SELECT Episode FROM TV_series ORDER BY Rating 
SELECT Episode,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT Episode,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT min(Share),  max(Share) FROM TV_series 
SELECT max(Share),  min(Share) FROM TV_series 
SELECT T2.air_date FROM TV_series AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.id JOIN TV_Channel AS T3 ON T1.channel  =  T3.id WHERE T1.Episode  =  "A Love of a Lifetime" 
SELECT Air_Date FROM TV_series WHERE Episode  =  "A Love of a Lifetime"; 
SELECT Weekly_Rank FROM TV_series WHERE Episode  =  "A Love of a Lifetime" 
SELECT weekly_rank FROM TV_series WHERE Episode  =  "A Love of a Lifetime" 
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Episode  =  "A Love of a Lifetime" 
SELECT T2.title FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id JOIN TV_series AS T3 ON T1.id  =  T3.id JOIN TV_channel AS T4 ON T3.channel  =  T4.id WHERE T3.episode  =  "A Love of a Lifetime" 
SELECT Episode FROM TV_series WHERE Channel  =  "Sky Radio" 
SELECT Episode FROM TV_series WHERE Title  =  "Sky Radio"; 
SELECT count(*),  directed_by FROM Cartoon GROUP BY directed_by 
SELECT count(*),  directed_by FROM Cartoon GROUP BY directed_by 
SELECT T2.Production_code,  T1.channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id ORDER BY T1.original_air_date DESC LIMIT 1 
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
SELECT package_option,  series_name FROM TV_channel WHERE Hight_definition_TV  =  'Yes' 
SELECT package_option,  series_name FROM TV_channel WHERE High_definition_TV  =  'Yes' 
SELECT T2.channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.written_by  =  "Todd Casey" 
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Written_by  =  "Todd Casey" 
SELECT T2.id FROM TV_channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.channel_name!= "Cartoon" AND T1.content  =  "Todd Casey" 
SELECT DISTINCT Country FROM Cartoon WHERE Written_by!= "Todd Casey" 
SELECT T2.series_name,  T1.channel FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.id  =  T2.channel AND T1.channel  =  T2.directed_by AND T2.original_air_date  =  T1.original_air_date AND T2.written_by  =  T1.written_by AND T2.production_code  =  T1.production_code AND T1.channel  =  T2.channel_name 
SELECT T2.series_name,  T2.country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.channel WHERE T1.series_name  =  "Cartoons" AND T1.channel  =  "Directed_by" AND T2.directed_by  =  "Ben Jones" AND T2.directed_by  =  "Michael Chang" 
SELECT Pixel_aspect_ratio_PAR,  Country FROM TV_channel WHERE Language!= "english" 
SELECT T2.Pixel_aspect_ratio_PAR,  T1.series_name FROM TV_channel AS T1 JOIN TV_channel AS T2 ON T1.id  =  T2.id WHERE T1.language!= "english" 
SELECT id FROM TV_channel WHERE Country IN ( SELECT Country FROM TV_channel GROUP BY Country HAVING COUNT(*)  >  2 ) 
SELECT id FROM TV_channel GROUP BY id HAVING count(*)  >  2 
SELECT id FROM TV_channel WHERE channel!= "Cartoon" AND directed_by!= "Ben Jones" 
SELECT id FROM TV_channel WHERE channel!= "Cartoon" 
SELECT package_option FROM TV_channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by  =  "Ben Jones") 
SELECT package_option FROM TV_channel WHERE id NOT IN (SELECT channel FROM Cartoon) 
SELECT count(*) FROM poker_player 
SELECT count(*) FROM poker_player 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Final_Table_Made,  Best_Finish FROM poker_player 
SELECT Final_Table_Made,  Best_Finish FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made DESC 
SELECT Birth_Date FROM people ORDER BY Earnings LIMIT 1 
SELECT Birth_Date FROM people ORDER BY Earnings LIMIT 1 
SELECT Money_Rank FROM poker_player WHERE Height  =  (SELECT MAX(Height) FROM people) 
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC 
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality 
SELECT count(*),  nationality FROM people GROUP BY nationality 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
SELECT Name,  Birth_Date FROM people ORDER BY Name ASC 
SELECT Name,  Birth_Date FROM people ORDER BY Name 
SELECT Name FROM people WHERE Nationality!= "Russia" 
SELECT Name FROM people WHERE Nationality!= 'Russia' 
SELECT Name FROM people WHERE Nationality!= 'Poker Player' 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(*) FROM AREA_CODE_STATE 
SELECT contestant_number,  contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
SELECT vote_id,  phone_number,  state FROM VOTES 
SELECT max(area_code),  min(area_code) FROM AREA_CODE_STATE 
SELECT created FROM VOTES WHERE state  =  'CA' 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name!= 'Jessie Alloway' 
SELECT DISTINCT state,  created FROM VOTES 
SELECT contestant_number,  contestant_name FROM CONTESTANTS GROUP BY contestant_number HAVING count(*)  >=  2 
SELECT contestant_number,  contestant_name FROM VOTES ORDER BY votes_count LIMIT 1 
SELECT count(*) FROM VOTES WHERE state  =  'NY' OR state  =  'CA' 
SELECT count(*) FROM VOTES WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES) 
SELECT area_code FROM VOTES GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
SELECT T1.created,  T2.state,  T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T2.contestant_name  =  'Tabatha Gehling' 
SELECT DISTINCT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code  =  T2.contestant_number WHERE T2.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT DISTINCT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code  =  T2.contestant_number WHERE T2.contestant_name  =  'Kelly Clauss' 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%' 
SELECT name FROM country WHERE indepYear  >  1950 
SELECT name FROM country WHERE independetry  >  1950 
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic' 
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic' 
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean" 
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Carribean"; 
SELECT Continent FROM country WHERE Name  =  "Anguilla"; 
SELECT Continent FROM country WHERE name  =  "Anguilla"; 
SELECT t2.region FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t1.name  =  "Kabul" 
SELECT region FROM country WHERE name  =  "Kabul"; 
SELECT Language FROM countrylanguage WHERE CountryCode  =  "Aruba" ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Language FROM countrylanguage WHERE CountryCode  =  "Aruba" AND Language  =  "Dutch" 
SELECT population,  lifeexpectancy FROM country WHERE name  =  "Brazil"; 
SELECT population,  lifeexpectancy FROM country WHERE name  =  "Brazil"; 
SELECT name,  population FROM country WHERE name  =  "Angola"; 
SELECT T1.region,  T1.population FROM country AS T1 JOIN city AS T2 ON T1.id  =  T2.countrycode WHERE T2.name  =  "Angola" 
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa" 
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa" 
SELECT name FROM country WHERE LifeExpectancy  =  (SELECT min(LifeExpectancy) FROM country WHERE Country  =  "Asia") 
SELECT name FROM country WHERE region  =  "Asia" AND lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country) 
SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  "Asia" 
SELECT population,  GNP FROM country WHERE continent  =  "Asia" ORDER BY GNP DESC LIMIT 1 
SELECT avg(LifeExpectancy) FROM country WHERE CountryCode IN (SELECT CountryCode FROM country WHERE Continent  =  'Africa' AND Region  =  'Republic') 
SELECT avg(LifeExpectancy) FROM country WHERE CountryCode IN (SELECT CountryCode FROM country WHERE Continent  =  'Africa' AND Region  =  'Republic') 
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' INTERSECT SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Europe' 
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe' 
SELECT population FROM city WHERE district  =  "Gelderland"; 
SELECT sum(Population) FROM city WHERE district  =  "Gelderland" 
SELECT avg(GNP),  sum(Population) FROM country WHERE countrycode  =  'US' 
SELECT avg(GNP),  sum(Population) FROM country WHERE countrycode IN ( SELECT t1.countrycode FROM country AS t1 JOIN countrylanguage AS t2 ON t1.countrycode  =  t2.countrycode WHERE t2.iso  =  "US" ) 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa" 
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"; 
SELECT sum(T1.Percentage) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  "Aruba" 
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode  =  "Aruba"; 
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode  =  "AFG"; 
SELECT count(*) FROM countrylanguage WHERE CountryCode  =  "AFG" 
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode ORDER BY T2.percentage DESC LIMIT 1 
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode ORDER BY T2.percentage DESC LIMIT 1 
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT Continent FROM countrylanguage GROUP BY Continent ORDER BY COUNT(*) DESC LIMIT 1 
SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.Language  =  "English" INTERSECT SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.Language  =  "Dutch" 
SELECT count(*) FROM countrylanguage WHERE Language  =  "English" INTERSECT SELECT count(*) FROM countrylanguage WHERE Language  =  "Dutch" 
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English" INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "French" 
SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "United States" INTERSECT SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "France" 
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "English" INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  "French" 
SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "United States" INTERSECT SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T1.name  =  "France" 
SELECT count(DISTINCT Continent) FROM country WHERE name  =  "Chinese"; 
SELECT count(DISTINCT language) FROM countrylanguage WHERE language  =  "Chinese" 
SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch" 
SELECT t2.region FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t1.name  =  "Dutch" OR t1.name  =  "English" 
SELECT countrycode FROM countrylanguage WHERE language  =  'English' INTERSECT SELECT countrycode FROM countrylanguage WHERE language  =  'Dutch' 
SELECT countrycode FROM countrylanguage WHERE language  =  'English' OR language  =  'Dutch' 
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Continent FROM country WHERE Region  =  "Asia") ORDER BY COUNT(*) DESC LIMIT 1 
SELECT language FROM countrylanguage WHERE percentage  =  ( SELECT MAX ( percentage ) FROM countrylanguage WHERE countrycode IN ( SELECT countrycode FROM country WHERE countrycode  =  "Asia" ) ) 
SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T1.IsOfficial  =  'Y' GROUP BY T2.Language HAVING COUNT(*)  =  1 
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' 
SELECT t2.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t1.language  =  "english" AND t2.population  =  ( SELECT max(population) FROM city ) 
SELECT t2.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.language  =  "english" ORDER BY t1.population DESC LIMIT 1 
SELECT name,  population,  lifeexpectancy FROM country WHERE region  =  "Asia" ORDER BY population DESC LIMIT 1 
SELECT name,  population,  lifeexpectancy FROM country WHERE area  =  ( SELECT MAX ( area ) FROM country WHERE continent  =  "Asia" ) 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT sum(Population) FROM country WHERE Language!= "English" 
SELECT count(*) FROM country WHERE language!= "English" 
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" 
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" 
SELECT count(DISTINCT language) FROM countrylanguage WHERE countryyear  <  1930 
SELECT count(DISTINCT language) FROM countrylanguage WHERE official  =  'Y' AND year  <  1930 
SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent  =  'Europe') 
SELECT name FROM country WHERE area  >  (SELECT max(area) FROM country WHERE continent  =  'Europe') 
SELECT name FROM country WHERE population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia') 
SELECT name FROM country WHERE population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia') 
SELECT T1.name FROM country AS T1 JOIN city AS T2 ON T1.id  =  T2.countrycode WHERE T2.population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa') 
SELECT T1.name FROM country AS T1 JOIN city AS T2 ON T1.id  =  T2.countrycode WHERE T2.population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa') 
SELECT CountryCode FROM country WHERE Language!= "English" 
SELECT countrycode FROM country WHERE language!= "english" 
SELECT CountryCode FROM countrylanguage WHERE Language!= "English" 
SELECT countrycode FROM countrylanguage WHERE language!= "English" 
SELECT code FROM country WHERE language!= "english" INTERSECT SELECT code FROM country WHERE governmentform!= "republic" 
SELECT countrycode FROM country WHERE language!= "English" AND governmenttype!= "Republic" 
SELECT t2.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.id  =  t2.countrycode WHERE t1.continent  =  'Europe' AND t2.language  =  'English' AND t1.region  =  'Europe' 
SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.id  =  T2.countrycode WHERE T1.continent  =  'Europe' AND T2.language  =  'English' EXCEPT SELECT T2.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.id  =  T2.countrycode WHERE T1.continent  =  'Europe' AND T2.language  =  'English' 
SELECT DISTINCT city FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language  =  'Chinese' AND iso2  =  'CN') 
SELECT DISTINCT city FROM city WHERE countrycode IN (SELECT country FROM countrylanguage WHERE language  =  'Chinese') 
SELECT name,  independetionyear,  surfacearea FROM country ORDER BY population LIMIT 1 
SELECT name,  independentyear,  surfacearea FROM country ORDER BY population ASC LIMIT 1 
SELECT population,  name,  headOfState FROM country ORDER BY area DESC LIMIT 1 
SELECT name,  population,  headOfState FROM country ORDER BY area DESC LIMIT 1 
SELECT countryname,  count(*) FROM countrylanguage GROUP BY countryname HAVING count(*)  >=  3 
SELECT countrycode,  count(*),  language FROM countrylanguage GROUP BY countrycode HAVING count(*)  >  2 
SELECT count(*),  district FROM city GROUP BY district HAVING population  >  (SELECT avg(population) FROM city) 
SELECT district,  count(*) FROM city GROUP BY district HAVING avg(Population)  >  (SELECT avg(Population) FROM city) 
SELECT T1.governmentform,  T1.Population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.percentage  >  72 
SELECT T1.governmentform,  T1.population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.percentage  >  72 GROUP BY T1.governmentform 
SELECT avg(LifeExpectancy),  avg(Population) FROM country WHERE LifeExpectancy  <  72 
SELECT Continent,  sum(Population),  avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72 
SELECT name,  area FROM country ORDER BY area DESC LIMIT 5 
SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT name FROM country ORDER BY population LIMIT 3 
SELECT count(*) FROM country WHERE Continent  =  'Asia' 
SELECT count(*) FROM country WHERE Continent  =  'Asia' 
SELECT name FROM country WHERE Continent  =  'Europe' AND population  =  80000 
SELECT name FROM country WHERE Continent  =  'Europe' AND population  =  80000 
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE Continent  =  'North America' AND SurfaceArea  >  3000 
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE SurfaceArea  >  3000 AND Continent  =  'North America' 
SELECT t1.name FROM city AS t1 JOIN citylanguage AS t2 ON t1.id  =  t2.countrycode WHERE t2.percentage BETWEEN 160000 AND 900000 
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
SELECT Language FROM countrylanguage ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Language,  T2.Percentage FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1 
SELECT countrycode,  language,  percentage FROM countrylanguage GROUP BY countrycode ORDER BY percentage DESC LIMIT 1 
SELECT count(*) FROM countrylanguage WHERE language  =  "Spanish" AND percentage  =  ( SELECT max(percentage) FROM countrylanguage WHERE language  =  "Spanish") 
SELECT count(*) FROM countrylanguage WHERE Language  =  "Spanish" AND IsOfficial  =  "Y" 
SELECT countrycode FROM country WHERE language  =  "Spanish" AND percentage  =  ( SELECT MAX ( percentage ) FROM countrylanguage WHERE language  =  "Spanish" ) 
SELECT countrycode FROM countrylanguage WHERE language  =  "Spanish" GROUP BY countrycode HAVING count(*)  >  50 
SELECT count(*) FROM conductor 
SELECT count(*) FROM conductor 
SELECT Name FROM conductor ORDER BY Age ASC 
SELECT Name FROM conductor ORDER BY Age 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_Founded DESC 
SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID ORDER BY T2.Year_of_Founded DESC 
SELECT avg(Attendance) FROM show 
SELECT avg(Attendance) FROM show 
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT COUNT (DISTINCT Nationality) FROM conductor 
SELECT count(DISTINCT Nationality) FROM conductor 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT T2.Name FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID  =  T2.Performance_ID ORDER BY T1.Year_of_Work DESC LIMIT 1 
SELECT T2.Name FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID  =  T2.Performance_ID ORDER BY T2.Year_of_Work DESC LIMIT 1 
SELECT T2.Name,  T1.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID 
SELECT T2.Name,  T1.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID 
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1 
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*)  >  1 
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Name FROM ORCHESTRA AS T1 JOIN CONDUCTOR AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008 
SELECT T2.Name FROM ORCHESTRA AS T1 JOIN CONDUCTOR AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008 
SELECT Record_Company,  COUNT(*) FROM orchestra GROUP BY Record_Company 
SELECT count(*),  T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Record_Company 
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) ASC 
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC 
SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Record_Company ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Record_Company ORDER BY count(*) DESC LIMIT 1 
SELECT T2.Orchestra FROM ORCHESTRA AS T1 JOIN PERFORMANCE AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Orchestra_ID NOT IN (SELECT Orchestra_ID FROM PERFORMANCE) 
SELECT T2.Orchestra FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Performance_ID  =  "0" 
SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Year_of_Founded  <  2003 INTERSECT SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Year_of_Founded  >  2003 
SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Year_of_Founded  <  2003 INTERSECT SELECT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Year_of_Founded  >  2003 
SELECT count(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD" 
SELECT count(DISTINCT T2.Orchestra) FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID WHERE T1.Major_Record_Format  =  "CD" OR T1.Major_Record_Format  =  "DVD" 
SELECT YEAR_OF_FOUNDING FROM ORCHESTRAS GROUP BY YEAR_OF_FOUNDING HAVING COUNT(*)  >  1 
SELECT YEAR_OF_FOUNDING FROM ORCHESTRAS GROUP BY YEAR_OF_FOUNDING HAVING COUNT(*)  >  1 
SELECT count(*) FROM highschooler 
SELECT count(*) FROM highschooler 
SELECT name,  grade FROM highschooler 
SELECT name,  grade FROM highschooler 
SELECT grade FROM highschooler 
SELECT grade FROM highschooler 
SELECT grade FROM Highschooler WHERE name  =  "Kyle" 
SELECT grade FROM highschooler WHERE name  =  "Kyle" 
SELECT name FROM highschooler WHERE grade  =  10 
SELECT name FROM highschooler WHERE grade  =  10 
SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id WHERE T2.name  =  "Kyle" 
SELECT student_id FROM Highschooler WHERE name  =  "Kyle" 
SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10 
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 
SELECT count(*),  grade FROM Highschooler GROUP BY grade 
SELECT count(*),  grade FROM highschooler GROUP BY grade 
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4 
SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4 
SELECT student_id,  count(*) FROM Friend GROUP BY student_id 
SELECT count(*),  T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
SELECT T2.name,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
SELECT T1.name,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING count(*)  >=  3) 
SELECT name FROM highschooler WHERE grade  =  3 
SELECT T2.name FROM Likes AS T1 JOIN Friend AS T2 ON T1.student_id  =  T2.friend_id JOIN Highschooler AS T3 ON T2.liked_id  =  T3.id WHERE T3.name  =  "Kyle" 
SELECT T2.name FROM Likes AS T1 JOIN Friend AS T2 ON T1.liked_id  =  T2.student_id JOIN Highschooler AS T3 ON T2.student_id  =  T3.id WHERE T3.name  =  "Kyle" 
SELECT count(DISTINCT friend_id) FROM friend WHERE student_id  =  10; 
SELECT count(DISTINCT friend_id) FROM friend WHERE student_id  =  2; 
SELECT student_id FROM Highschooler WHERE student_id NOT IN (SELECT student_id FROM Friend) 
SELECT student_id FROM Highschooler WHERE student_id NOT IN (SELECT student_id FROM Friend) 
SELECT name FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT name FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT DISTINCT T1.id FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id JOIN friend AS T3 ON T2.friend_id  =  T3.friend_id WHERE T3.student_id  >  0 
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes 
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.liked_id JOIN Friends AS T3 ON T2.student_id  =  T3.friend_id 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Friend AS T3 ON T1.liked_id  =  T3.friend_id 
SELECT count(*),  student_id FROM Likes GROUP BY student_id 
SELECT count(*),  student_id FROM Likes GROUP BY student_id 
SELECT T1.name,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id GROUP BY T1.liked_id 
SELECT T1.name,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id 
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2 
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2 
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id WHERE T1.grade  >  5 GROUP BY T1.id HAVING count(*)  >=  2 
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id WHERE T1.grade  >  5 GROUP BY T1.id HAVING count(*)  >=  2 
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle" 
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.ID WHERE T2.name  =  "Kyle" 
SELECT avg(grade) FROM highschooler 
SELECT avg(grade) FROM friend 
SELECT min(grade) FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT grade FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) 
SELECT state FROM OWNERS INTERSECT SELECT state FROM PROFESSIONALS 
SELECT state FROM OWNERS INTERSECT SELECT state FROM PROFESSIONALS 
SELECT avg(age) FROM Treatments 
SELECT avg(age) FROM Treatments 
SELECT T2.professional_id,  T2.last_name,  T2.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.state  =  "Indiana" GROUP BY T2.professional_id HAVING count(*)  >  2 
SELECT T2.professional_id,  T1.last_name,  T1.cell_number FROM Professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.state  =  "Indiana" GROUP BY T1.professional_id HAVING count(*)  >  2 
SELECT T2.name FROM DOGS AS T1 JOIN TREATMENTS AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.cost_of_treatment  <  1000 
SELECT T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.home_phone  >  1000 
SELECT first_name FROM professionals EXCEPT SELECT T1.first_name FROM owners AS T1 JOIN professionals AS T2 ON T1.first_name  =  T2.first_name 
SELECT first_name FROM professionals EXCEPT SELECT T1.first_name FROM owners AS T1 JOIN professionals AS T2 ON T1.first_name  =  T2.first_name 
SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT professional_id FROM Treatments 
SELECT professional_id,  role_code,  email_address FROM professionals EXCEPT SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id 
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 
SELECT T1.professional_id,  T2.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 
SELECT breed_name FROM Breeds ORDER BY count(*) DESC LIMIT 1 
SELECT breed_name FROM Dogs GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1 
SELECT T1.owner_id,  T1.last_name FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT T1.owner_id,  T1.last_name FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT treatment_type_description FROM Treatments ORDER BY cost_of_treatment LIMIT 1 
SELECT treatment_type_description FROM Treatments ORDER BY cost_of_treatment LIMIT 1 
SELECT T1.owner_id,  T1.zip_code FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.dog_id) DESC LIMIT 1 
SELECT T1.owner_id,  T1.zip_code FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
SELECT professional_id,  last_name FROM professionals GROUP BY professional_id HAVING count(*)  >=  2 
SELECT T2.professional_id,  T3.cell_number FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN treatments AS T3 ON T1.treatment_type_code  =  T3.treatment_type_code GROUP BY T2.professional_id HAVING count(*)  >=  2 
SELECT T2.first_name,  T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments) 
SELECT T1.first_name,  T1.last_name FROM PROFESSIONALS AS T1 JOIN TREATMENTS AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM TREATMENTS) 
SELECT T1.date_of_treatment,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id 
SELECT T1.date_of_treatment,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id 
SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code 
SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code 
SELECT T1.first_name,  T1.last_name,  T2.size_description FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id 
SELECT T1.first_name,  T1.last_name,  T2.size_code FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id 
SELECT T1.first_name,  T2.name FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id 
SELECT T1.first_name,  T2.name FROM OWNERS AS T1 JOIN DOGS AS T2 ON T1.owner_id  =  T2.owner_id 
SELECT T1.name,  T2.treatment_id FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  "Shiba Inu" GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1 
SELECT T1.name,  T2.treatment_date FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  "Shiba Inu" GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1 
SELECT T1.first_name,  T2.name FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  "Virginia" 
SELECT T1.first_name,  T2.name FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  "Virginia" 
SELECT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id 
SELECT T1.date_arrived,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id 
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id ORDER BY T1.age LIMIT 1 
SELECT t2.last_name FROM Dogs AS t1 JOIN Owners AS t2 ON t1.owner_id  =  t2.owner_id ORDER BY t1.age LIMIT 1 
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin" 
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin" 
SELECT date_arrived,  date_departed FROM Dogs 
SELECT date_arrived,  date_departed FROM Dogs 
SELECT count(*) FROM Treatments 
SELECT count(*) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.treatment_type_code  =  "Cleaning" 
SELECT count(*) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN Dogs AS T3 ON T3.dog_id  =  T1.dog_id WHERE T3.city  =  "San Francisco" 
SELECT count(*) FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id  =  t2.professional_id JOIN dogs AS t3 ON t2.dog_id  =  t3.dog_id 
SELECT T2.first_name,  T2.last_name,  T1.street,  T1.city,  T1.state,  T1.zip_code FROM PROFESSIONALS AS T1 JOIN CITY AS T2 ON T1.city  =  T2.city WHERE T2.city LIKE "%West%" 
SELECT T2.first_name,  T2.last_name,  T2.street,  T2.city,  T2.state,  T2.zip_code FROM PROFESSIONALS AS T1 JOIN OWNERS AS T2 ON T1.professional_id  =  T2.owner_id WHERE T2.city LIKE "%West%" 
SELECT T1.first_name,  T1.last_name,  T1.email_address FROM OWNERS AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.city LIKE "%North%" 
SELECT first_name,  last_name,  email_address FROM OWNERS WHERE state LIKE '%North%' 
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs) 
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs) 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN (SELECT owner_id FROM DOGS) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN (SELECT owner_id FROM Dogs) 
SELECT count(*) FROM professionals WHERE role_code!= "Treatment" 
SELECT count(*) FROM professionals WHERE role_code!= "Professional" 
SELECT T1.name,  T1.age,  T1.weight FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.abandoned_yn  =  1 
SELECT T1.name,  T1.age,  T1.weight FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.abandoned_yn  =  '1' 
SELECT avg(age) FROM DOGS 
SELECT avg(age) FROM DOGS 
SELECT max(age) FROM DOGS 
SELECT max(age) FROM DOGS 
SELECT charge_type,  charge_amount FROM CHARGES 
SELECT charge_type,  charge_amount FROM CHARGES 
SELECT charge_amount FROM CHARGES ORDER BY charge_amount DESC LIMIT 1 
SELECT charge_amount FROM CHARGES ORDER BY charge_amount DESC LIMIT 1 
SELECT email_address,  home_phone,  cell_number FROM professionals 
SELECT email_address,  home_phone,  cell_number FROM professionals 
SELECT breed_type_code,  size_type_code FROM Breeds UNION SELECT breed_type_code,  size_type_code FROM Sizes 
SELECT DISTINCT breed_type_code,  size_type_code FROM dogs 
SELECT T2.first_name,  T2.last_name,  T3.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code  =  T3.treatment_type_code 
SELECT T1.first_name,  T1.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id 
SELECT count(*) FROM singer 
SELECT count(*) FROM singer 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Birth_Year,  Citizenship FROM singer 
SELECT Birth_Year,  Citizenship FROM singer 
SELECT Name FROM singer WHERE Citizenship!= "France" 
SELECT Name FROM singer WHERE Citizenship!= 'French' 
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
SELECT T2.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID ORDER BY T2.Sales DESC LIMIT 1 
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship 
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
SELECT Citizenship,  max(Net_Worth_Millions) FROM singer 
SELECT T2.Title,  T1.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
SELECT T2.Title,  T1.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Sales  >  300000 
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Sales  >  300000 
SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name HAVING COUNT(*)  >  1 
SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name HAVING COUNT(*)  >  1 
SELECT T2.Name,  SUM(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name 
SELECT T2.Title,  SUM(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Title 
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song) 
SELECT Singer_ID FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song) 
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
SELECT count(*) FROM Other_available_features 
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_description  =  "AirCon"; 
SELECT T2.property_type_description FROM Ref_Property_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T1.property_type_code  =  "Ref_Feature_Types" 
SELECT T1.property_name FROM properties AS T1 JOIN other_property_features AS T2 ON T1.property_id  =  T2.property_id WHERE T2.property_feature_description  =  "House" OR T2.property_feature_description  =  "Apartment" GROUP BY T1.property_id HAVING count(*)  >  1 
