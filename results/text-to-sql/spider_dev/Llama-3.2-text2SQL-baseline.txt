 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC 
 SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC 
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France' 
 SELECT avg(age),  min(age),  max(age) FROM singer WHERE country  =  'France' 
 SELECT T2.Name,  T2.Song_release_year FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID ORDER BY T1.Age LIMIT 1 
 SELECT Song_Name,  Song_release_year FROM singer ORDER BY Age ASC LIMIT 1 
 SELECT DISTINCT Country FROM singer WHERE Age  >  20 
 SELECT DISTINCT Country FROM singer WHERE Age  >  20 
 SELECT Country,  COUNT(*) FROM singer GROUP BY Country 
 SELECT Country,  COUNT(*) FROM singer GROUP BY Country 
 SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer) 
 SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer) 
 SELECT LOCATION,  Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,  Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),  avg(capacity) FROM stadium 
 SELECT avg(capacity),  max(capacity) FROM stadium 
 SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT name,  capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
 SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
 SELECT T2.Name,  COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID 
 SELECT T2.Stadium_ID,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Stadium_ID 
 SELECT T1.Name,  T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.year  >=  2014 GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >  2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) 
 SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert) 
 SELECT Country FROM singer WHERE Age  >  40 OR Age  <  30 
 SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 
 SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014) 
 SELECT T1.concert_name,  T1.theme,  COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name 
 SELECT T1.concert_name,  T1.theme,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name 
 SELECT T2.Name,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID 
 SELECT T2.Name,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID 
 SELECT T2.Name FROM concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.year  =  2014 
 SELECT T2.Name FROM concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.year  =  2014 
 SELECT T2.Name,  T2.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name LIKE '%Hey%' GROUP BY T1.Singer_ID HAVING COUNT(*)  >=  1 
 SELECT T2.Name,  T2.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Song_Name LIKE "%Hey%" 
 SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.year  =  2014 INTERSECT SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.year  =  2015 
 SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.year  =  2014 INTERSECT SELECT T2.Name,  T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T1.year  =  2015 
 SELECT count(*) FROM concert WHERE stadium_id  =  (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1) 
 SELECT count(*) FROM concert WHERE stadium_id  =  (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1) 
 SELECT count(*) FROM Pets WHERE weight  >  10 
 SELECT count(*) FROM Pets WHERE weight  >  10 
 SELECT min(weight) FROM Pets 
 SELECT min(weight) FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets) 
 SELECT max(weight),  pet_type FROM Pets GROUP BY pet_type 
 SELECT max(weight),  pet_type FROM Pets GROUP BY pet_type 
 SELECT count(*) FROM Has_Pet WHERE StuID  >  20 
 SELECT count(*) FROM Has_Pet WHERE StuID  >  20 
 SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T1.StuID  =  T3.StuID WHERE T3.sex  =  'F' AND T2.pet_type  =  'dog' 
 SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID JOIN Student AS T3 ON T1.StuID  =  T3.StuID WHERE T3.sex  =  'F' AND T2.pet_type  =  'dog' 
 SELECT count(DISTINCT pet_type) FROM Pets 
 SELECT count(DISTINCT pet_type) FROM Pets 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" OR T2.pettype  =  "Dog" 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" OR T2.pettype  =  "Dog" 
 SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  "Cat" INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  "Dog" 
 SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" INTERSECT SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Dog" 
 SELECT major,  age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
 SELECT T1.major,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid!= 1 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetType  =  "Cat" 
 SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetType  =  "Cat" 
 SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Dog" EXCEPT SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" 
 SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  'dog' EXCEPT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  'cat' 
 SELECT pet_type,  pet_age FROM pets ORDER BY pet_age LIMIT 1 
 SELECT pet_type,  pet_weight FROM pets ORDER BY pet_age LIMIT 1 
 SELECT pet_id,  weight FROM pets WHERE pet_age  >  1 
 SELECT pet_id,  weight FROM pets WHERE pet_age  >  1 
 SELECT avg(T1.pet_age),  max(T1.pet_age),  T2.pet_type FROM Pets AS T1 JOIN Pets AS T2 ON T1.pet_type  =  T2.pet_type GROUP BY T2.pet_type 
 SELECT pet_type,  avg(pet_age),  max(pet_age) FROM Pets GROUP BY pet_type 
 SELECT pet_type,  avg(weight) FROM Pets GROUP BY pet_type 
 SELECT pet_type,  avg(weight) FROM Pets GROUP BY pet_type 
 SELECT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID 
 SELECT DISTINCT T1.fname,  T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID 
 SELECT T1.petid FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.petid  =  T2.petid JOIN Student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.lname  =  'Smith' 
 SELECT T1.petid FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.petid  =  T2.petid JOIN Student AS T3 ON T2.stuid  =  T3.stuid WHERE T3.lname  =  'Smith' 
 SELECT count(*),  StuID FROM Has_Pet GROUP BY StuID 
 SELECT T1.StuID,  count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID 
 SELECT T1.fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1 
 SELECT T1.fname,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID HAVING count(*)  >  1 
 SELECT T1.Lname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" AND T2.petage  =  3 
 SELECT T1.Lname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T2.pettype  =  "Cat" AND T2.petage  =  3 
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet) 
 SELECT avg(age) FROM student WHERE StuID NOT IN (SELECT StuID FROM has_pet) 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT T1.continent,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent  =  T2.continent GROUP BY T1.continent 
 SELECT T1.contid,  T1.continent,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid  =  T2.continent GROUP BY T1.continent 
 SELECT count(*) FROM countries 
 SELECT count(*) FROM countries 
 SELECT T1.Maker,  T1.Id,  count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Maker 
 SELECT T1.Maker,  T1.Id,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id 
 SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Horsepower  =  ( SELECT MIN(Horsepower) FROM car_names ) 
 SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Horsepower  =  ( SELECT MIN(Horsepower) FROM car_names ) 
 SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Weight  <  (SELECT avg(Weight) FROM car_names) 
 SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Weight  <  (SELECT avg(Weight) FROM car_names) 
 SELECT T2.Maker FROM car_names AS T1 JOIN car_makers AS T2 ON T1.Make  =  T2.Maker WHERE T1.Year  =  1970 
 SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  "Car" AND T2.Maker  =  "Car" 
 SELECT T1.make,  T2.year FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id  =  T2.make ORDER BY T2.year LIMIT 1 
 SELECT T2.Maker,  T1.year FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Make  =  T2.Maker ORDER BY T1.year LIMIT 1 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Year  >  1980 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Year  >  1980 
 SELECT T1.continent,  count(*) FROM continents AS T1 JOIN car_makers AS T2 ON T1.continent  =  T2.continent GROUP BY T1.continent 
 SELECT T1.continent,  count(*) FROM continents AS T1 JOIN car_makers AS T2 ON T1.continent  =  T2.continent GROUP BY T1.continent 
 SELECT CountryName FROM countries GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Maker,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Maker 
 SELECT T1.Maker,  T1.Maker,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Maker 
 SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Make  =  T2.Maker WHERE T2.Maker  =  "amc" AND T1.Model  =  "hornet sportabout (sw)"; 
 SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Make  =  T2.Maker WHERE T2.Maker  =  "amc hornet sportabout (sw)"; 
 SELECT count(*) FROM car_makers WHERE country  =  'France' 
 SELECT count(*) FROM car_makers WHERE country  =  'France' 
 SELECT count(*) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id  =  T2.maker WHERE T1.country  =  'USA' 
 SELECT count(*) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id  =  T2.make WHERE T1.country  =  'United States' 
 SELECT avg(T1.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Cylinders  =  4 
 SELECT avg(T1.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Cylinders  =  4 
 SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND YEAR  =  1974; 
 SELECT min(weight) FROM cars_data WHERE YEAR  =  1974 AND Cylinders  =  8; 
 SELECT DISTINCT T1.Maker,  T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker 
 SELECT T1.Maker,  T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker 
 SELECT T2.CountryName,  T1.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.CountryId HAVING COUNT(*)  >=  1 
 SELECT T1.CountryName,  T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country  =  T2.Country WHERE T2.Maker!= "null" 
 SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
 SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
 SELECT avg(Weight),  YEAR FROM cars_data GROUP BY YEAR 
 SELECT avg(Weight),  YEAR FROM car_names GROUP BY YEAR 
 SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING COUNT(*)  >=  3 
 SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId WHERE T1.Country  =  'Europe' GROUP BY T1.Country HAVING COUNT(*)  >=  3 
 SELECT max(Horsepower),  Make FROM car_names WHERE Cylinders  =  3 GROUP BY Make 
 SELECT T1.Horsepower,  T2.Maker FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.Model WHERE T2.Cylinders  =  3 GROUP BY T1.Maker ORDER BY T1.Horsepower DESC LIMIT 1 
 SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.MPG  =  ( SELECT max(MPG) FROM cars_data ) 
 SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.MPG  =  ( SELECT max(MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make ) 
 SELECT avg(Horsepower) FROM car_names WHERE YEAR  <  1980 
 SELECT avg(Horsepower) FROM car_names WHERE YEAR  <  1980 
 SELECT avg(Edispl) FROM car_names WHERE Make  =  "volvo" 
 SELECT avg(Edispl) FROM car_names WHERE Make  =  'Volvo' 
 SELECT max(Accelerate),  Cylinders FROM car_names GROUP BY Cylinders 
 SELECT max(Accelerate),  Cylinders FROM car_names GROUP BY Cylinders 
 SELECT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.Model GROUP BY T1.Model ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model GROUP BY T1.Model ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM car_names WHERE Cylinders  >  4 
 SELECT count(*) FROM car_names WHERE Cylinders  >  4 
 SELECT count(*) FROM car_names WHERE YEAR  =  1980; 
 SELECT count(*) FROM car_makers WHERE YEAR  =  1980 
 SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker WHERE T1.fullname  =  "American Motor Company" 
 SELECT count(*) FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id  =  T2.maker WHERE T1.maker  =  "American Motor Company" 
 SELECT T1.Maker,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Maker HAVING count(*)  >  3 
 SELECT T1.Maker,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Maker WHERE T2.FullName  =  "General Motors" OR T2.Weight  >  3500 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id WHERE T2.Maker  =  "General Motors" OR T1.Weight  >  3500 
 SELECT YEAR FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 
 SELECT DISTINCT YEAR FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE weight  >  3000 
 SELECT T1.Horsepower FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Accelerate  =  ( SELECT max(Accelerate) FROM cars_data ) 
 SELECT T1.Horsepower FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Accelerate  =  ( SELECT max(Accelerate) FROM cars_data ) 
 SELECT count(*),  T1.Maker FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T1.Model  =  "volvo" GROUP BY T1.Maker ORDER BY T2.Accelerate LIMIT 1 
 SELECT count(*),  T1.cylinders FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.Model WHERE T2.Maker  =  "Volvo" GROUP BY T1.cylinders ORDER BY T1.MPG ASC LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data) 
 SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data) 
 SELECT count(*) FROM car_makers GROUP BY car_makers.HireCountry HAVING count(*)  >  2 
 SELECT count(*) FROM car_makers GROUP BY car_makers.HireCountry HAVING count(*)  >  2 
 SELECT count(*) FROM car_names WHERE Cylinders  >  6 
 SELECT count(*) FROM car_names WHERE Cylinders  >  6 
 SELECT T2.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T1.Cylinders  =  4 GROUP BY T2.Model ORDER BY T2.Horsepower DESC LIMIT 1 
 SELECT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model  =  T2.Model WHERE T2.Cylinders  =  4 GROUP BY T1.Model ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T1.makeid,  T1.makename FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.makeid GROUP BY T2.makeid HAVING T2.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) 
 SELECT T1.Make,  T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Make WHERE T2.Horsepower  <  4 GROUP BY T1.Make,  T1.Model HAVING count(*)  <  4 
 SELECT max(T1.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Cylinders  =  8 OR T2.Year  <  1980 
 SELECT max(T1.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.Make  =  T2.Make WHERE T2.Cylinders  =  8 OR T2.Year  <  1980 
 SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Horsepower  <  3500 EXCEPT SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Maker  =  'Ford Motor Company' 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model WHERE T2.Maker!= "Ford" AND T2.Weight  <  3500 
 SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country  =  T2.Country 
 SELECT CountryName FROM countries EXCEPT SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId 
 SELECT T1.id,  T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T2.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3 
 SELECT T1.id,  T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id,  T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  2 
 SELECT T1.CountryId,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country  =  T2.Country WHERE T2.Maker  =  'Fiat' GROUP BY T1.CountryId HAVING COUNT(*)  >  3 UNION SELECT T1.CountryId,  T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.Country  =  T2.Country WHERE T2.Maker  =  'Fiat' AND T2.Maker  =  'Fiat' 
 SELECT CountryId,  CountryName FROM countries WHERE CountryName IN ( SELECT CountryName FROM countries WHERE CountryName  =  "Fiat" ) UNION SELECT CountryId,  CountryName FROM countries WHERE CountryName  =  "More than 3 car makers" 
 SELECT Country FROM airlines WHERE Airline  =  "JetBlue Airways"; 
 SELECT country FROM airlines WHERE abbreviation  =  'Jetblue' 
 SELECT Abbreviation FROM airlines WHERE Airline  =  "JetBlue Airways"; 
 SELECT Abbreviation FROM airlines WHERE Airline  =  'Jetblue Airways' 
 SELECT Airline,  Abbreviation FROM airlines WHERE Country  =  'USA' 
 SELECT Airline,  Abbreviation FROM airlines WHERE Country  =  'USA' 
 SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
 SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM flights 
 SELECT count(*) FROM flights 
 SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
 SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
 SELECT count(*) FROM airlines WHERE country  =  'USA' 
 SELECT count(*) FROM airlines WHERE country  =  'USA' 
 SELECT city,  country FROM airports WHERE airportname  =  "alton" 
 SELECT city,  country FROM airports WHERE airportname  =  "Alton" 
 SELECT AirportName FROM airports WHERE AirportName  =  "AKO" 
 SELECT AirportName FROM airports WHERE AirportCode  =  'AKO' 
 SELECT AirportName FROM airports WHERE City  =  'Aberdeen' 
 SELECT AirportName FROM airports WHERE City  =  'Aberdeen' 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  'APG' 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  'APG' 
 SELECT count(*) FROM flights WHERE DestAirport  =  "ATO" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.airportname  =  "ATO" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport WHERE T1.City  =  "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport WHERE T1.city  =  "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportName  =  T2.DestAirport WHERE T1.City  =  "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  'Aberdeen' AND T2.destairport  =  'Ashley' 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.DestAirport WHERE T1.City  =  "Aberdeen" AND T1.AirportName  =  "Ashley" 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  'JetBlue Airways' 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  "Jetblue Airways" 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  'United Airlines' AND T2.destairport  =  'ASY' 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  "United" AND T2.sourceairport  =  "ASY" 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  'United Airlines' AND T2.sourceairport  =  'AHD' 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  "United" AND T2.sourceairport  =  "AHD" AND T2.destairport  =  "AHD"; 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  'United' AND T2.destairport  =  'Aberdeen' 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.airline WHERE T1.abbreviation  =  "United" AND T2.destairport  =  "Aberdeen" AND T1.abbreviation  =  "United"; 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY count(*) DESC LIMIT 1 
 SELECT City FROM airports GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) LIMIT 1 
 SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) ASC LIMIT 1 
 SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.id  =  T2.airline GROUP BY T1.abbreviation ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.abbreviation,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.airline GROUP BY T1.country ORDER BY count(*) LIMIT 1 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.sourceairport WHERE T2.sourceairport  =  "AHD" 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD" 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' 
 SELECT Airline FROM airlines WHERE Abbreviation  =  "AA" INTERSECT SELECT Airline FROM airlines WHERE Abbreviation  =  "AA" WHERE SourceAirport  =  "APG" INTERSECT SELECT Airline FROM airlines WHERE Abbreviation  =  "AA" WHERE SourceAirport  =  "CVO" 
 SELECT Airline FROM airlines EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' 
 SELECT Airline FROM airlines WHERE SourceAirport!= "APG" AND DestinationAirport!= "CVO" 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  >=  10 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  >=  10 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  <  200 
 SELECT Airline FROM flights GROUP BY Airline HAVING count(*)  <  200 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline  =  T2.Airline WHERE T2.Airline  =  "United Airlines" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline  =  T2.Airline WHERE T2.Airline  =  "United" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.AirportName  =  "APG" 
 SELECT FlightNo FROM flights WHERE SourceAirport  =  "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.AirportName  =  "APG" 
 SELECT FlightNo FROM flights WHERE DestAirport  =  "APG" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen" 
 SELECT FlightNo FROM flights WHERE SourceAirport  =  "Aberdeen" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen" 
 SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  "Aberdeen" OR T1.city  =  "Abilene" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.airportcode  =  T2.sourceairport WHERE T1.city  =  "Aberdeen" OR T1.city  =  "Abilene" 
 SELECT AirportName FROM airports EXCEPT SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport 
 SELECT AirportName FROM airports EXCEPT SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT count(*),  city FROM employee GROUP BY city 
 SELECT count(*),  city FROM employee GROUP BY city 
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 
 SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 
 SELECT LOCATION,  count(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,  count(*) FROM shop GROUP BY LOCATION 
 SELECT T2.Manager_name,  T2.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY sum(T1.Number_products) DESC LIMIT 1 
 SELECT T2.Manager_name,  T2.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY sum(T1.Number_products) DESC LIMIT 1 
 SELECT min(Number_products),  max(Number_products) FROM shop 
 SELECT min(Number_products),  max(Number_products) FROM shop 
 SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
 SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
 SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) 
 SELECT T2.Name FROM shop AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING avg(T1.Number_products)  >  (SELECT avg(Number_products) FROM shop) 
 SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY sum(T1.Bonus) DESC LIMIT 1 
 SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T1.Bonus DESC LIMIT 1 
 SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id 
 SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation) 
 SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) 
 SELECT name FROM shop WHERE district  =  "No employees" 
 SELECT T2.name,  count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id 
 SELECT T2.Shop_ID,  T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Shop_ID 
 SELECT sum(Bonus) FROM evaluation 
 SELECT sum(Bonus) FROM evaluation 
 SELECT * FROM hiring 
 SELECT * FROM hiring 
 SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000 
 SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(*) FROM Documents 
 SELECT count(*) FROM Documents 
 SELECT document_id,  document_name,  document_description FROM Documents 
 SELECT document_id,  document_name,  document_description FROM Documents 
 SELECT T1.document_name,  T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_description LIKE '%w%' 
 SELECT T1.document_name,  T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_description LIKE '%w%' 
 SELECT document_id,  template_id,  document_description FROM Documents WHERE document_name  =  "Robbin CV" 
 SELECT T1.Document_ID,  T2.Template_ID,  T2.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T1.Document_name  =  "Robbin CV" 
 SELECT count(DISTINCT template_id) FROM Documents 
 SELECT count(DISTINCT document_id) FROM Documents 
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Description  =  "PPT" 
 SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Description  =  "PPT" 
 SELECT T1.template_id,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id 
 SELECT document_id,  count(*) FROM Documents GROUP BY document_id 
 SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(*)  >  1 
 SELECT T1.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id HAVING count(*)  >  1 
 SELECT template_id FROM Templates EXCEPT SELECT document_id FROM Documents 
 SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents 
 SELECT count(*) FROM Templates 
 SELECT count(*) FROM Templates 
 SELECT template_id,  version_number,  template_type_code FROM Templates 
 SELECT template_id,  version_number,  template_type_code FROM Templates 
 SELECT DISTINCT template_type_code FROM Templates 
 SELECT DISTINCT template_type_code FROM Ref_Template_Types 
 SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT" 
 SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT" 
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV" 
 SELECT count(*) FROM Templates WHERE template_type_code  =  "CV" 
 SELECT T2.version_number,  T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.version_number  >  5 
 SELECT T2.version_number,  T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.version_number  >  5 
 SELECT template_type_code,  count(*) FROM Templates GROUP BY template_type_code 
 SELECT template_type_code,  count(*) FROM Ref_templates GROUP BY template_type_code 
 SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.template_type_code FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.template_type_code  =  t2.template_type_code GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3 
 SELECT template_type_code FROM Ref_Template_Types GROUP BY template_type_code HAVING count(*)  <  3 
 SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code 
 SELECT min(version_number),  template_type_code FROM Templates GROUP BY template_type_code 
 SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T3.template_id  =  T2.template_id WHERE T3.document_name  =  "Data base" 
 SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.document_name  =  "Data base" 
 SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  "BK" 
 SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  "BK" 
 SELECT T1.Template_Type_Code,  count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code 
 SELECT template_type_code,  count(*) FROM Documents GROUP BY template_type_code 
 SELECT t1.template_type_code FROM Ref_Template_Types AS t1 JOIN Documents AS t2 ON t1.template_type_code  =  t2.template_type_code GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.template_type_code FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.template_type_code  =  t2.template_type_code GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Documents 
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types 
 SELECT template_type_code,  template_type_description FROM Ref_Template_Types 
 SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  "AD" 
 SELECT t2.template_type_description FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.template_type_code  =  t2.template_type_code WHERE t1.template_type_code  =  "AD" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description  =  "Book" 
 SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_description 
 SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_id IN (SELECT template_id FROM Documents) 
 SELECT template_id FROM Templates WHERE template_type_description  =  "Presentation" 
 SELECT template_id FROM Templates WHERE template_type_description  =  'Presentation' 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_name  =  "Summer Show" 
 SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_name  =  "Summer Show" 
 SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text  =  "Korea " 
 SELECT T2.template_details FROM Paragraphs AS T1 JOIN Templates AS T2 ON T1.document_id  =  T2.template_id WHERE T1.paragraph_text  =  'Korea' 
 SELECT T1.Paragraph_ID,  T2.Paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_name  =  'Welcome to NY' 
 SELECT T1.Paragraph_ID,  T2.Paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_name  =  'Welcome to NY' 
 SELECT T2.Paragraph_text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_id  =  T2.Document_id WHERE T1.document_name  =  "Customer reviews" 
 SELECT T2.Paragraph_text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_id  =  T2.Document_id WHERE T1.document_name  =  'Customer reviews' 
 SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT document_id,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY count(*) DESC 
 SELECT document_id,  count(*),  count(*) FROM Paragraphs GROUP BY document_id 
 SELECT document_id,  document_name,  count(*) FROM Documents GROUP BY document_id 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2 
 SELECT document_id,  document_name FROM Paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id,  document_name FROM Documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) LIMIT 1 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' UNION SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland' 
 SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland' 
 SELECT count(*) FROM teacher 
 SELECT count(*) FROM teacher 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Age,  Hometown FROM teacher 
 SELECT Age,  Hometown FROM teacher 
 SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
 SELECT Name FROM teacher EXCEPT SELECT T2.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.Hometown!= "Little Lever Urban District" 
 SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
 SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
 SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T1.age LIMIT 1 
 SELECT Hometown,  COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,  count(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(*)  >=  2 
 SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(*)  >=  2 
 SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
 SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
 SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name ASC 
 SELECT T2.Name,  T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name ASC 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.Course  =  "Math" 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.Course  =  "Math" 
 SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID 
 SELECT T2.Name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2 
 SELECT Name FROM teacher EXCEPT SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
 SELECT Name FROM teacher EXCEPT SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID 
 SELECT count(*) FROM visitor WHERE Age  <  30 
 SELECT Name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC 
 SELECT avg(T2.Age) FROM visitor AS T1 JOIN museum AS T2 ON T1.ID  =  T2.Name WHERE T1.Level_of_membership  <  4 
 SELECT Name,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY Age DESC 
 SELECT T1.Museum_ID,  T1.Name FROM museum AS T1 JOIN visitor AS T2 ON T1.Museum_ID  =  T2.ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(Num_of_Staff) FROM museum WHERE open_year  <  2009 
 SELECT open_year,  num_of_staff FROM museum WHERE name  =  "Plaza Museum" 
 SELECT Name FROM museum WHERE Num_of_Staff  >  (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year  >  2010) 
 SELECT T1.id,  T1.name,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T1.id HAVING count(*)  >  1 
 SELECT T1.id,  T1.name,  T1.level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T1.id ORDER BY sum(T2.num_of_ticket) DESC LIMIT 1 
 SELECT T1.Museum_ID,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit) 
 SELECT T2.Name,  T2.Age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID GROUP BY T1.visitor_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(Num_of_Ticket),  max(Num_of_Ticket) FROM visit 
 SELECT sum(T1.Total_spent) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID WHERE T1.Level_of_membership  =  1 
 SELECT T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.Open_Year  <  2011 INTERSECT SELECT T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.Open_Year  >  2009 
 SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE museum_id  >  2010) 
 SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches 
 SELECT count(*) FROM matches 
 SELECT first_name,  birth_date FROM players WHERE country_code  =  "USA" 
 SELECT first_name,  birth_date FROM players WHERE country_code  =  "USA" 
 SELECT avg(loser_age),  avg(winner_age) FROM matches 
 SELECT avg(loser_age),  avg(winner_age) FROM matches 
 SELECT avg(winner_rank) FROM matches 
 SELECT avg(winner_rank) FROM matches 
 SELECT loser_rank FROM matches GROUP BY loser_rank ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.loser_rank FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id GROUP BY T1.loser_rank ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
 SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016 
 SELECT T1.first_name,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT T1.first_name,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016 
 SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 
 SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 
 SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  "WTA Championships" INTERSECT SELECT T1.country_code,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  "Australian Open" 
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  "WTA Championships" INTERSECT SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  "Australian Open" 
 SELECT first_name,  country_code FROM players ORDER BY birth_date DESC LIMIT 1 
 SELECT first_name,  country_code FROM players ORDER BY birth_date DESC LIMIT 1 
 SELECT first_name,  last_name FROM players ORDER BY birth_date 
 SELECT first_name,  last_name FROM players ORDER BY birth_date 
 SELECT first_name,  last_name FROM players WHERE hand  =  "Left" ORDER BY birth_date 
 SELECT first_name,  last_name FROM players WHERE hand  =  'Left' ORDER BY birth_date 
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.winner_name,  T1.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.winner_name,  T1.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id JOIN tournaments AS T3 ON T1.tourney_id  =  T3.tourney_id WHERE T3.tourney_name  =  "Australian Open" ORDER BY T1.winner_rank_points DESC LIMIT 1 
 SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id  =  T2.player_id JOIN tournaments AS T3 ON T1.tourney_id  =  T3.tourney_id WHERE T3.tourney_name  =  "Australian Open" GROUP BY T1.winner_id ORDER BY sum(T2.winner_rank_points) DESC LIMIT 1 
 SELECT T1.loser_name,  T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id  =  T2.player_id GROUP BY T1.loser_id ORDER BY sum(T1.minutes) DESC LIMIT 1 
 SELECT T1.winner_name,  T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.match_num  =  (SELECT max(match_num) FROM matches) 
 SELECT avg(ranking),  first_name FROM players GROUP BY first_name 
 SELECT first_name,  avg(ranking) FROM rankings GROUP BY first_name 
 SELECT T1.ranking_points,  T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id 
 SELECT T1.first_name,  T1.first_name,  T1.last_name,  T1.total_ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name 
 SELECT country_code,  count(*) FROM players GROUP BY country_code 
 SELECT country_code,  count(*) FROM players GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 
 SELECT count(*),  ranking_date FROM rankings GROUP BY ranking_date 
 SELECT ranking,  count(*) FROM rankings GROUP BY ranking_date 
 SELECT count(*),  YEAR FROM matches GROUP BY YEAR 
 SELECT year,  count(*) FROM matches GROUP BY year 
 SELECT T1.winner_name,  T1.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.winner_id ORDER BY T1.winner_age LIMIT 3 
 SELECT T1.winner_name,  T1.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T1.winner_age LIMIT 3 
 SELECT count(DISTINCT winner_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  "Left" AND T2.match_num  >  1 AND T2.match_num  <  8 AND T2.tourney_name  =  "WTA Championships" 
 SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T1.hand  =  "Left" AND T2.match_num  =  1 AND T2.tourney_name  =  "WTA Championships" 
 SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.first_name,  T1.country_code,  T1.birth_date ORDER BY T2.winner_rank_points DESC LIMIT 1 
 SELECT T1.first_name,  T1.country_code,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id GROUP BY T1.player_id ORDER BY sum(T2.winner_rank_points) DESC LIMIT 1 
 SELECT hand,  count(*) FROM players GROUP BY hand 
 SELECT hand,  count(*) FROM players GROUP BY hand 
 SELECT count(*) FROM ship WHERE location  =  'Captured' 
 SELECT name,  tonnage FROM ship ORDER BY name DESC 
 SELECT name,  date,  result FROM battle 
 SELECT max(killed),  min(injured),  note FROM death GROUP BY note 
 SELECT injured FROM death GROUP BY injured ORDER BY avg(injured) DESC 
 SELECT note,  injured FROM death WHERE tonnage  =  "t"; 
 SELECT name,  result FROM battle WHERE bulgarian_commander!= 'Boril' 
 SELECT DISTINCT T1.id,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig' 
 SELECT T1.id,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING sum(killed)  >  10 
 SELECT caused_by_ship_id,  name FROM death GROUP BY caused_by_ship_id ORDER BY sum(injured) DESC LIMIT 1 
 SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.bulgarian_commander  =  'Kaloyan' INTERSECT SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.bulgarian_commander  =  'Baldwin I' 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage  =  225) 
 SELECT T1.name,  T1.date FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.name  =  'Lettice' INTERSECT SELECT T1.name,  T1.date FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle  =  T2.id WHERE T1.name  =  'HMS Atalanta' 
 SELECT name,  result,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT id FROM ship WHERE location  =  'English Channel') 
 SELECT note FROM death WHERE note LIKE "%East%" 
 SELECT * FROM addresses WHERE line_1  =  "Line 1" AND line_2  =  "Line 2" 
 SELECT T1.line_1,  T1.line_2 FROM addresses AS T1 
 SELECT count(*) FROM Courses 
 SELECT count(*) FROM Courses 
 SELECT course_description FROM Courses WHERE course_name  =  "Math"; 
 SELECT course_description FROM Courses WHERE course_name  =  "Math" 
 SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea"; 
 SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea"; 
 SELECT T1.department_name,  T1.department_id FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.department_name,  T1.department_id FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAAMS AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM DEPARTMENTS WHERE department_name NOT IN (SELECT T1.department_name FROM DEPARTMENTS AS T1 JOIN DEGREE_PROGRAMS AS T2 ON T1.department_id  =  T2.department_id) 
 SELECT count(DISTINCT department_name) FROM DEGREE_PROGRAMS 
 SELECT count(DISTINCT degree_name) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(*) FROM DEGREE_PROGRAMS AS T1 JOIN DEPARTMENTS AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  "Engineering"; 
 SELECT count(*) FROM DEGREE_PROGRAMS AS T1 JOIN DEPARTMENTS AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  "Engineering" 
 SELECT T1.section_name,  T1.section_description FROM Sections AS T1 
 SELECT T1.section_name,  T1.section_description FROM Sections AS T1 
 SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2 
 SELECT course_name,  course_id FROM Courses GROUP BY course_id HAVING count(*)  <  2 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT T1.semester_name,  T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.semester_name,  T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.department_description FROM DEPARTMENTS AS T1 JOIN DEPARTMENT_DETAILS AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name LIKE "%the computer%" 
 SELECT T1.department_description FROM DEPARTMENTS AS T1 JOIN DEPARTMENT_DETAILS AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name LIKE '%computer%' 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  1 GROUP BY T1.first_name,  T1.middle_name,  T1.last_name HAVING count(*)  =  2 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  T2.degree_program_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  1 GROUP BY T1.student_id 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.degree_program_id  =  1 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE degree_program_id  =  1 
 SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,  T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Degree_Programs_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.student_id,  T1.first_name,  T1.middle_name,  T1.last_name,  count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name,  count(*),  T2.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT DISTINCT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_name HAVING count(*)  =  0 
 SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IS NULL 
 SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment) 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*)  >  0 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  0 AND T1.current_address_id  =  1 EXCEPT SELECT T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  0 AND T1.permanent_address_id  =  1 
 SELECT T1.last_name FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county  =  "North Carolina" EXCEPT SELECT T1.last_name FROM students AS T1 JOIN degree_programs AS T2 ON T1.student_id  =  T2.student_id 
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2 
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2 
 SELECT t1.cell_mobile_number FROM students AS t1 JOIN students AS t2 ON t1.permanent_address_id  =  t2.permanent_address_id WHERE t1.first_name  =  "Timmothy" AND t1.last_name  =  "Ward"; 
 SELECT T1.cell_mobile_number FROM Students AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  "Timmothy" AND T2.last_name  =  "Ward"; 
 SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered LIMIT 1 
 SELECT T1.first_name,  T1.middle_name,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_first_registered LIMIT 1 
 SELECT first_name,  middle_name,  last_name FROM students WHERE date_first_registered  =  ( SELECT min(date_first_registered) FROM students ) 
 SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_first_registered LIMIT 1 
 SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.line_1 !=  T1.current_address_id 
 SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.line_1 !=  T1.current_address_id 
 SELECT T1.address_id,  T1.line_1,  T1.line_2,  T1.line_3 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.address_id,  T1.line_1,  T1.line_2 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT T1.transcript_date,  T1.transcript_details FROM Transcripts AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  1 
 SELECT T1.transcript_date,  T1.other_details FROM Transcripts AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id WHERE T1.transcript_id  =  (SELECT transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY transcript_date ASC LIMIT 1) 
 SELECT count(*) FROM Transcripts 
 SELECT count(*) FROM Transcripts 
 SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT count(*),  T1.course_id FROM student_enrolment AS T1 JOIN student_course_id AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  >=  1 
 SELECT max(T1.student_course_id),  T1.student_course_id FROM student_enrolment AS T1 JOIN student_course_id AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.student_course_id 
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT T1.transcript_date,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1 
 SELECT DISTINCT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.student_id  =  1 INTERSECT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id WHERE T2.student_id  =  2 
 SELECT T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_program_name  =  "Masters" INTERSECT SELECT degree_program_id FROM degree_programs WHERE degree_program_name  =  "Bachelors") 
 SELECT count(DISTINCT current_address_id) FROM students 
 SELECT DISTINCT T1.address_id FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id 
 SELECT * FROM Students ORDER BY last_name DESC 
 SELECT other_details FROM students ORDER BY other_details DESC 
 SELECT section_name FROM Sections WHERE section_description  =  "H"; 
 SELECT section_description FROM Sections WHERE section_name  =  "h"; 
 SELECT first_name FROM students WHERE permanent_address_id  =  1 OR cell_mobile_number  =  "09700166582" 
 SELECT first_name FROM students WHERE permanent_address_id  =  1 OR cell_mobile_number  =  "09700166582" 
 SELECT title FROM Cartoon ORDER BY title 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Directed_by  =  "Ben Jones" 
 SELECT T2.Title FROM Cartoon AS T1 JOIN BEN_JONES ON T1.Directed_by  =  T1.Directed_by WHERE T1.Written_by  =  T1.Written_by 
 SELECT count(*) FROM Cartoon WHERE Written_by  =  "Joseph Kuhr"; 
 SELECT count(*) FROM Cartoon AS T1 JOIN Written_by AS T2 ON T1.id  =  T2.id WHERE T2.Written_by  =  "Joseph Kuhr" 
 SELECT title,  directed_by FROM Cartoon ORDER BY original_air_date 
 SELECT T1.Title,  T2.Directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id ORDER BY T1.Original_air_date 
 SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Directed_by  =  "Ben Jones" OR T1.Directed_by  =  "Brandon Vietti" 
 SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Directed_by  =  "Ben Jones" OR T1.Directed_by  =  "Brandon Vietti" 
 SELECT Country,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT Country,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT series_name),  count(DISTINCT content) FROM TV_channel 
 SELECT count(DISTINCT series_name,  content) FROM TV_channel 
 SELECT content FROM TV_channel WHERE series_name  =  "Sky Radio" 
 SELECT content FROM TV_channel WHERE name  =  "Sky Radio"; 
 SELECT package_option FROM TV_channel WHERE series_name  =  "Sky Radio" 
 SELECT package_option FROM TV_channel WHERE series_name  =  "Sky Radio" 
 SELECT count(*) FROM TV_channel WHERE language  =  'English' 
 SELECT count(*) FROM TV_channel WHERE language  =  "English" 
 SELECT Language,  COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1 
 SELECT T2.language,  count(*) FROM TV_channel AS T1 JOIN TV_channel AS T2 ON T1.id  =  T2.id GROUP BY T2.language ORDER BY count(*) ASC LIMIT 1 
 SELECT Language,  COUNT(*) FROM TV_Channel GROUP BY Language 
 SELECT Language,  COUNT(*) FROM TV_Channel GROUP BY Language 
 SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id WHERE T1.Title  =  "The Rise of the Blue Beetle!"; 
 SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id WHERE T1.title  =  "The Rise of the Blue Beetle" 
 SELECT T2.Title FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Series_name  =  "Sky Radio" 
 SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.Series_name  =  "Sky Radio" 
 SELECT Episode FROM TV_series ORDER BY Rating DESC 
 SELECT Episode FROM TV_series ORDER BY Rating DESC 
 SELECT episode,  rating FROM TV_series ORDER BY rating DESC LIMIT 3 
 SELECT T1.episode,  T1.rating FROM TV_series AS T1 JOIN episodes AS T2 ON T1.id  =  T2.id GROUP BY T1.episode ORDER BY avg(T1.rating) DESC LIMIT 3 
 SELECT min(share),  max(share) FROM TV_series 
 SELECT max(share),  min(share) FROM TV_series 
 SELECT T2.airsate FROM TV_series AS T1 JOIN episode AS T2 ON T1.id  =  T2.episode WHERE T2.episode  =  "A Love of a Lifetime" 
 SELECT Air_Date FROM TV_series WHERE Episode  =  "A Love of a Lifetime"; 
 SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN Episode AS T2 ON T1.id  =  T2.episode WHERE T2.episode  =  "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode  =  "A Love of a Lifetime"; 
 SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id WHERE T1.episode  =  "A Love of a Lifetime" 
 SELECT T2.series_name FROM TV_series AS T1 JOIN episodes AS T2 ON T1.id  =  T2.episode WHERE T2.episode  =  "A Love of a Lifetime" 
 SELECT T1.EPISODE FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.Series_name  =  "Sky Radio" 
 SELECT T1.EPISODE FROM TV_series AS T1 JOIN EPISODE AS T2 ON T1.id  =  T2.Series_name WHERE T1.Series_name  =  "Sky Radio" 
 SELECT COUNT (DISTINCT directed_by),  directed_by FROM Cartoon GROUP BY directed_by 
 SELECT directed_by,  count(*) FROM Cartoon GROUP BY directed_by 
 SELECT production_code,  channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT production_code,  channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT t2.package_option,  t1.series_name FROM TV_channel AS t1 JOIN TV_series AS t2 ON t1.id  =  t2.channel GROUP BY t2.package_option HAVING t2.hight_definition_TV  >  0 
 SELECT T2.Package_Option,  T1.Series_name FROM TV_channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.channel WHERE T1.Hight_definition_TV  =  1 
 SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  "Todd Casey" 
 SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Written_by  =  "Todd Casey" 
 SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Written_by  =  "Todd Casey" 
 SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM Cartoon WHERE Written_by  =  "Todd Casey" 
 SELECT T2.series_name,  T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id JOIN TV_series AS T3 ON T3.id  =  T1.id WHERE T1.directed_by  =  "Ben Jones" INTERSECT SELECT T2.series_name,  T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.channel  =  T2.id JOIN TV_series AS T3 ON T3.id  =  T1.id WHERE T1.directed_by  =  "Michael Chang" 
 SELECT T1.title,  T1.country FROM Cartoon AS T1 JOIN TV_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Ben Jones" INTERSECT SELECT T1.title,  T1.country FROM Cartoon AS T1 JOIN TV_channel AS T2 ON T1.channel  =  T2.id WHERE T1.directed_by  =  "Michael Chang" 
 SELECT t1.pixel_aspect_ratio_PAR,  t1.Country FROM TV_Channel AS t1 JOIN CHANNEL AS t2 ON t1.id  =  t2.id WHERE t2.language!= "English" 
 SELECT pixel_aspect_ratio_PAR,  Country FROM TV_Channel WHERE Language!= "English" 
 SELECT t1.id FROM TV_channel AS t1 JOIN TV_channel AS t2 ON t1.id  =  t2.id GROUP BY t1.id HAVING count(*)  >  2 
 SELECT id FROM TV_channel GROUP BY id HAVING count(*)  >  2 
 SELECT id FROM TV_channel WHERE channel NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  "Ben Jones") 
 SELECT id FROM TV_channel WHERE directed_by!= "Ben Jones" 
 SELECT package_option FROM TV_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  "Ben Jones") 
 SELECT package_option FROM TV_channel WHERE channel NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  "Ben Jones") 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT T1.Final_Table_Made,  T2.Best_Finish FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID 
 SELECT Final_Table_Made,  Best_Finish FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT max(T1.Best_Finish) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  <  200000 
 SELECT max(T1.Final_Table_Made) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  <  200000 
 SELECT Name FROM people 
 SELECT Name FROM people 
 SELECT Name FROM people WHERE Earnings  >  300000 
 SELECT Name FROM people WHERE Earnings  >  300000 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC 
 SELECT Birth_Date FROM people ORDER BY Earnings ASC LIMIT 1 
 SELECT Birth_Date FROM people ORDER BY Earnings ASC LIMIT 1 
 SELECT Money_Rank FROM people ORDER BY Height DESC LIMIT 1 
 SELECT Money_Rank FROM people ORDER BY Height DESC LIMIT 1 
 SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
 SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
 SELECT Name FROM people ORDER BY Earnings DESC 
 SELECT Name FROM people ORDER BY Earnings DESC 
 SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
 SELECT Name,  Birth_Date FROM people ORDER BY Name ASC 
 SELECT Name,  Birth_Date FROM people ORDER BY Name 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people EXCEPT SELECT T2.Name FROM people AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE Nationality  =  "Russia" 
 SELECT Name FROM people EXCEPT SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID 
 SELECT Name FROM people EXCEPT SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT state) FROM area_code_state 
 SELECT contestant_number,  contestant_name FROM contestants ORDER BY contestant_name DESC 
 SELECT vote_id,  phone_number,  state FROM VOTES 
 SELECT max(area_code),  min(area_code) FROM AREA_CODE_STATE 
 SELECT created FROM votes WHERE state  =  'CA' 
 SELECT contestant_name FROM contestants EXCEPT SELECT T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Jessie Alloway' 
 SELECT DISTINCT state,  created FROM VOTES 
 SELECT T1.contestant_number,  T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2 
 SELECT T1.contestant_number,  T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1 
 SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA' 
 SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes) 
 SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.created,  T2.state,  T2.phone_number FROM votes AS T1 JOIN area_code_state AS T2 ON T1.state  =  T2.state WHERE T1.contestant_name  =  'Tabatha Gehling' 
 SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_number  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.area_code  =  T2.state WHERE T2.contestant_number  =  'Kelly Clauss' 
 SELECT T2.contestant_name FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T2.contestant_name LIKE '%Al%' 
 SELECT name FROM country WHERE indepyear  >  1950 
 SELECT name FROM country WHERE indepyear  >  1950 
 SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic" 
 SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic" 
 SELECT sum(surfaceArea) FROM country WHERE region  =  'Caribbean' 
 SELECT surfaceArea FROM country WHERE region  =  'Caribbean' 
 SELECT Continent FROM country WHERE Name  =  "Anguilla"; 
 SELECT t3.continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode JOIN city AS t3 ON t1.code  =  t3.countrycode WHERE t1.name  =  "Anguilla" 
 SELECT region FROM city WHERE name  =  "Kabul"; 
 SELECT region FROM city WHERE name  =  "Kabul"; 
 SELECT t1.language FROM countrylanguage AS t2 JOIN country AS t1 ON t2.countrycode  =  t1.code WHERE t1.name  =  "Aruba" GROUP BY t1.language ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.language FROM country AS t2 JOIN countrylanguage AS t1 ON t2.code  =  t1.countrycode WHERE t2.name  =  "Aruba"; 
 SELECT population,  lifeexpectancy FROM country WHERE name  =  "Brazil"; 
 SELECT population,  lifeexpectancy FROM country WHERE name  =  'Brazil'; 
 SELECT region,  population FROM country WHERE name  =  "Angola"; 
 SELECT region,  population FROM country WHERE name  =  'Angola'; 
 SELECT avg(T1.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  "Central Africa" 
 SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"; 
 SELECT name FROM country WHERE continent  =  'Asia' ORDER BY lifeexpectancy LIMIT 1 
 SELECT name FROM country WHERE continent  =  'Asia' ORDER BY lifeexpectancy LIMIT 1 
 SELECT sum(population),  max(gnp) FROM country WHERE region  =  'Asia' 
 SELECT t1.population,  t2.gnp FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t1.region  =  'Asia' GROUP BY t2.gnp ORDER BY t2.gnp DESC LIMIT 1 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Africa" AND T2.IsOfficial  =  "Yes" 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Africa" AND T2.IsOfficial  =  "Yes" 
 SELECT sum(surfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe' 
 SELECT sum(surfaceArea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe' 
 SELECT population FROM city WHERE district  =  "Gelderland"; 
 SELECT sum(population) FROM city WHERE district  =  "Gelderland"; 
 SELECT avg(GNP),  sum(Population) FROM country WHERE Code IN ( SELECT Code FROM country WHERE GovernmentForm  =  "US" ) 
 SELECT avg(GNP),  sum(Population) FROM country WHERE CountryCode IN ( SELECT CountryCode FROM country WHERE Continent  =  'North America' ); 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent  =  'Africa'; 
 SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa' 
 SELECT sum(percentage) FROM countrylanguage WHERE countrycode  =  "aruba"; 
 SELECT count(*) FROM countrylanguage WHERE countrycode  =  "aruba"; 
 SELECT count(*) FROM countrylanguage WHERE countrycode  =  "AFG" AND isofficial  =  "yes"; 
 SELECT count(*) FROM countrylanguage WHERE countrycode  =  "AFG" AND isofficial  =  "yes"; 
 SELECT name FROM country WHERE name IN ( SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode GROUP BY t1.name ORDER BY sum(t2.percentage) DESC LIMIT 1 ) 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode GROUP BY t1.name ORDER BY sum(t2.percentage) DESC LIMIT 1 
 SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM countrylanguage WHERE language  =  'English' INTERSECT SELECT count(*) FROM countrylanguage WHERE language  =  'Dutch' 
 SELECT count(*) FROM countrylanguage WHERE language  =  'English' INTERSECT SELECT count(*) FROM countrylanguage WHERE language  =  'Dutch' 
 SELECT name FROM country WHERE name IN ( SELECT countrycode FROM country WHERE language  =  'english' INTERSECT SELECT countrycode FROM country WHERE language  =  'french' ) 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'French' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'French' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'French' 
 SELECT count(DISTINCT continent) FROM country WHERE name  =  "China" AND language  =  "Chinese"; 
 SELECT count(*) FROM country WHERE name  =  'China' AND continent  =  'Asia'; 
 SELECT region FROM country WHERE name IN ( SELECT t1.region FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' UNION SELECT t1.region FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Dutch' ) 
 SELECT region FROM country WHERE name IN ( SELECT t1.region FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Dutch' OR t2.language  =  'English' ) 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' OR t2.language  =  'Dutch' 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'English' OR t2.language  =  'Dutch' 
 SELECT t1.language FROM countrylanguage AS t2 JOIN country AS t1 ON t2.countrycode  =  t1.code WHERE t1.continent  =  'Asia' GROUP BY t1.language ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Asia' GROUP BY t1.language ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t2 JOIN country AS t1 ON t2.countrycode  =  t1.code WHERE t1.code IN ( SELECT countrycode FROM country WHERE governmentform  =  "republic" GROUP BY countrycode HAVING count(*)  =  1 ) 
 SELECT t1.language FROM countrylanguage AS t2 JOIN country AS t1 ON t2.countrycode  =  t1.code WHERE t1.governmentform  =  "Republic" GROUP BY t1.language HAVING count(*)  =  1 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code JOIN countrylanguage AS t3 ON t2.code  =  t3.countrycode WHERE t3.language  =  'English' ORDER BY t1.population DESC LIMIT 1 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code JOIN countrylanguage AS t3 ON t2.code  =  t3.countrycode WHERE t3.language  =  'english' GROUP BY t1.name ORDER BY sum(population) DESC LIMIT 1; 
 SELECT name,  population,  lifeexpectancy FROM country WHERE region  =  'Asia' ORDER BY surfacearea DESC LIMIT 1; 
 SELECT name,  population,  lifeexpectancy FROM country WHERE continent  =  'Asia' ORDER BY surfacearea DESC LIMIT 1; 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language!= 'English' 
 SELECT avg(T2.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language!= 'English' 
 SELECT sum(population) FROM city WHERE countrycode NOT IN ( SELECT countrycode FROM country WHERE language  =  'english' ); 
 SELECT count(*) FROM country WHERE name NOT IN ( SELECT countrycode FROM country WHERE language  =  'english' ); 
 SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t1.headofstate  =  'Beatrix' 
 SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t1.headofstate  =  'Beatrix' 
 SELECT count(DISTINCT t1.language) FROM country AS t2 JOIN countrylanguage AS t1 ON t2.code  =  t1.countrycode WHERE t2.indepyear  <  1930 GROUP BY t1.language 
 SELECT count(DISTINCT t1.language) FROM country AS t2 JOIN countrylanguage AS t1 ON t2.code  =  t1.countrycode WHERE t2.foundingyear  <  1930 
 SELECT name FROM country WHERE surfacearea  >  (SELECT surfacearea FROM country WHERE continent  =  'Europe') 
 SELECT name FROM country WHERE surfacearea  >  (SELECT surfacearea FROM country WHERE continent  =  'Europe') 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'African' AND t1.population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia') 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t1.continent  =  'Africa' AND t2.percentage  <  50 AND t1.population  <  (SELECT min(population) FROM country WHERE continent  =  'Asia') 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Asian' AND t1.population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa') 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Asian' AND t1.population  >  (SELECT max(population) FROM country WHERE continent  =  'Africa') 
 SELECT CountryCode FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' ) 
 SELECT CountryCode FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' ) 
 SELECT CountryCode FROM countrylanguage WHERE Language!= 'English' 
 SELECT CountryCode FROM countrylanguage WHERE Language!= "English" 
 SELECT code2 FROM country EXCEPT SELECT code2 FROM country WHERE IsOfficial  =  'Yes' AND governmentform  =  'Republic' 
 SELECT countrycode FROM country EXCEPT SELECT countrycode FROM country WHERE governmentform  =  "Republics" AND language  =  "English" 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Europe' EXCEPT SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Europe' AND t2.language  =  'English' 
 SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Europe' EXCEPT SELECT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Europe' AND t2.language  =  'English' 
 SELECT DISTINCT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code WHERE t2.continent  =  'Asia' AND t2.language  =  'Chinese' GROUP BY t1.name 
 SELECT DISTINCT t1.name FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code JOIN countrylanguage AS t3 ON t2.code  =  t3.countrycode WHERE t2.name  =  'Asia' AND t3.language  =  'Chinese' 
 SELECT name,  indepyear,  surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT name,  indepyear,  surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT t1.population,  t1.name,  t1.headofstate FROM city AS t1 JOIN country AS t2 ON t1.countrycode  =  t2.code ORDER BY t2.surfacearea DESC LIMIT 1 
 SELECT name,  population,  head_of_state FROM country ORDER BY surface_area DESC LIMIT 1 
 SELECT t1.name,  count(*) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode GROUP BY t1.name HAVING count(*)  >=  3 
 SELECT T2.name,  count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode GROUP BY T1.code HAVING count(*)  >  2 
 SELECT T1.District,  COUNT(*) FROM city AS T1 JOIN city AS T2 ON T1.District  =  T2.District WHERE T1.Population  >  (SELECT avg(population) FROM city) GROUP BY T1.District 
 SELECT T2.District,  T1.Population FROM city AS T1 JOIN city AS T2 ON T1.District  =  T2.District GROUP BY T1.District HAVING avg(T1.Population)  >  (SELECT avg(T1.Population) FROM city) 
 SELECT governmentform,  avg( LifeExpectancy ),  sum(population) FROM country GROUP BY governmentform HAVING avg( LifeExpectancy )  >  72 
 SELECT sum(T1.Population),  T2.HeadOfState FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T2.HeadOfState HAVING avg(T1.LifeExpectancy)  >  72 
 SELECT avg(LifeExpectancy),  sum(Population),  continent FROM country GROUP BY continent HAVING avg(LifeExpectancy)  <  72 
 SELECT T1.Continent,  avg(T2.LifeExpectancy),  sum(T2.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent HAVING avg(T2.LifeExpectancy)  <  72 
 SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name,  surface_area FROM country ORDER BY surface_area DESC LIMIT 5 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT name FROM city GROUP BY name ORDER BY count(*) DESC LIMIT 3 
 SELECT count(*) FROM country WHERE continent  =  'Asia'; 
 SELECT count(*) FROM country WHERE continent  =  'Asia' 
 SELECT name FROM country WHERE continent  =  'Europe' AND population  =  80000; 
 SELECT name FROM country WHERE continent  =  'Europe' AND population  =  80000; 
 SELECT sum(population),  avg(surfaceArea) FROM country WHERE continent  =  'North America' AND surfaceArea  >  3000; 
 SELECT sum(population),  avg(surfaceArea) FROM country WHERE continent  =  'North America' AND surfaceArea  >  3000; 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000; 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000; 
 SELECT t1.language FROM countrylanguage AS t2 JOIN country AS t1 ON t2.countrycode  =  t1.code GROUP BY t2.language ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.language FROM countrylanguage AS t2 JOIN language AS t1 ON t2.language  =  t1.code GROUP BY t2.language ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.name,  t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode GROUP BY t1.name ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT T2.CountryCode,  T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code GROUP BY T1.CountryCode ORDER BY SUM(T1.Percentage) DESC LIMIT 1 
 SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Spanish' GROUP BY t1.name ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT count(*) FROM countrylanguage WHERE language  =  'Spanish' 
 SELECT t1.code FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code  =  t2.countrycode WHERE t2.language  =  'Spanish' GROUP BY t1.code ORDER BY sum(percentage) DESC LIMIT 1 
 SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Spanish' 
 SELECT count(*) FROM conductor 
 SELECT count(*) FROM conductor 
 SELECT Name FROM conductor ORDER BY Age ASC 
 SELECT Name FROM conductor ORDER BY Age 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC 
 SELECT avg(Attendance) FROM show 
 SELECT avg(Attendance) FROM show 
 SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT count(DISTINCT Nationality) FROM conductor 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 
 SELECT T2.Name FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Name,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID 
 SELECT T1.Name,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID 
 SELECT T2.Name FROM conductor AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING count(*)  >  1 
 SELECT T2.Name FROM conductor AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID JOIN orchestra AS T3 ON T1.Conductor_ID  =  T3.Conductor_ID GROUP BY T1.Name HAVING count(*)  >  1 
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008 
 SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T1.Year_of_Founded  >  2008 
 SELECT Record_Company,  COUNT(*) FROM orchestra GROUP BY Record_Company 
 SELECT Record_Company,  count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Major_Record_Format FROM orchestra ORDER BY count(*) ASC 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count(*) DESC 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra FROM orchestra EXCEPT SELECT T1.orchestra FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_ID  =  T2.orchestra_ID 
 SELECT Orchestra_ID FROM orchestra EXCEPT SELECT T1.Orchestra_ID FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID 
 SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE YEAR_OF_WORK  >  2003 
 SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED  >  2003 
 SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format  =  "CD" OR major_record_format  =  "DVD" 
 SELECT DISTINCT YEAR_OF_FOUNDED FROM ORCHESTRA GROUP BY YEAR_OF_FOUNDED HAVING COUNT(*)  >  1 
 SELECT DISTINCT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1 
 SELECT count(*) FROM Highschooler 
 SELECT count(*) FROM Highschooler 
 SELECT name,  grade FROM Highschooler 
 SELECT name,  grade FROM Highschooler 
 SELECT grade FROM Highschooler 
 SELECT grade FROM Highschooler 
 SELECT grade FROM Highschooler WHERE name  =  "Kyle"; 
 SELECT grade FROM Highschooler WHERE name  =  "Kyle" 
 SELECT name FROM Highschooler WHERE grade  =  10 
 SELECT name FROM Highschooler WHERE grade  =  10 
 SELECT ID FROM Highschooler WHERE name  =  "Kyle"; 
 SELECT id FROM highschooler WHERE name  =  "Kyle"; 
 SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 
 SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 
 SELECT grade,  count(*) FROM Highschooler GROUP BY grade 
 SELECT grade,  count(*) FROM Highschooler GROUP BY grade 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4 
 SELECT T1.student_id,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id  =  T2.id GROUP BY T1.student_id 
 SELECT count(DISTINCT friend_id),  student_id FROM Friend GROUP BY student_id 
 SELECT T1.name,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
 SELECT T1.name,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  3 
 SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING count(*)  >=  3) 
 SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id  =  T2.id WHERE T1.friend_id  =  1 AND T2.name  =  "Kyle" 
 SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id  =  T2.id WHERE T2.name  =  "Kyle" 
 SELECT count(DISTINCT friend_id) FROM Friend WHERE name  =  "Kyle" 
 SELECT count(*) FROM Friend WHERE friend_id  =  (SELECT ID FROM Friend WHERE student_id  =  Kyle) 
 SELECT student_id FROM highschooler EXCEPT SELECT T1.student_id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id 
 SELECT ID FROM Highschooler EXCEPT SELECT T1.id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id 
 SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) 
 SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) 
 SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >  1 INTERSECT SELECT T1.id FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id HAVING count(*)  >  1 
 SELECT T1.student_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id  =  T2.friend_id JOIN Likes AS T3 ON T2.friend_id  =  T3.liked_id WHERE T3.student_id  =  T1.id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >  1 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id HAVING count(*)  >  1 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN likes AS T3 ON T2.friend_id  =  T3.liked_id WHERE T3.student_id  =  T1.id INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id JOIN likes AS T3 ON T2.friend_id  =  T3.liked_id WHERE T3.liked_id  =  T1.id 
 SELECT count(*),  student_id FROM likes GROUP BY student_id 
 SELECT T1.student_id,  count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id  =  T2.id GROUP BY T1.student_id 
 SELECT T1.name,  COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id 
 SELECT T1.name,  count(*) FROM Highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id HAVING count(*)  >=  2 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.liked_id GROUP BY T1.id HAVING count(*)  >=  2 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  2 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id HAVING count(*)  >=  2 
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  "Kyle"; 
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  "Kyle" 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.friend_id GROUP BY T1.id 
 SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) 
 SELECT grade FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) 
 SELECT state FROM owners INTERSECT SELECT state FROM professionals 
 SELECT state FROM owners INTERSECT SELECT state FROM professionals 
 SELECT avg(age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY T1.dog_id HAVING count(*)  >  0 
 SELECT avg(age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.treatment_type_code  =  "Breed" GROUP BY T1.dog_id 
 SELECT T1.professional_id,  T1.last_name,  T1.cell_phone FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2 
 SELECT T1.professional_id,  T1.first_name,  T1.last_name,  T1.cell_phone FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2 UNION SELECT T1.professional_id,  T1.first_name,  T1.last_name,  T1.cell_phone FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.state  =  "Indiana" 
 SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.cost_of_treatment  <  1000 
 SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.cost_of_treatment  >  1000 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT first_name FROM owners EXCEPT SELECT first_name FROM dogs 
 SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code  =  T2.treatment_type_code WHERE T2.treatment_type_code  =  "none" GROUP BY T1.professional_id HAVING count(*)  =  0 
 SELECT T1.professional_id,  T1.role_code,  T1.email_address FROM Professionals AS T1 JOIN Dogs AS T2 ON T1.professional_id  =  T2.owner_id WHERE T2.dog_id  =  NULL 
 SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 
 SELECT T1.professional_id,  T1.role_code,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 
 SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,  T1.first_name FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id  =  T2.professional_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,  T1.first_name,  T1.last_name FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id  =  T2.professional_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT treatment_type_description FROM treatment_types ORDER BY sum(cost_of_treatment) ASC LIMIT 1 
 SELECT treatment_type_description FROM treatment_types ORDER BY sum(cost_of_treatment) ASC LIMIT 1 
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,  T1.zip_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1 
 SELECT T1.professional_id,  T2.cell_phone FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code  =  T2.treatment_type_code GROUP BY T1.professional_id HAVING count(*)  >=  2 
 SELECT T1.professional_id,  T1.cell_number FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.role_code  =  T2.role_code GROUP BY T1.professional_id HAVING count(*)  >=  2 
 SELECT T1.first_name,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments) 
 SELECT first_name,  last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)) 
 SELECT T1.date_of_treatment,  T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id 
 SELECT T1.date_of_treatment,  T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id 
 SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM charges AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code 
 SELECT T1.cost_of_treatment,  T2.treatment_type_description FROM charges AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code 
 SELECT T1.first_name,  T1.last_name,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id 
 SELECT T1.first_name,  T1.last_name,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id 
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id 
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.name,  T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name,  T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  "Virginia" 
 SELECT T1.first_name,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE state  =  "Virginia" 
 SELECT T1.date_arrived,  T2.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id 
 SELECT T1.date_arrived,  T2.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id 
 SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1 
 SELECT t1.last_name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id  =  t2.owner_id ORDER BY t2.age LIMIT 1 
 SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin' 
 SELECT email_address FROM owners WHERE state  =  'Hawaii' OR state  =  'Wisconsin' 
 SELECT date_arrived,  date_departed FROM Dogs 
 SELECT date_arrived,  date_departed FROM Dogs 
 SELECT count(*) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id 
 SELECT count(*) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id 
 SELECT count(*) FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  0 
 SELECT count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id 
 SELECT T1.role_code,  T1.street,  T1.city,  T1.state FROM Professionals AS T1 JOIN city AS T2 ON T1.city  =  T2.city WHERE T2.city LIKE '%West%' 
 SELECT T1.role_code,  T1.street,  T1.city,  T1.state FROM Professionals AS T1 JOIN city AS T2 ON T1.city  =  T2.city WHERE T2.city LIKE '%West%' 
 SELECT first_name,  last_name,  email_address FROM owners WHERE state LIKE '%North%' 
 SELECT T1.first_name,  T1.last_name,  T1.email_address FROM owners AS T1 JOIN cities AS T2 ON T1.state  =  T2.state WHERE T2.state LIKE '%North%' 
 SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs) 
 SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs) 
 SELECT max(cost_of_treatment) FROM treatments 
 SELECT t1.cost_of_treatment FROM treatments AS t1 JOIN charges AS t2 ON t1.treatment_id  =  t2.treatment_id ORDER BY t1.date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments) 
 SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs) 
 SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments) 
 SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments) 
 SELECT T1.name,  T1.age,  T1.weight FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.abandoned_yn  =  1 
 SELECT T1.name,  T1.age,  T1.weight FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.abandoned_yn  =  1 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
 SELECT charge_type,  charge_amount FROM Charges 
 SELECT charge_type,  charge_amount FROM Charges 
 SELECT charge_amount FROM Charges ORDER BY cost_of_treatment DESC LIMIT 1 
 SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT email_address,  cell_number,  home_phone FROM Professionals 
 SELECT email_address,  cell_number,  home_phone FROM Professionals 
 SELECT DISTINCT T1.breed_name,  T2.size_description FROM breeds AS T1 JOIN sizes AS T2 ON T1.breed_code  =  T2.breed_code 
 SELECT DISTINCT T1.breed_name,  T2.size_description FROM breeds AS T1 JOIN sizes AS T2 ON T1.breed_code  =  T2.breed_code 
 SELECT T1.first_name,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id 
 SELECT T1.first_name,  T1.last_name,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id 
 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Birth_Year,  Citizenship FROM singer 
 SELECT Birth_Year,  Citizenship FROM singer 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
 SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
 SELECT T2.Title,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Sales  >  300000 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T1.Sales  >  300000 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*)  >  1 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*)  >  1 
 SELECT T2.Name,  sum(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name 
 SELECT T2.Title,  T1.Name,  COUNT(*) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Name 
 SELECT Name FROM singer EXCEPT SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
 SELECT Name FROM singer EXCEPT SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID 
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
 SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
 SELECT count(*) FROM Other_Available_Features 
 SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_name  =  "AirCon"; 
 SELECT property_type_description FROM Ref_Property_Types 
 SELECT T1.property_name FROM properties AS T1 JOIN other_property_features AS T2 ON T1.property_id  =  T2.property_id WHERE T1.property_name  =  "House" OR T1.property_name  =  "Apartment" AND T1.room_count  >  1 
