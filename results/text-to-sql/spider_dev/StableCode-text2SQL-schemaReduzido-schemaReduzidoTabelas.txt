 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT name,        country,        age FROM singer ORDER BY age DESC 
 SELECT name,        country,        age FROM singer ORDER BY age DESC 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = "France" 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = "France"   AND is_male = 0 
 SELECT singer.name,        singer.song_release_year FROM singer WHERE singer.age =     (SELECT min(age)      FROM singer) 
 SELECT singer.Name,        singer.Song_release_year FROM singer WHERE singer.age =     (SELECT min(age)      FROM singer) 
 SELECT DISTINCT country FROM singer WHERE age > 20   AND is_male = 1 
 SELECT DISTINCT country FROM singer WHERE age > 20 
 SELECT Country,        COUNT(*) FROM singer WHERE Is_male = 'T' GROUP BY Country 
 SELECT count(*),        country FROM singer WHERE is_male = 1 GROUP BY country 
 SELECT song_name FROM singer WHERE age >     (SELECT avg(age)      FROM singer) 
 SELECT Song_Name FROM singer WHERE Age >     (SELECT avg(Age)      FROM singer) 
 SELECT LOCATION,        NAME FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,        Name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),        avg(average) FROM stadium 
 SELECT avg(capacity),        max(capacity) FROM stadium 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT stadium.name,        count(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY concert.stadium_id 
 SELECT count(*),        stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name 
 SELECT stadium.name,        stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name ORDER BY count(*) DESC LIMIT 1 
 SELECT stadium.name,        stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE highest = 0   AND lowest = 0   AND average = 0 
 SELECT name FROM stadium WHERE highest = 0   AND lowest = 0   AND average = 0 EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.theme = "Rock in the Park"   AND concert.year = 2010 
 SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT   SELECT DISTINCT country   FROM singer WHERE age < 30 
 SELECT name FROM stadium EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 
 SELECT name FROM stadium WHERE highest!=     (SELECT max(highest)      FROM stadium)   AND lowest!=     (SELECT max(lowest)      FROM stadium)   AND average!=     (SELECT max(average)      FROM stadium) EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert.concert_id 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert.concert_name 
 SELECT singer.Name,        count(*) FROM singer_in_concert JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.Is_male = 1 GROUP BY singer.Name 
 SELECT singer.name,        count(*) FROM singer_in_concert JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE singer.is_male = 1 GROUP BY singer.name 
 SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.singer_ID = singer.singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014 
 SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.singer_ID = singer.singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014 
 SELECT name,        country FROM singer WHERE song_name LIKE '%Hey%' 
 SELECT name,        country FROM singer WHERE song_name LIKE '%Hey%' 
 SELECT stadium.name,        stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM concert   JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015 
 SELECT stadium.name,        stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM concert   JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015 
 SELECT count(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM pets WHERE weight > 10 
 SELECT count(*) FROM pets WHERE weight > 10 
 SELECT weight FROM pets WHERE pet_age =     (SELECT min(pet_age)      FROM pets      WHERE pet_type = 'dog') 
 SELECT weight FROM pets WHERE pet_age =     (SELECT min(pet_age)      FROM pets      WHERE pet_type = 'dog') 
 SELECT max(weight),        pet_type FROM pets GROUP BY pet_type 
 SELECT pet_age,        max(weight),        pet_type FROM pets GROUP BY pet_type 
 SELECT count(*) FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID WHERE Student.age > 20 
 SELECT count(*) FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID WHERE Student.age > 20 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = "F"   AND Pets.pet_age > 1   AND Pets.weight > 20 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = "F"   AND Pets.pettype = "Dog"   AND Pets.pet_age > 5   AND Pets.weight > 20 
 SELECT count(DISTINCT pet_type) FROM pets 
 SELECT count(DISTINCT pet_type) FROM pets 
 SELECT Student.fname FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.petid = Pets.petid WHERE Pets.pettype = "Cat"   OR Pets.pettype = "Dog"   AND Student.sex = "F"   AND Student.age > 18   AND Student.major = "History"   AND Student.advisor = "212"   AND Student.city_code = "BAL" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = "Dog" UNION SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = "Cat" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Cat" INTERSECT   SELECT STUDENT.Fname   FROM STUDENT   JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Dog" 
 SELECT STUDENT.Fname FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 1   AND Pets.pet_age < 2   AND Pets.weight < 1   AND Pets.pet_type = "Cat" INTERSECT   SELECT STUDENT.Fname   FROM STUDENT   JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = "Dog" 
 SELECT Major,        age FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.pet_age > 5        AND Pets.pettype = 'Cat') 
 SELECT major,        age FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.PetID = Pets.PetID      WHERE Pets.pet_age > 0        AND Pets.pettype = "Cat") 
 SELECT StuID FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.PetID = Pets.PetID      WHERE Pets.pet_age > 5        AND Pets.weight > 20) 
 SELECT StuID FROM Has_pet EXCEPT SELECT StuID FROM Has_pet JOIN Pets ON Has_pet.petid = Pets.petid WHERE Pets.pettype = "Cat" 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = 'Dog' EXCEPT SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pettype = 'Cat' 
 SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20 EXCEPT SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1   AND Pets.weight > 20   AND Pets.pet_type = "Cat" 
 SELECT PetType,        weight FROM Pets ORDER BY pet_age ASC LIMIT 1 
 SELECT pet_age,        weight,        pet_type FROM pets ORDER BY pet_age ASC LIMIT 1 
 SELECT PetID,        weight FROM Pets WHERE pet_age > 1 
 SELECT PetID,        weight FROM Pets WHERE pet_age > 1 
 SELECT PetType,        avg(pet_age),        max(pet_age) FROM Pets GROUP BY PetType 
 SELECT pet_age,        max(pet_age),        pet_type FROM pets GROUP BY pet_type 
 SELECT PetType,        avg(weight) FROM Pets GROUP BY PetType 
 SELECT PetType,        avg(weight) FROM Pets GROUP BY PetType 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID 
 SELECT DISTINCT STUDENT.Fname,                 STUDENT.Age FROM STUDENT JOIN Has_Pet ON STUDENT.StuID = Has_Pet.StuID 
 SELECT Has_pet.petid FROM Student JOIN has_pet ON Student.stuid = has_pet.stuid WHERE Student.lname = "Smith" 
 SELECT Has_pet.petid FROM Student JOIN Has_pet ON Student.stuid = Has_pet.stuid WHERE Student.lname = "Smith" 
 SELECT count(*),        student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid 
 SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID 
 SELECT Student.fname,        sex FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID GROUP BY Student.StuID HAVING count(*) > 1 
 SELECT Student.fname,        sex FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID GROUP BY Student.StuID HAVING count(*) > 1 
 SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   AND pets.pet_age = 3 
 SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'   AND pets.pet_age = 3   AND student.sex = 'B'   AND student.major = 'Biology'   AND student.advisor = '212'   AND student.city_code = 'BAL' 
 SELECT avg(age) FROM Student WHERE sex = 'F'   AND major = 'Languages'   AND city_code = 'BAL'   AND StuID NOT IN     (SELECT StuID      FROM Has_pet) 
 SELECT avg(age) FROM Student WHERE sex!= 'F'   AND major!= 600   AND city_code!= 'CAMP'   AND StuID NOT IN     (SELECT StuID      FROM Has_pet) 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT countries.continent,        countries.continent,        count(*) FROM countries JOIN continents ON countries.continent = continents.contid GROUP BY countries.continent 
 SELECT continents.continent,        countries.countryid,        countries.countryname,        count(*) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent 
 SELECT count(*) FROM countries 
 SELECT count(*) FROM countries 
 SELECT car_makers.fullname,        car_makers.id,        count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id 
 SELECT car_makers.fullname,        model_list.maker,        count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY model_list.maker 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower LIMIT 1 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower LIMIT 1 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight <     (SELECT avg(Weight)      FROM cars_data) 
 SELECT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970 
 SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970 
 SELECT car_names.Make,        cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year =     (SELECT min(YEAR)      FROM cars_data) 
 SELECT car_names.Make,        cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year =     (SELECT min(YEAR)      FROM cars_data) 
 SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980 
 SELECT DISTINCT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 
 SELECT countries.continent,        count(*) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.continent 
 SELECT continents.continent,        count(*) FROM continents JOIN countries ON continents.contid = countries.contid JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent 
 SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY count(*) DESC LIMIT 1 
 SELECT car_makers.FullName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Country ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*),        car_makers.fullname FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.fullname 
 SELECT count(*),        model_list.maker,        car_makers.id,        car_makers.full_name FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY model_list.maker 
 SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = "amc hornet sportabout (sw)" 
 SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE car_names.Model = "amc hornet sportabout (sw)" 
 SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = "france" 
 SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = "France" 
 SELECT count(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = "usa" 
 SELECT count(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = "North America" 
 SELECT avg(mpg) FROM cars_data WHERE cylinders = 4 
 SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4 
 SELECT min(Weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974 
 SELECT min(Weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974 
 SELECT DISTINCT maker,                 model FROM model_list 
 SELECT Maker,        MODEL FROM model_list 
 SELECT countries.CountryName,        countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country 
 SELECT countries.countryname,        countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT AVG(Weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT AVG(Weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = "Europe" GROUP BY countries.countryname HAVING count(*) >= 3 
 SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = "Europe" GROUP BY countries.CountryName HAVING count(*) >= 3 
 SELECT car_names.Make,        max(cars_data.Horsepower) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make 
 SELECT car_names.Make,        max(cars_data.Horsepower) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 2005 GROUP BY car_names.Model ORDER BY cars_data.mpg DESC LIMIT 1 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.mpg DESC LIMIT 1 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(cars_data.Edispl) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = "volvo" 
 SELECT avg(cars_data.Edispl) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Make = "Volvo" 
 SELECT max(Accelerate),        Cylinders FROM cars_data WHERE YEAR = 2005 GROUP BY Cylinders 
 SELECT max(Accelerate),        Cylinders FROM cars_data WHERE Edispl > 30 GROUP BY Cylinders 
 SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(Make) DESC LIMIT 1 
 SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Cylinders > 4 
 SELECT count(*) FROM cars_data WHERE Cylinders > 4 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = "American Motor Company" 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.full_name = "American Motor Company" 
 SELECT car_makers.fullname,        car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING count(*) > 3 
 SELECT car_makers.fullname,        car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING count(*) > 3 
 SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.MakeId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "General Motors"   AND cars_data.Weight > 3500 
 SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.MakeId = model_list.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = "General Motors"   OR cars_data.Weight > 3500 
 SELECT DISTINCT YEAR FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 
 SELECT DISTINCT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT   SELECT DISTINCT YEAR   FROM cars_data WHERE Weight > 3000 
 SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
 SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
 SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = "volvo" ORDER BY cars_data.accelerate LIMIT 1 
 SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = "volvo" ORDER BY cars_data.accelerate LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT max(Horsepower)           FROM cars_data)) 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data) 
 SELECT count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING count(*) > 2 
 SELECT count(*) FROM   (SELECT countries.continent    FROM countries    JOIN car_makers ON countries.countryid = car_makers.country    GROUP BY countries.continent    HAVING count(*) > 2) 
 SELECT count(*) FROM cars_data WHERE Cylinders > 6 
 SELECT count(*) FROM cars_data WHERE Cylinders > 6 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1 
 SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1 
 SELECT cars_data.Makeid,        car_names.Make FROM cars_data JOIN car_names ON cars_data.Makeid = car_names.Makeid WHERE cars_data.Horsepower >     (SELECT min(Horsepower)      FROM cars_data) INTERSECT   SELECT cars_data.Makeid   FROM cars_data   JOIN car_names ON cars_data.Makeid = car_names.Makeid WHERE cars_data.Cylinders > 3 
 SELECT car_names.MakeId,        car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders < 4   AND cars_data.Horsepower <     (SELECT min(Horsepower)      FROM cars_data) 
 SELECT max(MPG) FROM cars_data WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT max(MPG) FROM cars_data WHERE Cylinders = 8   OR YEAR < 1980 
 SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500   AND car_makers.FullName!= "Ford Motor Company" 
 SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName!= "Ford Motor Company"   AND cars_data.Weight < 3500 
 SELECT countryname FROM countries WHERE continent = "Europe" EXCEPT SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING count(*) >= 2 
 SELECT countryname FROM countries WHERE continent = "Europe" EXCEPT SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.continent = "Europe" 
 SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING count(*) >= 2 INTERSECT SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING count(*) > 3 
 SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING count(*) >= 2 INTERSECT SELECT car_makers.id,        car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING count(*) > 3 
 SELECT car_makers.id,        car_makers.fullname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON model_list.maker = car_makers.id WHERE countries.continent = "Europe" GROUP BY car_makers.id HAVING count(*) > 3 UNION SELECT car_makers.id,        car_makers.fullname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON model_list.maker = car_makers.id WHERE model_list.model = "Fiat" 
 SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker GROUP BY countries.countryid HAVING count(*) > 3 UNION SELECT countries.countryid,        countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker WHERE model_list.model = "Fiat" 
 SELECT Country FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Country FROM airlines WHERE Abbreviation = "Jetblue"; 
 SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"; 
 SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways"; 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = "USA" 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = "United States of America" 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony"; 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM flights 
 SELECT count(*) FROM flights 
 SELECT Airline FROM airlines WHERE Abbreviation = "UAL" 
 SELECT Airline FROM airlines WHERE Abbreviation = "UAL" 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT COUNT(*) FROM airlines WHERE Country = "United States" 
 SELECT city,        country FROM airports WHERE AirportName = "Alton" 
 SELECT city,        country FROM airports WHERE AirportName = "Alton" 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE City = "Aberdeen" 
 SELECT AirportName FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM flights WHERE sourceairport = 'APG' 
 SELECT count(*) FROM flights WHERE sourceairport = 'APG' 
 SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
 SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'   AND airports.city = 'Ashley' 
 SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen"   AND airports.city = "Ashley" 
 SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'JetBlue Airways' 
 SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'Jetblue' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines'   AND flights.sourceairport = 'ASY' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines'   AND flights.destairport = 'ASY Airport' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines'   AND flights.sourceairport = 'AHD' 
 SELECT count(*) FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines'   AND flights.sourceairport = 'AHD Airport' 
 SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen"   AND airlines.abbreviation = "United"; 
 SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON airlines.uid = flights.airline WHERE airports.city = "Aberdeen"   AND airlines.abbreviation = "United"; 
 SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY count(*) LIMIT 1 
 SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY count(*) LIMIT 1 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid ORDER BY count(*) LIMIT 1 
 SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid ORDER BY count(*) LIMIT 1 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD' 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE sourceairport = "AHD" 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD' 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = "AHD" 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'APG' INTERSECT   SELECT DISTINCT airlines.abbreviation   FROM airlines   JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'CVO' 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'APG' INTERSECT   SELECT airlines.abbreviation   FROM airlines   JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'CVO' 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'CVO' EXCEPT SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'APG' 
 SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = "CVO" EXCEPT SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = "APG" 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) >= 10 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) >= 10 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) < 200 
 SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation HAVING count(*) < 200 
 SELECT FlightNo FROM flights WHERE Airline =     (SELECT uid      FROM airlines      WHERE Abbreviation = "United Airlines"        AND Country = "United States") 
 SELECT FlightNo FROM flights WHERE Airline IN     (SELECT uid      FROM airlines      WHERE Abbreviation = "United") 
 SELECT FlightNo FROM flights WHERE SourceAirport = "APG" 
 SELECT FlightNo FROM flights WHERE SourceAirport = "APG" 
 SELECT FlightNo FROM flights WHERE DestAirport = "APG" 
 SELECT FlightNo FROM flights WHERE DestAirport = "APG" 
 SELECT FlightNo FROM flights WHERE sourceairport IN     (SELECT AirportCode      FROM airports      WHERE city = "Aberdeen") 
 SELECT FlightNo FROM flights WHERE sourceairport IN     (SELECT AirportCode      FROM airports      WHERE city = 'Aberdeen') 
 SELECT FlightNo FROM flights WHERE DestAirport IN     (SELECT AirportCode      FROM airports      WHERE City = "Aberdeen") 
 SELECT FlightNo FROM flights WHERE DestAirport IN     (SELECT AirportCode      FROM airports      WHERE City = "Aberdeen"        AND Country = "United Kingdom") 
 SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"   OR airports.AirportName = "Abilene" 
 SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"   OR airports.AirportName = "Abilene" 
 SELECT AirportName FROM airports WHERE AirportCode NOT IN     (SELECT SourceAirport      FROM flights      UNION      SELECT DestAirport      FROM flights) 
 SELECT AirportCode,        AirportName,        CountryAbbrev FROM airports WHERE AirportCode NOT IN     (SELECT SourceAirport      FROM flights      UNION      SELECT DestAirport      FROM flights) 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,        count(*) FROM shop GROUP BY LOCATION 
 SELECT Manager_name,        District FROM shop ORDER BY Number_products DESC LIMIT 1 
 SELECT Manager_name,        District FROM shop ORDER BY Number_products DESC LIMIT 1 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT name,        LOCATION,        district FROM shop ORDER BY Number_products DESC 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT Name FROM shop WHERE Number_products >     (SELECT avg(Number_products)      FROM shop) 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY count(*) DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY sum(evaluation.bonus) DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded =     (SELECT max(YEAR_AWARDED)      FROM evaluation) ORDER BY evaluation.bonus DESC LIMIT 1 
 SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation) 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation) 
 SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id WHERE hiring.is_full_time = 1 GROUP BY hiring.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT count(*),        shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.name 
 SELECT count(*),        shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.name 
 SELECT sum(bonus) FROM evaluation 
 SELECT sum(Bonus) FROM evaluation 
 SELECT * FROM hiring 
 SELECT * FROM hiring 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(*) FROM Documents 
 SELECT count(*) FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT document_name,        template_id FROM Documents WHERE document_description LIKE '%w%' 
 SELECT document_name,        template_id FROM Documents WHERE document_description LIKE '%w%' 
 SELECT document_id,        template_id,        document_description FROM Documents WHERE document_name = "Robbin CV" 
 SELECT document_id,        template_id,        document_description FROM Documents WHERE document_name = "Robbin CV" 
 SELECT count(DISTINCT template_id) FROM Documents 
 SELECT count(DISTINCT template_id) FROM Documents 
 SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT' 
 SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = "PPT" 
 SELECT Template_ID,        count(*) FROM Documents GROUP BY Template_ID 
 SELECT Template_ID,        count(*) FROM Documents GROUP BY Template_ID 
 SELECT Templates.template_id,        Templates.template_type_code FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY Templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.template_id,        Templates.template_type_code FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id GROUP BY Templates.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1 
 SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1 
 SELECT template_id FROM templates WHERE template_id NOT IN     (SELECT template_id      FROM documents) 
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents 
 SELECT count(*) FROM Templates 
 SELECT count(*) FROM Templates 
 SELECT template_id,        version_number,        template_type_code FROM templates 
 SELECT template_id,        version_number,        template_type_code FROM templates 
 SELECT DISTINCT Template_Type_Code FROM Templates 
 SELECT DISTINCT Template_Type_Code FROM Templates 
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP"   OR Template_Type_Code = "PPT" 
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP"   OR Template_Type_Code = "PPT" 
 SELECT count(*) FROM Templates WHERE Template_Type_Code = "CV" 
 SELECT count(*) FROM Templates WHERE Template_Type_Code = "CV" 
 SELECT Version_Number,        Template_Type_Code FROM Templates WHERE Date_Effective_To > "2005-01-01 00:00:00" 
 SELECT Version_Number,        Template_Type_Code FROM Templates WHERE Version_Number > 5 
 SELECT Template_Type_Code,        count(*) FROM Templates GROUP BY Template_Type_Code 
 SELECT Template_Type_Code,        count(*) FROM Templates GROUP BY Template_Type_Code 
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3 
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3 
 SELECT min(Version_Number),        Template_Type_Code FROM Templates 
 SELECT Template_Type_Code FROM Templates ORDER BY Version_Number LIMIT 1 
 SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base" 
 SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base" 
 SELECT Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = "BK" 
 SELECT Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = "BK" 
 SELECT Templates.Template_Type_Code,        count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code 
 SELECT Templates.Template_Type_Code,        count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code 
 SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID 
 SELECT Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID 
 SELECT template_type_code,        template_type_description FROM Ref_template_types 
 SELECT template_type_code,        template_type_description FROM Ref_template_types 
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD" 
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD" 
 SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book" 
 SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book" 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation" 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation' 
 SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM paragraphs 
 SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show' 
 SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show' 
 SELECT Other_Details FROM PARAGRAPHS WHERE Paragraph_Text = "Korea " 
 SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %' 
 SELECT Paragraphs.paragraph_id,        Paragraphs.paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.document_id = Documents.document_id WHERE Documents.document_name = 'Welcome to NY' 
 SELECT Paragraphs.paragraph_id,        Paragraphs.paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.document_id = Documents.document_id WHERE Documents.document_name = 'Welcome to NY' 
 SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews" 
 SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews' 
 SELECT Document_ID,        count(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID 
 SELECT Document_ID,        count(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID 
 SELECT Documents.document_id,        Documents.document_name,        count(*) FROM Paragraphs JOIN Documents ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id 
 SELECT Documents.document_name,        count(*),        Documents.document_id FROM Paragraphs JOIN Documents ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2 
 SELECT Documents.document_id,        Documents.document_name FROM Paragraphs JOIN Documents ON Documents.template_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Documents.document_id,        Documents.document_name FROM Paragraphs JOIN Documents ON Documents.template_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) LIMIT 1 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 
 SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 
 SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = "Brazil" INTERSECT   SELECT Document_ID   FROM Paragraphs WHERE Paragraph_Text = "Ireland" 
 SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text = "Brazil" INTERSECT   SELECT DISTINCT document_id   FROM paragraphs WHERE paragraph_text = "Ireland" 
 SELECT count(*) FROM teacher 
 SELECT count(*) FROM teacher 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Age,        Hometown FROM teacher 
 SELECT Age,        Hometown FROM teacher 
 SELECT name FROM teacher WHERE Hometown!= 'Little Lever Urban District' 
 SELECT Name FROM teacher WHERE Hometown!= 'Little Lever Urban District' 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course_arrange.Grade = 'A' 
 SELECT teacher.name,        course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course_arrange.grade = 'A' 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name 
 SELECT teacher.Name,        course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC 
 SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
 SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
 SELECT teacher.Name,        count(*) FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name 
 SELECT teacher.name,        count(*) FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY course_arrange.teacher_id 
 SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name HAVING COUNT(*) >= 2 
 SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name HAVING COUNT(*) >= 2 
 SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange) 
 SELECT name FROM teacher WHERE teacher_id NOT IN     (SELECT teacher_id      FROM course_arrange) 
 SELECT count(*) FROM visitor WHERE age < 30 
 SELECT name FROM visitor WHERE LEVEL_of_membership > 4 ORDER BY LEVEL_of_membership DESC 
 SELECT avg(age) FROM visitor WHERE LEVEL_of_membership > 4 
 SELECT name,        level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age 
 SELECT museum_id,        name FROM museum ORDER BY num_of_staff DESC LIMIT 1 
 SELECT avg(Num_of_Staff) FROM museum WHERE open_year < 2009 
 SELECT Open_Year,        Num_of_Staff FROM museum WHERE Name = "Plaza Museum" 
 SELECT Name FROM museum WHERE Num_of_Staff >     (SELECT min(Num_of_Staff)      FROM museum      WHERE Open_Year > 2010) 
 SELECT visitor.id,        visitor.name,        visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING count(*) > 1 
 SELECT visitor.id,        visitor.name,        visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY sum(visit.total_spent) DESC LIMIT 1 
 SELECT museum.museum_id,        museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM VISIT) 
 SELECT visitor.name,        visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY sum(visit.total_spent) DESC LIMIT 1 
 SELECT avg(Num_of_Ticket),        max(Num_of_Ticket) FROM VISIT 
 SELECT sum(visit.Total_spent) FROM VISITOR JOIN visit ON VISITOR.ID = visit.visitor_ID WHERE VISITOR.Level_of_membership = 1 
 SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT   SELECT visitor.name   FROM visitor   JOIN visit ON visitor.id = visit.visitor_id   JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011 
 SELECT count(*) FROM VISITOR WHERE visitor_id NOT IN     (SELECT visitor_id      FROM museum      JOIN visit ON museum.museum_id = visit.museum_id      WHERE museum.open_year > 2010) 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches 
;
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT avg(loser_age),        avg(winner_age) FROM matches 
 SELECT avg(loser_age),        avg(winner_age) FROM matches WHERE loser_age!= 0   AND winner_age!= 0 
 SELECT avg(winner_rank) FROM matches WHERE winner_rank_points > 0   AND winner_rank_points < 100 
 SELECT avg(winner_rank) FROM matches 
 SELECT max(loser_rank) FROM matches 
 SELECT max(loser_rank) FROM matches 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
;
 SELECT count(DISTINCT matches.loser_name) FROM matches WHERE matches.year = 2016   AND matches.round = "Final"   AND matches.surface = "Clay"   AND matches.best_of = "Bo5"   AND matches.draw_size = "6"   AND matches.minutes < 600   AND matches.loser_hand = "Right"   AND matches.winner_hand = "Right"   AND matches.winner_seed > matches.loser_seed   AND matches.winner_rank_points > matches.loser_rank_points   AND matches.winner_age > matches.loser_age   AND matches.winner_ioc = matches.loser_ioc   AND matches.loser_ioc = "TUR"   AND matches.winner_entry = "Entry"   AND matches.loser_entry = "Entry"; 
 SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING count(*) > 10 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
;
 SELECT winner_name FROM matches WHERE winner_id IN     (SELECT winner_id      FROM matches      WHERE winner_id = 718        AND winner_rank_points > 1000        AND winner_seed > 1000        AND winner_age > 30        AND winner_entry = "Grand Slam"        AND winner_hand = "Clubs"        AND winner_ioc = "TUR"        AND winner_tourney_level = "Final"        AND winner_tourney_date = "2013-07-11") INTERSECT   SELECT loser_name   FROM matches WHERE loser_id IN     (SELECT loser_id      FROM matches      WHERE loser_id = 718        AND loser_rank_points > 1000        AND loser_seed > 1000        AND loser_age > 30        AND loser_hand = "Clubs"        AND loser_ioc = "TUR"        AND loser_tourney_level = "Final"        AND loser_tourney_date = "2016-07-11") 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "WTA Championships" INTERSECT   SELECT players.country_code,          players.first_name   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "WTA Championships" INTERSECT   SELECT players.first_name,          players.country_code   FROM players   JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = "Australian Open" 
 SELECT first_name,        country_code FROM players WHERE birth_date =     (SELECT min(birth_date)      FROM players) 
 SELECT first_name,        last_name,        country_code FROM players WHERE birth_date =     (SELECT min(birth_date)      FROM players) 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = 'left'   AND country_code = 'L' ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = 'left' ORDER BY birth_date 
 SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1 
 SELECT players.first_name,        players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT winner_name,        winner_rank_points FROM matches WHERE winner_id =     (SELECT winner_id      FROM matches      GROUP BY winner_id      ORDER BY count(*) DESC      LIMIT 1) 
 SELECT matches.winner_name,        matches.winner_rank_points FROM matches GROUP BY matches.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT winner_name FROM matches WHERE tourney_name = "Australian Open"   AND winner_rank_points =     (SELECT max(winner_rank_points)      FROM matches) 
 SELECT winner_name FROM matches WHERE tourney_name = "Australian Open"   AND winner_rank_points =     (SELECT max(winner_rank_points)      FROM matches) 
 SELECT matches.loser_name,        matches.winner_name FROM matches ORDER BY matches.minutes DESC LIMIT 1 
 SELECT matches.winner_name,        matches.loser_name FROM matches WHERE matches.minutes =     (SELECT max(minutes)      FROM matches) 
 SELECT players.first_name,        avg(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.country_code = "TUR" GROUP BY players.first_name 
 SELECT players.first_name,        avg(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.country_code = "TUR" GROUP BY players.first_name 
 SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.country_code = "TUR" GROUP BY players.player_id 
 SELECT players.first_name,        sum(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.country_code = "TUR" GROUP BY players.player_id 
 SELECT country_code,        count(*) FROM players WHERE hand = 'right' GROUP BY country_code 
 SELECT country_code,        count(*) FROM players WHERE hand = 'right' GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT ranking_date,        sum(tours) FROM rankings GROUP BY ranking_date 
 SELECT ranking_date,        sum(tours) FROM rankings GROUP BY ranking_date 
 SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
 SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
 SELECT winner_name,        winner_rank FROM matches WHERE winner_age =     (SELECT min(winner_age)      FROM matches) UNION SELECT loser_name,        loser_rank FROM matches WHERE loser_age =     (SELECT min(loser_age)      FROM matches) 
 SELECT winner_name,        winner_rank FROM matches WHERE winner_age =     (SELECT min(winner_age)      FROM matches) LIMIT 3 
 SELECT count(DISTINCT matches.winner_id) FROM matches WHERE matches.loser_hand = 'left'   AND matches.tourney_name = 'WTA Championships' 
 SELECT count(*) FROM matches WHERE winner_hand = 'left'   AND tourney_name = 'WTA Championships' 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points =     (SELECT max(winner_rank_points)      FROM matches) 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY sum(matches.winner_rank_points) DESC LIMIT 1 
 SELECT hand,        count(*) FROM players WHERE country_code = "USA" GROUP BY hand 
 SELECT hand,        count(*) FROM players WHERE country_code = "USA" GROUP BY hand 
 SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured' 
 SELECT name,        tonnage FROM ship WHERE ship_type = 'Destroyer'   AND disposition_of_ship = 'Lost' ORDER BY name DESC 
 SELECT name,        date,        result FROM battle 
 SELECT max(killed),        min(killed) FROM death 
 SELECT avg(injured) FROM death 
 SELECT death.killed,        death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' 
 SELECT name,        result FROM battle WHERE bulgarian_commander!= "Boril" 
 SELECT DISTINCT battle.id,                 battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' 
 SELECT id,        name FROM battle WHERE id IN     (SELECT caused_by_ship_id      FROM death      GROUP BY caused_by_ship_id      HAVING sum(killed) > 10) 
 SELECT ship.id,        ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id ORDER BY sum(death.injured) DESC LIMIT 1 
 SELECT DISTINCT name FROM battle WHERE bulgarian_commander = "Kaloyan"   AND latin_commander = "Baldwin I" 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE tonnage = 225) 
 SELECT battle.date,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'HMS Atalanta'   AND ship.ship_type = 'frigate'   AND ship.disposition_of_ship = 'lost'   AND battle.latin_commander = 'Ovidius Milius'   AND battle.bulgarian_commander = 'Ivan Ivanov'   AND battle.result = 'Victory'   AND ship.tonnage > 4000; 
 SELECT name,        result,        bulgarian_commander FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE location = 'English Channel') 
 SELECT note FROM death WHERE note LIKE '%East%' 
 SELECT line_1,        line_2 FROM addresses 
 SELECT line_1,        line_2 FROM addresses 
 SELECT count(*) FROM COURSES 
 SELECT count(*) FROM COURSES 
 SELECT course_description FROM COURSES WHERE course_name = "Math" 
 SELECT course_description FROM COURSES WHERE course_name LIKE "%Math%" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea" 
 SELECT Departments.department_name,        Degree_Programs.department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Departments.department_name,        Degree_Programs.department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Degree_Programs.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT department_id) FROM degree_programs 
 SELECT count(DISTINCT department_id) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = "Engineering" 
 SELECT count(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = "Engineering" 
 SELECT section_name,        section_description FROM Sections 
 SELECT section_name,        section_description FROM Sections 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) <= 2 
 SELECT Courses.course_name,        Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) < 2 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT Semesters.semester_name,        Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Semesters.semester_name,        Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' 
 SELECT department_description FROM Departments WHERE department_name LIKE "%computer%" 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Student_Enrolment.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.degree_program_id = 2   AND Student_Enrolment.semester_id = 1 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelor" 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelors" 
 SELECT degree_summary_name,        degree_summary_description FROM degree_programs WHERE degree_program_id IN     (SELECT degree_program_id      FROM student_enrolment      GROUP BY degree_program_id      ORDER BY count(*) DESC      LIMIT 1) 
 SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Degree_Programs.degree_program_id,        Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Degree_Programs.degree_program_id,        Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Student_Enrolment.student_id,        Students.first_name,        Students.middle_name,        Students.last_name,        count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Students.student_id,        count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT semester_name FROM semesters WHERE semester_id NOT IN     (SELECT semester_id      FROM student_enrolment) 
 SELECT semester_name FROM semesters WHERE semester_id NOT IN     (SELECT semester_id      FROM student_enrolment) 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = "North Carolina" EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = "North Carolina" 
 SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = "North Carolina" EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Program ON Student_Enrolment.degree_program_id = Degree_Program.degree_program_id 
 SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Transcript_Contents JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id HAVING count(*) >= 2 
 SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcript_contents JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_id HAVING count(*) >= 2 
 SELECT cell_mobile_number FROM Students WHERE first_name = "Timothy"   AND last_name = "Ward" 
 SELECT cell_mobile_number FROM Students WHERE first_name = "Timothy"   AND last_name = "Ward"; 
 SELECT first_name,        middle_name,        last_name FROM Students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name,        middle_name,        last_name FROM Students WHERE date_first_registered =     (SELECT min(date_first_registered)      FROM Students) 
 SELECT first_name,        middle_name,        last_name FROM Students WHERE date_left =     (SELECT min(date_left)      FROM Students) 
 SELECT first_name,        middle_name,        last_name FROM Students WHERE date_left =     (SELECT min(date_left)      FROM Students) 
 SELECT first_name FROM Students WHERE permanent_address_id!= current_address_id 
 SELECT first_name FROM Students WHERE permanent_address_id!= current_address_id 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2,        Addresses.line_3,        Addresses.city,        Addresses.zip_postcode,        Addresses.state_province_county,        Addresses.country,        Addresses.other_address_details FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT transcript_date,        other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1 
 SELECT other_details,        transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 
 SELECT count(*) FROM transcripts WHERE other_details ='released' 
 SELECT count(*) FROM transcripts 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT student_course_id,        count(*) FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1; 
 SELECT max(count(*), enrollment_id) FROM transcript_contents GROUP BY student_course_id 
 SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Transcript_Contents JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT transcripts.transcript_date,        transcripts.transcript_id FROM transcript_contents JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1 
 SELECT DISTINCT Student_Enrolment.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = "Master" INTERSECT   SELECT DISTINCT Student_Enrolment.semester_id   FROM Degree_Programs   JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelor" 
 SELECT Student_Enrolment.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = "Masters" INTERSECT   SELECT Student_Enrolment.semester_id   FROM Degree_Programs   JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name = "Bachelors" 
 SELECT count(DISTINCT current_address_id) FROM Students 
 SELECT DISTINCT current_address_id,                 permanent_address_id FROM Students 
 SELECT other_student_details FROM Students ORDER BY other_student_details DESC 
 SELECT other_student_details FROM Students ORDER BY last_name DESC 
 SELECT section_description,        other_details FROM SECTIONS WHERE section_name = "h"; 
 SELECT section_description FROM SECTIONS WHERE section_name = "h" 
 SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = "Haiti"   OR Students.cell_mobile_number = "009700166582" 
 SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = "Haiti" UNION SELECT Students.first_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.country = "Haiti"   AND Students.cell_mobile_number = "009700166582" 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT Title FROM Cartoon ORDER BY Title 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" 
 SELECT COUNT(*) FROM CARTOON WHERE Written_by = "Joseph Kuhr" 
 SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr" 
 SELECT Title,        Directed_by FROM Cartoon ORDER BY Original_air_date 
 SELECT title,        directed_by FROM cartoon ORDER BY original_air_date 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"   OR Written_by = "Brandon Vietti" 
 SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"   OR Written_by = "Brandon Vietti" 
 SELECT country,        count(*) FROM TV_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1; 
 SELECT country,        count(*) FROM TV_CHANNEL GROUP BY country ORDER BY count(*) DESC LIMIT 1; 
 SELECT series_name,        content,        count(*) FROM TV_CHANNEL GROUP BY series_name,          content 
 SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_CHANNEL 
 SELECT content FROM TV_CHANNEL WHERE series_name = "Sky Radio" 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio"; 
 SELECT package_option FROM TV_CHANNEL WHERE series_name = "Sky Radio" 
 SELECT package_option FROM TV_CHANNEL WHERE series_name = "Sky Radio" 
 SELECT COUNT(*) FROM TV_CHANNEL WHERE LANGUAGE = 'English' 
 SELECT COUNT(*) FROM TV_CHANNEL WHERE LANGUAGE = "English" 
 SELECT LANGUAGE,        count(*) FROM TV_CHANNEL GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1; 
 SELECT LANGUAGE,        count(*) FROM TV_CHANNEL GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1; 
 SELECT LANGUAGE,        COUNT(*) FROM TV_CHANNEL WHERE Hight_definition_TV = "Yes"   AND Pay_per_view_PPV = "Yes" GROUP BY LANGUAGE 
 SELECT LANGUAGE,        count(*) FROM TV_CHANNEL WHERE Hight_definition_TV = 'Yes' GROUP BY LANGUAGE 
 SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "David Lloyd"   AND Cartoon.Title = "The Rise of the Blue Beetle!" 
 SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "David Berkowitz"   AND Cartoon.Title = "The Rise of the Blue Beetle"   AND TV_Channel.Country = "United States"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Cartoon"   AND TV_Channel.Pixel_aspect_ratio_PAR = "16:9"   AND TV_Channel.Hight_definition_TV = "Yes"   AND TV_Channel.Pay_per_view_PPV = "No"   AND TV_Channel.Package_Option = "No" 
 SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = "Sky Radio" 
 SELECT cartoon.title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE tv_channel.series_name = "Sky Radio" 
 SELECT Episode FROM TV_series ORDER BY Rating 
 SELECT Episode FROM TV_series ORDER BY Rating 
 SELECT Episode,        Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
 SELECT Episode,        Rating FROM TV_series ORDER BY Share DESC LIMIT 3 
 SELECT min(18_49_rating_share),        max(18_49_rating_share) FROM TV_series WHERE share > 0   AND weekly_rank > 0   AND viewers_m > 0   AND channel = "NBC"   AND rating > 0   AND episode = "The Pilot"   AND air_date > "2005-01-01" 
 SELECT max(18_49_rating_share),        min(18_49_rating_share) FROM TV_series 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_series.Episode = "A Love of a Lifetime" 
 SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel WHERE TV_series.Episode = "A Love of a Lifetime" 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT TV_series.Episode FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_channel.series_name = "Sky Radio" 
 SELECT count(*),        directed_by FROM cartoon WHERE directed_by IN     ('Bob Fosse', 'Kurt Vonnegut') GROUP BY directed_by 
 SELECT Directed_by,        COUNT(*) FROM Cartoon GROUP BY Directed_by 
 SELECT production_code,        channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT production_code,        channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT package_option,        series_name FROM TV_CHANNEL WHERE high_definition_tv = 'Yes' 
 SELECT package_option,        series_name FROM TV_CHANNEL WHERE high_definition_tv = 'Yes' 
 SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" 
 SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" 
 SELECT country FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE written_by = "Todd Casey") 
 SELECT country FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE written_by = "Todd Casey") 
 SELECT TV_Channel.series_name,        TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"   AND Cartoon.Written_by = "Michael Chang" 
 SELECT TV_Channel.series_name,        TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT   SELECT TV_Channel.series_name,          TV_Channel.Country   FROM TV_Channel   JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Michael Chang" 
 SELECT pixel_aspect_ratio_par,        country FROM TV_CHANNEL WHERE LANGUAGE!= "English" 
 SELECT pixel_aspect_ratio_par,        country FROM TV_CHANNEL WHERE LANGUAGE!= "English" 
 SELECT id FROM TV_CHANNEL WHERE country IN     (SELECT country      FROM TV_CHANNEL      GROUP BY country      HAVING count(*) > 2) 
 SELECT id FROM TV_CHANNEL GROUP BY series_name HAVING count(*) > 2 
 SELECT id FROM TV_Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Directed_by = "Ben Jones" 
 SELECT id FROM TV_Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE directed_by = "Ben Jones") 
 SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM cartoon      WHERE directed_by = "Ben Jones") 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 
 SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made 
 SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.Earnings LIMIT 1 
 SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings LIMIT 1 
 SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT avg(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200 
 SELECT avg(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC 
 SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Name,        Birth_Date FROM People ORDER BY Name ASC 
 SELECT name,        birth_date FROM people ORDER BY name 
 SELECT Name FROM People WHERE Nationality!= "Russia" 
 SELECT Name FROM People WHERE Nationality!= "Russia" 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
 SELECT name FROM people WHERE people_id NOT IN     (SELECT people_id      FROM poker_player) 
 SELECT count(DISTINCT nationality) FROM people 
 SELECT count(DISTINCT nationality) FROM people 
 SELECT count(DISTINCT state) FROM area_code_state 
 SELECT contestant_number,        contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
 SELECT vote_id,        phone_number,        state FROM votes 
 SELECT max(area_code),        min(area_code) FROM area_code_state 
 SELECT created FROM votes WHERE state = "CA" ORDER BY created DESC LIMIT 1 
 SELECT contestant_name FROM contestants WHERE contestant_name!= 'Jessie Alloway' 
 SELECT DISTINCT state,                 created FROM votes 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number HAVING COUNT(*) >= 2 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number ORDER BY count(*) ASC LIMIT 1 
 SELECT count(*) FROM votes WHERE state = "NY"   OR state = "CA" 
 SELECT count(*) FROM contestants WHERE contestant_number NOT IN     (SELECT contestant_number      FROM votes      WHERE created < "2012-12-09 10:00:00") 
 SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT VOTES.created,        VOTES.state,        VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = "Tabatha Gehling" 
 SELECT area_code FROM votes JOIN CONTESTANTS ON votes.contestant_number = CONTESTANTS.contestant_number JOIN area_code_state ON area_code_state.area_code = votes.area_code WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' INTERSECT   SELECT area_code   FROM votes   JOIN CONTESTANTS ON votes.contestant_number = CONTESTANTS.contestant_number   JOIN area_code_state ON area_code_state.area_code = votes.area_code WHERE CONTESTANTS.contestant_name = 'Kelly Clauss' 
 SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%' 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
 SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
 SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Caribbean' 
 SELECT sum(surfacearea) FROM country WHERE Continent = 'Caribbean' 
 SELECT continent FROM country WHERE name = 'Anguilla' 
 SELECT continent FROM country WHERE name = 'Anguilla' 
 SELECT country.region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = "Kabul" 
 SELECT country.region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = "Kabul" 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Aruba" ORDER BY countrylanguage.percentage DESC LIMIT 1 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Aruba" GROUP BY countrylanguage.language ORDER BY countrylanguage.percentage DESC LIMIT 1 
 SELECT Population,        LifeExpectancy FROM country WHERE Name = "Brazil" 
 SELECT Population,        LifeExpectancy FROM country WHERE Name = "Brazil" 
 SELECT region,        population FROM country WHERE name = 'Angola' 
 SELECT region,        population FROM country WHERE name = 'Angola' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Central Africa" 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Central Africa" 
 SELECT name FROM country WHERE continent = 'Asia'   AND lifeexpectancy =     (SELECT MIN(lifeexpectancy)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia'   AND life_expectancy =     (SELECT MIN(life_expectancy)      FROM country      WHERE continent = 'Asia') 
 SELECT sum(population),        max(gnp) FROM country WHERE continent = 'Asia' 
 SELECT max(population),        count(*) FROM country WHERE Continent = 'Asia' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Africa"   AND GovernmentForm = "Republic" 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = "Africa"   AND GovernmentForm = "Republic" 
 SELECT sum(surfacearea) FROM country WHERE Continent = "Asia"   AND region = "Europe" 
 SELECT sum(surfacearea) FROM country WHERE Continent = "Asia"   OR Continent = "Europe" 
 SELECT population FROM city WHERE district = "Gelderland" 
 SELECT sum(population) FROM city WHERE countrycode = "Netherlands"   AND district = "Gelderland"; 
 SELECT avg(gnp),        sum(population) FROM country WHERE GovernmentForm = 'US territory' 
 SELECT avg(GNP),        sum(Population) FROM country WHERE Continent = 'US' 
 SELECT count(DISTINCT language) FROM countrylanguage WHERE isofficial = 'Yes' 
 SELECT count(DISTINCT language) FROM countrylanguage WHERE isofficial = 'Yes' 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT sum(countrylanguage.percentage) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba' 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Aruba" 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"   AND countrylanguage.isofficial = 'T' 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"   AND countrylanguage.isofficial = 'T' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY count(*) DESC LIMIT 1 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
 SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' GROUP BY country.continent ORDER BY count(DISTINCT countrylanguage.language) DESC LIMIT 1 
 SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY count(*) DESC LIMIT 1 
 SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT COUNT(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' 
 SELECT count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT count(*)   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT   SELECT country.name   FROM country   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French' 
 SELECT count(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese' 
 SELECT count(DISTINCT country.continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'   AND country.population > 150000; 
 SELECT region FROM country WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT region FROM country WHERE countrylanguage.language = "Dutch"   OR countrylanguage.language = "English"   AND country.region = countrylanguage.region 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING count(*) = 1 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING count(*) = 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia'   AND surfacearea =     (SELECT MAX (surfacearea)      FROM country      WHERE continent = 'Asia') 
 SELECT name,        population,        life_expectancy FROM country WHERE continent = 'Asia' ORDER BY surface_area DESC LIMIT 1 
 SELECT avg(LifeExpectancy) FROM country WHERE country.name NOT IN     (SELECT countrylanguage.countrycode      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language = 'English'        AND countrylanguage.isofficial = 'T') 
 SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English'        AND IsOfficial = 'T') 
 SELECT sum(population) FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English'        AND isofficial = 'T') 
;
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = "Beatrix" 
 SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = "Beatrix" 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 
 SELECT count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 
 SELECT name FROM country WHERE surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE continent = 'Africa'   AND population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Africa'   AND population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia'   AND population >     (SELECT min(population)      FROM country      WHERE continent = 'Africa') 
 SELECT name FROM country WHERE continent = 'Asia'   AND population >     (SELECT min(population)      FROM country      WHERE continent = 'Africa') 
 SELECT countrycode FROM countrylanguage WHERE language = "English"   AND isofficial = "No" 
 SELECT countrycode FROM countrylanguage WHERE language = "English"   AND isofficial = "No" 
 SELECT countrycode FROM countrylanguage WHERE language!= "English"   AND isofficial = "Yes" 
 SELECT countrycode FROM countrylanguage WHERE language!= "English"   AND isofficial = "Yes" 
 SELECT code FROM country WHERE governmentform!= 'Republic'   AND code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English'        AND isofficial = 'T') 
 SELECT code FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English'        AND isofficial = 'T') EXCEPT SELECT code FROM country WHERE governmentform = 'Republic' 
 SELECT city.name FROM country JOIN city ON country.capital = city.id WHERE country.continent = "Europe"   AND NOT country.name IN     (SELECT country.name      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.language = "English"        AND countrylanguage.isofficial = 'T') 
 SELECT city.name FROM country JOIN city ON country.capital = city.id WHERE country.continent = "Europe"   AND NOT EXISTS     (SELECT 1      FROM countrylanguage      WHERE countrylanguage.countrycode = country.code        AND countrylanguage.language = "English"        AND countrylanguage.isofficial = 'T') 
 SELECT DISTINCT city.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN city ON country.capital = city.id WHERE country.continent = "Asia"   AND countrylanguage.language = "Chinese"   AND city.district = "City"; 
 SELECT DISTINCT city.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN city ON country.code = city.countrycode WHERE country.continent = "Asia"   AND countrylanguage.language = "Chinese"   AND city.district = "Asia"; 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT population,        name,        head_of_state FROM country WHERE surface_area =     (SELECT MAX (surface_area)      FROM country) 
 SELECT name,        population,        head_of_state FROM country WHERE surface_area =     (SELECT MAX (surface_area)      FROM country) 
 SELECT country.name,        count(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(*) >= 3 
 SELECT country.Name,        countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.Name HAVING COUNT(*) > 2 
 SELECT count(*),        district FROM city WHERE population >     (SELECT avg(population)      FROM city) GROUP BY district 
 SELECT count(*),        district FROM city WHERE population >     (SELECT avg(population)      FROM city) GROUP BY district 
 SELECT governmentform,        sum(population) FROM country GROUP BY governmentform HAVING avg(lifeexpectancy) > 72 
 SELECT sum(population),        governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform 
 SELECT avg(LifeExpectancy),        sum(Population),        country.continent FROM country WHERE avg(LifeExpectancy) < 72 GROUP BY country.continent 
 SELECT Continent,        SUM(Population),        avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT count(*) FROM country WHERE Continent = "Asia" 
 SELECT count(*) FROM country WHERE Continent = 'Asia' 
 SELECT name FROM country WHERE population = 80000   AND continent = 'Europe' 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000 
 SELECT sum(population),        avg(surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000 
 SELECT sum(population),        avg(surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
 SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000 
 SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE is_official = 'T' GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE percentage =     (SELECT max(percentage)      FROM countrylanguage) 
 SELECT countrycode,        language FROM countrylanguage WHERE percentage =     (SELECT max(percentage)      FROM countrylanguage) 
 SELECT sum(percentage) FROM countrylanguage WHERE language = 'Spanish'   AND isofficial = 'Yes' 
 SELECT count(*) FROM countrylanguage WHERE language = 'Spanish'   AND isofficial = 'Yes'   AND percentage =     (SELECT max(percentage)      FROM countrylanguage      WHERE language = 'Spanish') 
 SELECT countrycode FROM countrylanguage WHERE language = 'Spanish'   AND percentage =     (SELECT MAX (percentage)      FROM countrylanguage      WHERE language = 'Spanish') 
 SELECT countrycode FROM countrylanguage WHERE language = 'Spanish'   AND isofficial = 'Yes'   AND percentage =     (SELECT max(percentage)      FROM countrylanguage      WHERE language = 'Spanish') 
 SELECT count(*) FROM conductor 
 SELECT count(*) FROM conductor 
 SELECT Name FROM conductor ORDER BY Age ASC 
 SELECT Name FROM conductor ORDER BY Age 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_FOUNDED DESC 
 SELECT avg(Attendance) FROM show WHERE If_first_show = 1 
 SELECT avg(Attendance) FROM show 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT max(Share),        min(Share) FROM performance WHERE TYPE!= "Live final" 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY YEAR_of_WORK DESC 
 SELECT Name FROM conductor ORDER BY YEAR_of_WORK DESC LIMIT 1 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Major_Record_Format = "CD" GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT Record_Company,        COUNT(*) FROM orchestra GROUP BY Record_Company 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance) 
 SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN     (SELECT orchestra_id      FROM performance) 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT DISTINCT orchestra.Year_of_founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Share > 0 GROUP BY performance.Orchestra_ID HAVING COUNT(*) > 1 
 SELECT orchestra.Year_of_founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Year_of_founded HAVING count(*) > 1 
 SELECT count(*) FROM highschooler 
 SELECT count(*) FROM highschooler 
 SELECT name,        grade FROM HIGHSCOLER 
 SELECT name,        grade FROM HIGHSCOLER 
 SELECT DISTINCT grade FROM highschooler 
 SELECT grade FROM highschooler 
 SELECT grade FROM highschooler WHERE name = 'Kyle' 
 SELECT grade FROM highschooler WHERE name = "Kyle" 
 SELECT name FROM highschooler WHERE grade = 10 
 SELECT name FROM highschooler WHERE grade = 10 
 SELECT id FROM highschooler WHERE name = "Kyle" 
 SELECT id FROM highschooler WHERE name = "Kyle" 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM highschooler GROUP BY grade 
 SELECT grade,        count(*) FROM highschooler GROUP BY grade 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT student_id,        count(*) FROM friend GROUP BY student_id 
 SELECT friend_id,        count(*) FROM friend GROUP BY friend_id 
 SELECT Highschooler.name,        count(*) FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id GROUP BY Highschooler.name 
 SELECT Highschooler.name,        count(*) FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id GROUP BY Friend.student_id 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id GROUP BY friend.friend_id ORDER BY count(*) DESC LIMIT 1 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id GROUP BY friend.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id GROUP BY friend.student_id HAVING count(*) >= 3 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id GROUP BY friend.student_id HAVING count(*) >= 3 
 SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id JOIN Friend ON Friend.student_id = Highschooler.id WHERE Friend.friend_id = (SELECT id FROM Highschooler WHERE name = "Kyle") 
 SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id JOIN Friend ON Friend.student_id = Highschooler.id WHERE Friend.friend_id = (SELECT id FROM Highschooler WHERE name = "Kyle") 
 SELECT count(*) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN friend ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle' 
 SELECT count(*) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id WHERE friend.student_id IN     (SELECT id      FROM highschooler      WHERE name = 'Kyle'        AND grade = 10) 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT name FROM HIGHSCOLLEGEER WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT name FROM HIGHSCOUsher WHERE id NOT IN     (SELECT friend_id      FROM friend) 
 SELECT friend_id FROM friend UNION SELECT liked_id FROM likes WHERE student_id IN     (SELECT friend_id      FROM friend) 
 SELECT student_id FROM friend INTERSECT SELECT student_id FROM likes 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN likes ON friend.student_id = likes.liked_id 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN likes ON friend.student_id = likes.liked_id WHERE friend.student_id = likes.student_id 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT Highschooler.name,        count(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id 
 SELECT Highschooler.name,        count(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id 
 SELECT highschooler.name FROM likes JOIN highschooler ON likes.student_id = highschooler.id GROUP BY highschooler.name ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING count(*) >= 2 
 SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING count(*) >= 2 
 SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.id WHERE Friend.student_id = Highschooler.id   AND Highschooler.grade > 5 GROUP BY Highschooler.name HAVING count(*) >= 2 
 SELECT highschooler.name FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN friend ON friend.student_id = highschooler.id WHERE highschooler.grade > 5 GROUP BY highschooler.name HAVING count(*) >= 2 
 SELECT count(*) FROM Likes JOIN Highschooler ON Likes.liked_id = Highschooler.ID WHERE Highschooler.name = 'Kyle' 
 SELECT count(*) FROM Likes JOIN Highschooler ON Likes.liked_id = Highschooler.ID WHERE Highschooler.name = 'Kyle' 
 SELECT avg(grade) FROM highschooler WHERE id IN     (SELECT friend_id      FROM friend) 
 SELECT avg(grade) FROM highschooler WHERE id IN     (SELECT friend_id      FROM friend) 
 SELECT min(grade) FROM HIGHSCOUsher WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT grade FROM HIGHSCOUsher WHERE id NOT IN     (SELECT student_id      FROM friend) ORDER BY grade LIMIT 1 
 SELECT state FROM Owners INTERSECT SELECT state FROM Professionals 
 SELECT state FROM Owners INTERSECT SELECT state FROM Professionals 
 SELECT avg(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id 
 SELECT avg(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.abandoned_yn = 'N'   AND dogs.gender = 'F'   AND dogs.size_code = 'L'   AND dogs.weight > 20   AND treatments.date_of_treatment > dogs.date_of_birth   AND treatments.cost_of_treatment > 100 
 SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.state = "Indiana" GROUP BY Treatments.professional_id HAVING COUNT(*) > 2 
 SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.state = "Indiana" GROUP BY Treatments.professional_id HAVING count(*) > 2 
 SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE cost_of_treatment > 1000 
 SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.owner_id NOT IN     (SELECT Treatments.professional_id      FROM Treatments      JOIN Dogs ON Treatments.dog_id = Dogs.dog_id      GROUP BY Treatments.professional_id      HAVING sum(Treatments.cost_of_treatment) > 1000) 
 SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT Dogs.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.abandoned_yn = '0' 
 SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT Dogs.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.abandoned_yn = 1 
 SELECT professional_id,        role_code,        email_address FROM professionals EXCEPT SELECT professionals.professional_id,        professionals.role_code,        professionals.email_address FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id 
 SELECT professional_id,        role_code,        email_address FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT Owners.owner_id,        Owners.first_name,        Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Dogs.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Treatments.professional_id HAVING COUNT(*) >= 2 
 SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code WHERE Dogs.abandoned_yn = 0 GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code WHERE Dogs.abandoned_yn = 0 GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1 
 SELECT dogs.owner_id,        owners.last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1 
 SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_code ORDER BY sum(treatments.cost_of_treatment) LIMIT 1 
 SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code =     (SELECT treatment_type_code      FROM treatments      GROUP BY treatment_type_code      ORDER BY sum(cost_of_treatment)      LIMIT 1) 
 SELECT sum(treatments.cost_of_treatment),        owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT sum(treatments.cost_of_treatment),        owners.owner_id,        owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Treatments.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Treatments.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2 
 SELECT Professionals.first_name,        Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT Professionals.first_name,        Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT Treatments.date_of_treatment,        Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id 
 SELECT Treatments.date_of_treatment,        Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id 
 SELECT Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT DISTINCT Owners.first_name,                 Owners.last_name,                 Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.date_of_birth > '1980-01-01'   AND Dogs.date_arrived > '2010-01-01'   AND Dogs.date_departed < '2020-01-01'   AND Dogs.gender = 'F'   AND Dogs.weight > 20 ORDER BY Dogs.date_of_birth 
 SELECT DISTINCT Owners.first_name,                 Owners.last_name,                 Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.date_of_birth > '1980-01-01'   AND Dogs.date_arrived > '2010-01-01'   AND Dogs.date_departed < '2020-01-01'   AND Dogs.gender = 'F'   AND Dogs.weight > 20 
 SELECT DISTINCT Owners.first_name,                 Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.date_of_birth > '1980-01-01'   AND Dogs.gender = 'F'   AND Dogs.size_code = 'L'   AND Dogs.weight > 20   AND Dogs.date_arrived > '2010-01-01'   AND Dogs.date_departed < '2015-01-01'   AND Owners.state = 'NY'   AND Owners.zip_code = '10001'   AND Owners.email_address = 'owner@example.com'   AND Owners.home_phone = '123-456-7890'   AND Owners.cell_number = '098-765-4321' 
 SELECT DISTINCT owners.first_name,                 dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id 
 SELECT Dogs.name,        Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code =     (SELECT breed_code      FROM Dogs      GROUP BY breed_code      ORDER BY count(*) ASC      LIMIT 1) 
 SELECT Dogs.name,        Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code =     (SELECT breed_code      FROM Dogs      GROUP BY breed_code      ORDER BY count(*) ASC      LIMIT 1) 
 SELECT DISTINCT owners.first_name,                 dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = "Virginia" 
 SELECT DISTINCT owners.first_name,                 dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = "Virginia" 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.abandoned_yn = 'N'   AND Dogs.breed_code = 'Labrador'   AND Dogs.size_code = 'Large'   AND Dogs.name = 'Max'   AND Dogs.age > 3   AND Dogs.gender = 'Male'   AND Dogs.weight > 20   AND Treatments.cost_of_treatment > 100 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.abandoned_yn = '0'   AND Dogs.gender = 'F'   AND Dogs.size_code = 'L'   AND Dogs.weight > 20   AND Treatments.cost_of_treatment > 100 
 SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth =     (SELECT date_of_birth      FROM dogs      ORDER BY date_of_birth      LIMIT 1) 
 SELECT DISTINCT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth =     (SELECT min(date_of_birth)      FROM dogs) 
 SELECT email_address FROM Professionals WHERE city = "Honolulu"   AND state = "Hawaii" UNION SELECT email_address FROM Professionals WHERE city = "Madison"   AND state = "Wisconsin" 
 SELECT email_address FROM Professionals WHERE city = "Honolulu"   AND state = "Hawaii" UNION SELECT email_address FROM Professionals WHERE city = "Milwaukee"   AND state = "Wisconsin" 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT date_arrived,        date_departed FROM Dogs WHERE abandoned_yn = 'N'   AND breed_code = 'Labrador'   AND size_code = 'Large'   AND age > 10   AND date_of_birth > '1950-01-01'   AND gender = 'Male'   AND weight > 20 ORDER BY date_of_birth 
 SELECT count(DISTINCT dog_id) FROM treatments 
 SELECT count(DISTINCT dog_id) FROM treatments WHERE treatment_type_code = "Dog" 
 SELECT count(DISTINCT professional_id) FROM Treatments 
 SELECT count(DISTINCT professional_id) FROM treatments 
 SELECT role_code,        street,        city,        state FROM Professionals WHERE city LIKE '%West%' 
 SELECT role_code,        street,        city,        state FROM Professionals WHERE city LIKE '%West%' 
 SELECT first_name,        last_name,        email_address FROM Owners WHERE state LIKE '%North%' 
 SELECT first_name,        last_name,        email_address FROM Owners WHERE state LIKE '%North%' 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM dogs WHERE date_of_birth > date_arrived   AND date_departed < date_adopted   AND abandoned_yn = 'N'   AND gender = 'F'   AND size_code = 'L'   AND breed_code = 'Labrador'   AND age > 20   AND weight > 200 
 SELECT count(*) FROM dogs WHERE date_of_birth > date_arrived   AND date_departed < date_of_birth   AND date_arrived > date_of_birth   AND date_departed < date_of_birth   AND weight > 20   AND gender = 'F'   AND size_code = 'Large'   AND breed_code = 'Labrador'   AND abandoned_yn = 'N' 
 SELECT count(*) FROM Owners WHERE home_phone IS NULL   AND cell_number IS NULL   AND email_address = "No"   AND city = "Temporary" 
 SELECT count(*) FROM Owners WHERE owner_id NOT IN     (SELECT owner_id      FROM Dogs) 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
 SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs WHERE abandoned_yn = 'N'   AND breed_code = "Labrador"   AND size_code = "Large"   AND date_of_birth > "1996-08-22"   AND date_arrived > "2013-04-15"   AND date_departed < "2014-01-01"   AND gender = "Male"   AND weight > 25; 
 SELECT age FROM Dogs ORDER BY date_of_birth DESC LIMIT 1 
 SELECT age FROM Dogs WHERE date_of_birth =     (SELECT min(date_of_birth)      FROM Dogs) 
 SELECT charge_type,        charge_amount FROM charges 
 SELECT charge_type,        charge_amount FROM charges 
 SELECT charge_amount FROM charges WHERE charge_type =     (SELECT charge_type      FROM charges      GROUP BY charge_type      ORDER BY sum(charge_amount) DESC      LIMIT 1) 
 SELECT charge_amount FROM charges GROUP BY charge_type ORDER BY sum(charge_amount) DESC LIMIT 1 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT email_address,        cell_number,        home_phone FROM Professionals 
 SELECT DISTINCT breed_code,                 size_code FROM Dogs 
 SELECT DISTINCT breed_code,                 size_code FROM Dogs 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code 
 SELECT count(*) FROM singer WHERE Citizenship = "American"   AND Birth_Year > 1980   AND Net_Worth_Millions > 10 
 SELECT count(*) FROM singer WHERE Citizenship = "American"   AND Birth_Year > 1980   AND Net_Worth_Millions > 10 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Birth_Year,        Citizenship FROM singer 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= "French" 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Citizenship,        COUNT(*) FROM singer WHERE Birth_Year >= 1950 GROUP BY Citizenship 
 SELECT Citizenship,        COUNT(*) FROM singer WHERE Birth_Year > 1980 GROUP BY Citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American"   AND song.Highest_Position = 1   AND song.Sales > 50000 ORDER BY singer.Net_Worth_Millions DESC 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American" GROUP BY singer.Name 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1980   AND singer.Citizenship = "American" GROUP BY singer.Name 
 SELECT Name FROM singer WHERE Birth_Year!= "null"   AND Net_Worth_Millions!= "null"   AND Citizenship!= "null" EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT name FROM singer WHERE singer_id NOT IN     (SELECT singer_id      FROM song) 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT count(*) FROM Other_Available_Features 
 SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = "AirCon" 
 SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code 
 SELECT property_name FROM properties WHERE property_type_code = 'House'   AND room_count > 1 UNION SELECT property_name FROM properties WHERE property_type_code = 'Apartment'   AND room_count > 1 
