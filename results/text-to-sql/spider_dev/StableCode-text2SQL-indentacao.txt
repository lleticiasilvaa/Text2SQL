 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT name,        country,        age FROM singer ORDER BY age DESC 
 SELECT name,        country,        age FROM singer ORDER BY age DESC 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT avg(age),        min(age),        max(age) FROM singer WHERE country = 'France' 
 SELECT name,        song_release_year FROM singer ORDER BY age LIMIT 1 
 SELECT Song_Name,        Song_release_year FROM singer WHERE Age =     (SELECT min(age)      FROM singer) 
 SELECT DISTINCT country FROM singer WHERE age > 20 
 SELECT Country FROM singer WHERE Age > 20 
 SELECT country,        count(*) FROM singer GROUP BY country 
 SELECT country,        count(*) FROM singer GROUP BY country 
 SELECT T2.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.age >     (SELECT avg(age)      FROM singer) 
 SELECT T2.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.age >     (SELECT avg(age)      FROM singer) 
 SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT LOCATION,        name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
 SELECT max(capacity),        avg(average) FROM stadium 
 SELECT avg(capacity),        max(capacity) FROM stadium 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT name,        capacity FROM stadium ORDER BY average DESC LIMIT 1 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT count(*) FROM concert WHERE YEAR = 2014   OR YEAR = 2015 
 SELECT T3.name,        count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN stadium AS T3 ON T3.stadium_id = T1.stadium_id GROUP BY T3.stadium_id 
 SELECT T2.name,        count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id 
 SELECT T2.name,        T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name,        T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year > 2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert) 
 SELECT Country FROM singer WHERE Age > 40 INTERSECT   SELECT Country   FROM singer WHERE Age < 30 
 SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014 
 SELECT name FROM stadium WHERE stadium_id NOT IN     (SELECT stadium_id      FROM concert      WHERE YEAR = 2014) 
 SELECT T2.concert_name,        T2.theme,        count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.concert_id 
 SELECT T1.concert_Name,        T1.Theme,        count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_Name 
 SELECT T3.Name,        COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID JOIN singer AS T3 ON T1.Singer_ID = T3.Singer_ID GROUP BY T3.Name 
 SELECT T3.Name,        count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID JOIN singer AS T3 ON T1.Singer_ID = T3.Singer_ID GROUP BY T3.Name 
 SELECT T3.Name FROM CONCERT AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID WHERE T1.Year = 2014 
 SELECT T2.Name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T1.concert_ID = T3.concert_ID WHERE T3.Year = 2014 
 SELECT name,        country FROM singer WHERE song_name LIKE '%Hey%' 
 SELECT T1.Name,        T1.Country FROM singer AS T1 JOIN CONCAT(T1.Song_Name,'') AS T2 WHERE T2 LIKE '%Hey%' 
 SELECT T1.name,        T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = 2014 INTERSECT   SELECT T1.name,          T1.location   FROM stadium AS T1   JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = 2015 
 SELECT T3.name,        T3.location FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN stadium AS T3 ON T3.stadium_id = T1.stadium_id WHERE T1.year = 2014 INTERSECT   SELECT T3.name,          T3.location   FROM concert AS T1   JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id   JOIN stadium AS T3 ON T3.stadium_id = T1.stadium_id WHERE T1.year = 2015 
 SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity =     (SELECT max(capacity)      FROM stadium) 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT count(*) FROM Pets WHERE weight > 10 
 SELECT weight FROM Pets WHERE pet_age =     (SELECT min(pet_age)      FROM Pets      WHERE pettype = 'dog') 
 SELECT weight FROM Pets WHERE PetType = 'Dog'   AND pet_age =     (SELECT min(pet_age)      FROM Pets      WHERE PetType = 'Dog') 
 SELECT max(weight),        pettype FROM Pets GROUP BY pettype 
 SELECT pettype,        max(weight) FROM Pets GROUP BY pettype 
 SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID = T2.StuID WHERE T2.age > 20 
 SELECT count(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID = T2.StuID WHERE T2.age > 20 
 SELECT count(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.sex = 'F'   AND T1.PetType = 'Dog' 
 SELECT count(*) FROM Has_pet AS T1 JOIN Pets AS T2 ON T1.petid = T2.petid JOIN Student AS T3 ON T1.stuid = T3.stuid WHERE T3.sex = 'F'   AND T2.pettype = 'Dog' 
 SELECT count(DISTINCT pettype) FROM Pets 
 SELECT count(DISTINCT pettype) FROM Pets 
 SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat'   OR T3.pettype = 'Dog' 
 SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Dog'   OR T3.pettype = 'Cat' 
 SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat' INTERSECT   SELECT T1.fname   FROM student AS T1   JOIN has_pet AS T2 ON T1.stuid = T2.stuid   JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Dog' 
 SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat' INTERSECT   SELECT T1.fname   FROM student AS T1   JOIN has_pet AS T2 ON T1.stuid = T2.stuid   JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Dog' 
 SELECT major,        age FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_Pet      WHERE PetType = "Cat") 
 SELECT major,        age FROM student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      WHERE PetType = "Cat") 
 SELECT StuID FROM Has_pet WHERE PetType!= "Cat" 
 SELECT StuID FROM Has_Pet EXCEPT SELECT StuID FROM Has_Pet WHERE PetType = "Cat" 
 SELECT T1.fname,        T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' EXCEPT SELECT T1.fname,        T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' 
 SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' EXCEPT SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' 
 SELECT PetType,        weight FROM Pets ORDER BY pet_age ASC LIMIT 1 
 SELECT PetType,        weight FROM Pets ORDER BY pet_age ASC LIMIT 1 
 SELECT PetID,        weight FROM Pets WHERE pet_age > 1 
 SELECT PetID,        weight FROM Pets WHERE pet_age > 1 
 SELECT avg(pet_age),        max(pet_age),        pettype FROM Pets GROUP BY pettype 
 SELECT avg(pet_age),        max(pet_age),        pettype FROM Pets GROUP BY pettype 
 SELECT avg(weight),        pettype FROM Pets GROUP BY pettype 
 SELECT avg(weight),        pettype FROM Pets GROUP BY pettype 
 SELECT T1.fname,        T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID 
 SELECT DISTINCT T1.fname,                 T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID 
 SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = "Smith" 
 SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith' 
 SELECT count(*),        stuid FROM Has_pet GROUP BY stuid 
 SELECT StuID,        count(*) FROM Has_pet GROUP BY StuID 
 SELECT T1.fname,        T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1 
 SELECT T1.fname,        T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1 
 SELECT T1.LName FROM STUDENT AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3   AND T3.PetType = 'Cat' 
 SELECT T1.LName FROM STUDENT AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3   AND T3.pettype = 'Cat' 
 SELECT avg(age) FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet) 
 SELECT avg(age) FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet) 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT T1.ContId,        T1.continent,        count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId 
 SELECT T1.ContId,        T1.continent,        count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId 
 SELECT count(*) FROM countries 
 SELECT count(*) FROM countries 
 SELECT T1.FullName,        T1.Id,        count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName 
 SELECT T1.FullName,        T1.Id,        count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName 
 SELECT model FROM cars_data GROUP BY model ORDER BY AVG(Horsepower) LIMIT 1 
 SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.Horsepower LIMIT 1 
 SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight <     (SELECT avg(weight)      FROM cars_data) 
 SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight <     (SELECT avg(weight)      FROM cars_data) 
 SELECT T2.Maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Id = T2.Id WHERE T1.Year = 1970 
 SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.Model = T3.Model WHERE T3.Year = 1970 
 SELECT T1.Make,        T1.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Year LIMIT 1 
 SELECT T1.year,        T1.maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id = T2.id ORDER BY T2.year LIMIT 1 
 SELECT DISTINCT Model FROM cars_data WHERE YEAR > 1980 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Year > 1980 
 SELECT T1.continent,        count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid = T2.contid JOIN car_makers AS T3 ON T2.countryid = T3.countryid GROUP BY T1.continent 
 SELECT T1.continent,        count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.contid = T2.contid JOIN car_makers AS T3 ON T2.countryid = T3.countryid GROUP BY T1.continent 
 SELECT country FROM car_makers GROUP BY country ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*),        T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.fullname 
 SELECT count(*),        T1.id,        T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id 
 SELECT Accelerate FROM cars_data WHERE car_names.Make = "amc hornet sportabout (sw)" 
 SELECT Accelerate FROM cars_data WHERE Id IN     (SELECT Id      FROM car_names      WHERE Make = "amc"        AND Model = "hornet sportabout (sw)") 
 SELECT count(*) FROM car_makers WHERE country = "France" 
 SELECT count(*) FROM car_makers WHERE country = "France" 
 SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN countries AS T3 ON T1.Country = T3.CountryId WHERE T3.CountryName = 'usa' 
 SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.Model = T3.Model JOIN countries AS T4 ON T1.Country = T4.CountryId WHERE T4.CountryName = "United States" 
 SELECT avg(mpg) FROM cars_data WHERE cylinders = 4 
 SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4 
 SELECT min(weight) FROM cars_data WHERE cylinders = 8   AND YEAR = 1974 
 SELECT min(Weight) FROM cars_data WHERE Cylinders = 8   AND YEAR = 1974 
 SELECT DISTINCT maker,                 model FROM model_list 
 SELECT maker,        model FROM model_list 
 SELECT country,        countryid FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country 
 SELECT T1.CountryName,        T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT count(*) FROM cars_data WHERE Horsepower > 150 
 SELECT avg(Weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT avg(weight),        YEAR FROM cars_data GROUP BY YEAR 
 SELECT T1.countryid FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T1.continent = "Europe" GROUP BY T1.countryid HAVING count(*) >= 3 
 SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = "Europe" GROUP BY T1.CountryName HAVING count(*) >= 3 
 SELECT max(Horsepower),        T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3 
 SELECT T1.Make,        max(T2.Horsepower) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3 GROUP BY T1.Make 
 SELECT model FROM cars_data GROUP BY model ORDER BY sum(weight) DESC LIMIT 1 
 SELECT model FROM cars_data ORDER BY MPG DESC LIMIT 1 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(Edispl) FROM cars_data WHERE id IN     (SELECT id      FROM car_names      WHERE model = "volvo") 
 SELECT avg(Edispl) FROM cars_data WHERE Make = "Volvo" 
 SELECT max(accelerate),        cylinders FROM cars_data GROUP BY cylinders 
 SELECT max(accelerate),        cylinders FROM cars_data GROUP BY cylinders 
 SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1 
 SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM cars_data WHERE cylinders > 4 
 SELECT count(*) FROM cars_data WHERE cylinders > 4 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980 
 SELECT count(*) FROM cars_data WHERE YEAR = 1980 
 SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = "American Motor Company" 
 SELECT count(*) FROM model_list WHERE maker =     (SELECT id      FROM car_makers      WHERE maker = "American Motor Company") 
 SELECT T1.FullName,        T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3 
 SELECT T1.Maker,        T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "General Motors"   OR T1.Weight > 3500 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T1.Model = T3.Model WHERE T2.Maker = "General Motors"   OR T3.Weight > 3500 
 SELECT DISTINCT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000 
 SELECT DISTINCT YEAR FROM cars_data WHERE weight < 4000 INTERSECT   SELECT DISTINCT YEAR   FROM cars_data WHERE weight > 3000 
 SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
 SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1 
 SELECT T1.cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.model = "volvo" ORDER BY T1.accelerate LIMIT 1 
 SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = "volvo" ORDER BY T1.Accelerate LIMIT 1 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT max(Horsepower)           FROM cars_data)) 
 SELECT count(*) FROM cars_data WHERE Accelerate >     (SELECT max(Accelerate)      FROM cars_data) 
 SELECT count(DISTINCT country) FROM car_makers WHERE id IN     (SELECT maker      FROM model_list      GROUP BY maker      HAVING count(*) > 2) 
 SELECT count(*) FROM   (SELECT country    FROM car_makers    GROUP BY country    HAVING count(*) > 2) 
 SELECT count(*) FROM cars_data WHERE cylinders > 6 
 SELECT count(*) FROM cars_data WHERE cylinders > 6 
 SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1 
 SELECT T1.model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.modelid = T2.id WHERE T2.cylinders = 4 GROUP BY T1.model ORDER BY sum(T2.horsepower) DESC LIMIT 1 
 SELECT T1.MakeId,        T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE Horsepower >     (SELECT min(Horsepower)      FROM cars_data)   AND Cylinders <= 3 
 SELECT makeid,        model FROM cars_data WHERE horsepower >     (SELECT min(horsepower)      FROM cars_data) INTERSECT   SELECT makeid,          model   FROM cars_data WHERE cylinders < 4 
 SELECT max(T1.mpg) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.cylinders = 8   AND T1.year < 1980 
 SELECT max(T1.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.cylinders = 8   OR T1.year < 1980 
 SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < 3500   AND T1.Maker!= 'Ford Motor Company' 
 SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < 3500   AND T1.Maker!= "Ford Motor Company" 
 SELECT country FROM countries EXCEPT SELECT country FROM car_makers 
 SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country 
 SELECT T1.id,        T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) >= 2 INTERSECT SELECT T1.id,        T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) > 3 
 SELECT T1.id,        T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING count(*) >= 2 INTERSECT SELECT T1.id,        T1.maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id = T2.car_name GROUP BY T1.id HAVING count(*) >= 3 
 SELECT T1.countryid,        T2.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.countryid JOIN cars_data AS T3 ON T2.countryid = T3.countryid JOIN car_names AS T4 ON T3.id = T4.makeid WHERE T4.model = 'fiat' GROUP BY T1.countryid HAVING count(*) > 3 UNION SELECT T1.countryid,        T2.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.countryid JOIN cars_data AS T3 ON T2.countryid = T3.countryid WHERE T3.model = 'fiat' GROUP BY T1.countryid HAVING count(*) > 3 
 SELECT T1.countryid,        T2.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.countryid JOIN model_list AS T3 ON T2.id = T3.maker WHERE T3.model = "Fiat" GROUP BY T1.countryid HAVING count(*) > 3 UNION SELECT T1.countryid,        T2.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.countryid JOIN model_list AS T3 ON T2.id = T3.maker WHERE T3.model = "Fiat" GROUP BY T1.countryid HAVING count(*) > 3 
 SELECT Country FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Country FROM airlines WHERE Airline = "Jetblue Airways"; 
 SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways" 
 SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways" 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = 'USA' 
 SELECT Airline,        Abbreviation FROM airlines WHERE Country = 'USA' 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT AirportCode,        AirportName FROM airports WHERE City = "Anthony" 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airlines 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM airports 
 SELECT count(*) FROM flights 
 SELECT count(*) FROM flights 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT count(*) FROM airlines WHERE country = 'USA' 
 SELECT country,        city FROM airports WHERE airportcode = 'Alton'; 
 SELECT city,        country FROM airports WHERE airportcode = 'Alton' 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE AirportCode = 'AKO' 
 SELECT AirportName FROM airports WHERE City = 'Aberdeen' 
 SELECT AirportName FROM airports WHERE City = "Aberdeen" 
 SELECT count(*) FROM flights WHERE sourceairport IN     (SELECT airportcode      FROM airports      WHERE airportname = 'APG') 
 SELECT count(*) FROM flights WHERE sourceairport IN     (SELECT airportcode      FROM airports      WHERE airportname = 'APG') 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO' 
 SELECT count(*) FROM flights WHERE DestAirport = "ATO" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = "Aberdeen" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.airportname = "Aberdeen" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = "Aberdeen" 
 SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport JOIN airports AS T3 ON T3.AirportCode = T2.DestAirport WHERE T1.AirportName = 'Aberdeen'   AND T3.AirportName = 'Ashley' 
 SELECT count(*) FROM flights WHERE sourceairport IN     (SELECT airportcode      FROM airports      WHERE airportname = 'Aberdeen')   AND destairport IN     (SELECT airportcode      FROM airports      WHERE airportname = 'Ashley') 
 SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline WHERE T1.Airline = 'JetBlue Airways' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "Jetblue Airways" 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines'   AND T3.AirportName = 'ASY' 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 ON T1.Airline = T3.uid WHERE T2.AirportCode = 'ASY'   AND T3.Airline = 'United Airlines' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines'   AND T3.AirportCode = 'AHD' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.Airline = "United Airlines"   AND T3.AirportCode = "AHH" 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines'   AND T3.City = 'Aberdeen' 
 SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = "United Airlines"   AND T3.City = "Aberdeen" 
 SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 
 SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY count(*) DESC LIMIT 1 
 SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1 
 SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(*) LIMIT 1 
 SELECT T1.Airline,        count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.abbreviation,        T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T1.uid ORDER BY count(*) LIMIT 1 
 SELECT T1.abbreviation,        T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T2.airline ORDER BY count(*) LIMIT 1 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.airportcode = 'APG' INTERSECT   SELECT DISTINCT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.airline   JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.airportcode = 'CVO' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.airportname = 'APG' INTERSECT   SELECT DISTINCT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.airline   JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.airportname = 'CVO' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline WHERE T2.sourceairport = 'CVO' EXCEPT SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline WHERE T2.sourceairport = 'APG' 
 SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.AirportCode = 'CVO' EXCEPT SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline JOIN airports AS T3 ON T2.sourceairport = T3.airportcode WHERE T3.AirportCode = 'APG' 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline HAVING count(*) >= 10 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) >= 10 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline HAVING count(*) < 200 
 SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200 
 SELECT FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = "United Airlines" 
 SELECT DISTINCT FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'United Airlines' 
 SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport IN     (SELECT AirportCode      FROM airports      WHERE AirportName = "APG") 
 SELECT FlightNo FROM flights WHERE SourceAirport =     (SELECT AirportCode      FROM airports      WHERE AirportName = "APG") 
 SELECT DISTINCT FlightNo FROM flights WHERE DestAirport IN     (SELECT AirportCode      FROM airports      WHERE AirportCode = "APG") 
 SELECT FlightNo FROM flights WHERE DestAirport =     (SELECT AirportCode      FROM airports      WHERE AirportName = "APG") 
 SELECT DISTINCT FLIGHTNO FROM flights WHERE SOURCEAIRPORT IN     (SELECT AIRPORTCODE      FROM airports      WHERE AIRPORTNAME = "Aberdeen"); 
 SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport IN     (SELECT AirportCode      FROM airports      WHERE AirportName = "Aberdeen"); 
 SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen" 
 SELECT DISTINCT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = "Aberdeen" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"   OR T2.AirportName = "Abilene" 
 SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = "Aberdeen"   OR T2.AirportName = "Abilene" 
 SELECT AirportName FROM airports WHERE AirportCode NOT IN     (SELECT DestAirport      FROM flights      UNION      SELECT SourceAirport      FROM flights) 
 SELECT AirportCode FROM airports WHERE AirportCode NOT IN     (SELECT SourceAirport      FROM flights      UNION      SELECT DestAirport      FROM flights) 
 SELECT count(*) FROM employee 
 SELECT count(*) FROM employee 
 SELECT name FROM employee ORDER BY age ASC 
 SELECT Name FROM employee ORDER BY Age ASC 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT City FROM employee WHERE Age > 30 GROUP BY City HAVING COUNT(*) > 1 
 SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1 
 SELECT LOCATION,        COUNT(*) FROM shop GROUP BY LOCATION 
 SELECT LOCATION,        COUNT(*) FROM shop GROUP BY LOCATION 
 SELECT name,        district FROM shop ORDER BY number_products DESC LIMIT 1 
 SELECT manager_name,        district FROM shop ORDER BY number_products DESC LIMIT 1 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT min(Number_products),        max(Number_products) FROM shop 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name,        LOCATION,        district FROM shop ORDER BY number_products DESC 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT name FROM shop WHERE number_products >     (SELECT avg(number_products)      FROM shop) 
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.employee_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id ORDER BY T2.bonus DESC LIMIT 1 
 SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id ORDER BY T2.bonus DESC LIMIT 1 
 SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id 
 SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM evaluation) 
 SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT t1.name FROM shop AS t1 JOIN hiring AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT name FROM shop WHERE shop_id NOT IN     (SELECT shop_id      FROM hiring) 
 SELECT T2.name,        count(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id 
 SELECT count(*),        T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id 
 SELECT sum(bonus) FROM evaluation 
 SELECT sum(bonus) FROM evaluation 
 SELECT * FROM hiring 
 SELECT * FROM hiring 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT District FROM shop WHERE Number_products < 3000 INTERSECT   SELECT District   FROM shop WHERE Number_products > 10000 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(DISTINCT LOCATION) FROM shop 
 SELECT count(*) FROM Documents 
 SELECT count(*) FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT document_id,        document_name,        document_description FROM Documents 
 SELECT document_name,        template_id FROM Documents WHERE document_description LIKE '%w%' 
 SELECT T1.Document_Name,        T1.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description LIKE '%w%' 
 SELECT document_id,        template_id,        document_description FROM Documents WHERE document_name = "Robbin CV" 
 SELECT document_id,        template_id,        document_description FROM Documents WHERE document_name = "Robbin CV" 
 SELECT count(DISTINCT template_id) FROM documents 
 SELECT count(DISTINCT template_id) FROM documents 
 SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'PPT' 
 SELECT count(*) FROM documents AS T1 JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = "PPT" 
 SELECT T1.Template_ID,        count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID 
 SELECT template_id,        count(*) FROM documents GROUP BY template_id 
 SELECT T1.template_id,        T1.template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.template_id,        T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 
 SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1 
 SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1 
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents 
 SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents 
 SELECT count(*) FROM Templates 
 SELECT count(*) FROM templates 
 SELECT template_id,        version_number,        template_type_code FROM templates 
 SELECT template_id,        version_number,        template_type_code FROM templates 
 SELECT DISTINCT template_type_code FROM templates 
 SELECT DISTINCT template_type_code FROM templates 
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP"   OR Template_Type_Code = "PPT" 
 SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP"   OR Template_Type_Code = "PPT" 
 SELECT count(*) FROM ref_template_types WHERE template_type_code = "CV" 
 SELECT count(*) FROM ref_template_types WHERE template_type_code = "CV" 
 SELECT version_number,        template_type_code FROM templates WHERE version_number > 5 
 SELECT version_number,        template_type_code FROM templates WHERE version_number > 5 
 SELECT template_type_code,        count(*) FROM templates GROUP BY template_type_code 
 SELECT template_type_code,        count(*) FROM templates GROUP BY template_type_code 
 SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(*) < 3 
 SELECT min(Version_Number),        template_type_code FROM Templates GROUP BY template_type_code 
 SELECT min(version_number),        template_type_code FROM templates GROUP BY template_type_code 
 SELECT T2.template_type_code FROM documents AS T1 JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = "Data base" 
 SELECT T1.template_type_code FROM Ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN documents AS T3 ON T2.template_id = T3.template_id WHERE T3.document_name = "Data base" 
 SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = "BK" 
 SELECT T1.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = "BK" 
 SELECT T1.template_type_code,        count(*) FROM Ref_template_types AS T1 JOIN Documents AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code 
 SELECT T1.template_type_code,        count(*) FROM Ref_template_types AS T1 JOIN Documents AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code 
 SELECT T1.template_type_code FROM Ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
 SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM templates 
 SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM templates 
 SELECT template_type_code,        template_type_description FROM Ref_template_types 
 SELECT template_type_code,        template_type_description FROM Ref_Template_Types 
 SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD" 
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book" 
 SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code 
 SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID 
 SELECT T1.template_id FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = "Presentation" 
 SELECT template_id FROM ref_template_types WHERE template_type_description = 'Presentation' 
 SELECT count(*) FROM paragraphs 
 SELECT count(*) FROM paragraphs 
 SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Summer Show' 
 SELECT count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = 'Summer Show' 
 SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea ' 
 SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Paragraph_Text LIKE '%Korea%' 
 SELECT T2.paragraph_id,        T2.paragraph_text FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Welcome to NY' 
 SELECT T1.paragraph_id,        T2.paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY' 
 SELECT T2.paragraph_text FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = "Customer reviews" 
 SELECT T2.paragraph_text FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews' 
 SELECT document_id,        count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT document_id,        count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id 
 SELECT T1.Document_ID,        T1.Document_Name,        count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID 
 SELECT T1.Document_ID,        T1.Document_Name,        count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID 
 SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2 
 SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2 
 SELECT T1.document_id,        T2.document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.document_id,        T2.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT   SELECT document_id   FROM paragraphs WHERE paragraph_text = 'Ireland' 
 SELECT T1.document_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text = 'Brazil' INTERSECT   SELECT T1.document_id   FROM documents AS T1   JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text = 'Ireland' 
 SELECT count(*) FROM teacher 
 SELECT count(*) FROM teacher 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Name FROM teacher ORDER BY Age ASC 
 SELECT Age,        Hometown FROM teacher 
 SELECT Age,        Hometown FROM teacher 
 SELECT Name FROM teacher WHERE Hometown!= 'Little Lever Urban District' 
 SELECT Name FROM teacher WHERE Hometown!= 'Little Lever Urban District' 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Name FROM teacher WHERE Age = 32   OR Age = 33 
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
 SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown 
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown,        COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
 SELECT T2.Name,        T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID 
 SELECT T2.name,        T1.course FROM course AS T1 JOIN course_arrange AS T2 ON T1.course_id = T2.course_id 
 SELECT T2.Name,        T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name ASC 
 SELECT T2.Name,        T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID ORDER BY T2.Name ASC 
 SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = "Math" 
 SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = "Math" 
 SELECT T2.Name,        COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID 
 SELECT T2.name,        count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2 
 SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2 
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN     (SELECT Teacher_ID      FROM course_arrange) 
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN     (SELECT Teacher_ID      FROM course_arrange) 
 SELECT count(*) FROM visitor WHERE age < 30 
 SELECT Name FROM VISITOR WHERE LEVEL_of_membership > 4 ORDER BY LEVEL_of_membership DESC 
 SELECT avg(age) FROM visitor WHERE LEVEL_of_membership <= 4 
 SELECT Name,        Level_of_membership FROM visitor WHERE LEVEL_OF_MEMBERSHIP > 4 ORDER BY Age 
 SELECT museum_id,        name FROM museum ORDER BY num_of_staff DESC LIMIT 1 
 SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009 
 SELECT Open_Year,        Num_of_Staff FROM museum WHERE Name = "Plaza Museum" 
 SELECT Name FROM museum WHERE Num_of_Staff >     (SELECT min(Num_of_Staff)      FROM museum      WHERE Open_Year > 2010) 
 SELECT T1.id,        T1.name,        T1.age FROM VISIT AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.visitor_ID HAVING COUNT(*) > 1 
 SELECT T1.id,        T1.name,        T1.level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id ORDER BY sum(T2.total_spent) DESC LIMIT 1 
 SELECT T1.Museum_ID,        T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM museum WHERE museum_id NOT IN     (SELECT museum_id      FROM visit) 
 SELECT T1.Name,        T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID ORDER BY SUM(T2.Num_of_Ticket) DESC LIMIT 1 
 SELECT avg(Num_of_Ticket),        max(Num_of_Ticket) FROM visit 
 SELECT sum(T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1 
 SELECT T2.Name FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 INTERSECT   SELECT T2.Name   FROM visit AS T1   JOIN visitor AS T2 ON T1.visitor_ID = T2.ID   JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID WHERE T3.Open_Year > 2011 
 SELECT count(*) FROM visitor WHERE id NOT IN     (SELECT visitor_id      FROM visit      WHERE museum_id IN          (SELECT museum_id           FROM museum           WHERE open_year > 2010)) 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players 
 SELECT count(*) FROM players 
 SELECT count(*) FROM matches 
 SELECT count(*) FROM matches 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT first_name,        birth_date FROM players WHERE country_code = "USA" 
 SELECT avg(loser_age),        avg(winner_age) FROM matches 
 SELECT avg(loser_age),        avg(winner_age) FROM MATCHES 
 SELECT avg(winner_rank) FROM matches 
 SELECT avg(winner_rank) FROM matches 
 SELECT max(loser_rank) FROM matches 
 SELECT max(loser_rank) FROM matches 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT country_code) FROM players 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT count(DISTINCT loser_name) FROM matches 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
 SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
 SELECT winner_name FROM matches WHERE winner_id IN     (SELECT winner_id      FROM matches      WHERE YEAR = 2013 INTERSECT        SELECT winner_id        FROM matches WHERE YEAR = 2016) 
 SELECT T1.first_name,        T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT   SELECT T1.first_name,          T1.last_name   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT count(*) FROM matches WHERE YEAR = 2013   OR YEAR = 2016 
 SELECT T1.country_code,        T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "WTA Championships" INTERSECT   SELECT T1.country_code,          T1.first_name   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "Australian Open" 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "WTA Championships" INTERSECT   SELECT T1.first_name,          T1.country_code   FROM players AS T1   JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "Australian Open" 
 SELECT first_name,        country_code FROM players ORDER BY birth_date LIMIT 1 
 SELECT first_name,        country_code FROM players ORDER BY birth_date LIMIT 1 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = "L" ORDER BY birth_date 
 SELECT first_name,        last_name FROM players WHERE hand = "left" ORDER BY birth_date 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.first_name,        T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT T1.winner_name,        T1.winner_rank_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.winner_name,        T1.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.winner_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = "Australian Open" ORDER BY T1.winner_rank_points DESC LIMIT 1 
 SELECT T2.winner_name FROM rankings AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.ranking_points =     (SELECT max(ranking_points)      FROM rankings      WHERE T1.tour =          (SELECT T2.tourney_id           FROM matches AS T2           WHERE T2.tourney_name = "Australian Open"))   AND T1.ranking_date =     (SELECT T2.tourney_date      FROM matches AS T2      WHERE T2.tourney_name = "Australian Open") 
 SELECT T1.loser_name,        T1.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id = T2.player_id JOIN players AS T3 ON T1.winner_id = T3.player_id ORDER BY T1.minutes DESC LIMIT 1 
 SELECT T1.winner_name,        T1.loser_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN players AS T3 ON T1.loser_id = T3.player_id WHERE T1.minutes =     (SELECT max(minutes)      FROM matches) 
 SELECT T2.first_name,        avg(T1.ranking) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name 
 SELECT T2.first_name,        avg(T1.ranking) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name 
 SELECT T1.first_name,        sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id 
 SELECT T2.first_name,        sum(T1.ranking_points) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code,        count(*) FROM players GROUP BY country_code 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT ranking_date,        sum(tours) FROM rankings GROUP BY ranking_date 
 SELECT ranking_date,        sum(tours) FROM rankings GROUP BY ranking_date 
 SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
 SELECT count(*),        YEAR FROM matches GROUP BY YEAR 
 SELECT winner_name,        winner_rank FROM matches WHERE winner_id IN     (SELECT winner_id      FROM matches      WHERE winner_rank =          (SELECT MIN(winner_rank)           FROM matches)) LIMIT 3 
 SELECT winner_name,        winner_rank FROM matches WHERE winner_rank =     (SELECT MIN(winner_rank)      FROM matches) LIMIT 3 
 SELECT COUNT(DISTINCT T1.first_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = "left"   AND T2.tourney_name = "WTA Championships" 
 SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = "L"   AND T2.tourney_name = "WTA Championships" 
 SELECT T1.first_name,        T1.country_code,        T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1 
 SELECT T1.first_name,        T1.country_code,        T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY sum(T2.ranking_points) DESC LIMIT 1 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT hand,        count(*) FROM players GROUP BY hand 
 SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured' 
 SELECT name,        tonnage FROM ship ORDER BY name DESC 
 SELECT name,        date,        result FROM battle 
 SELECT max(killed),        min(killed) FROM death 
 SELECT avg(injured) FROM death 
 SELECT T2.note,        T2.killed,        T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = 't' 
 SELECT name,        result FROM battle WHERE bulgarian_commander!= 'Boril' 
 SELECT DISTINCT T1.id,                 T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' 
 SELECT id,        name FROM battle WHERE result = "Lost"   AND killed > 10 
 SELECT caused_by_ship_id,        T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY caused_by_ship_id ORDER BY sum(killed + injured) DESC LIMIT 1 
 SELECT DISTINCT name FROM battle WHERE bulgarian_commander = "Kaloyan"   AND latin_commander = "Baldwin I" 
 SELECT count(DISTINCT result) FROM battle 
 SELECT count(*) FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE tonnage = 225) 
 SELECT T1.name,        T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT   SELECT T1.name,          T1.date   FROM battle AS T1   JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta' 
 SELECT name,        result,        bulgarian_commander FROM battle WHERE id NOT IN     (SELECT lost_in_battle      FROM ship      WHERE LOCATION = 'English Channel') 
 SELECT note FROM death WHERE note LIKE '%East%' 
 SELECT line_1,        line_2 FROM addresses 
 SELECT line_1,        line_2 FROM addresses 
 SELECT count(*) FROM courses 
 SELECT count(*) FROM courses 
 SELECT course_description FROM courses WHERE course_name = "Math"; 
 SELECT course_description FROM courses WHERE course_name LIKE "%Math%" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea" 
 SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea"; 
 SELECT T1.department_name,        T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.department_name,        T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT department_id) FROM degree_programs 
 SELECT count(DISTINCT department_id) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
 SELECT count(*) FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = "Engineering" 
 SELECT count(*) FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = "Engineering" 
 SELECT section_name,        section_description FROM sections 
 SELECT section_name,        section_description FROM sections 
 SELECT T1.course_name,        T1.course_id FROM courses AS T1 JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2 
 SELECT course_name,        course_id FROM courses WHERE course_id NOT IN     (SELECT course_id      FROM sections      GROUP BY course_id      HAVING count(*) >= 2) 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT section_name FROM sections ORDER BY section_name DESC 
 SELECT T1.semester_name,        T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.semester_name,        T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 
 SELECT department_description FROM departments WHERE department_name LIKE "%computer%" 
 SELECT department_description FROM departments WHERE department_name LIKE "%computer%" 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name,        T2.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = 2   AND T2.semester_id =     (SELECT semester_id      FROM semesters      WHERE semester_name = "WN"        AND year = 2016) 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name,        T2.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) = 2 
 SELECT T2.first_name,        T2.middle_name,        T2.last_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = "Bachelor" 
 SELECT T1.first_name,        T1.middle_name,        T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = "Bachelors" 
 SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,        T2.degree_summary_name FROM degree_programs AS T1 JOIN degree_summaries AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN student_enrolment AS T3 ON T3.degree_program_id = T1.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.degree_program_id,        T2.degree_summary_name FROM degree_programs AS T1 JOIN degree_summaries AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN student_enrolment AS T3 ON T3.degree_program_id = T1.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.student_id,        T2.first_name,        T2.middle_name,        T2.last_name,        count(*) FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.student_id,        T2.first_name,        T2.middle_name,        T2.last_name,        count(*) FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id 
 SELECT semester_name FROM semesters EXCEPT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id 
 SELECT DISTINCT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id 
 SELECT DISTINCT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id 
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.state_province_county = "North Carolina" EXCEPT SELECT T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment AS T3 ON T2.student_id = T3.student_id JOIN Degree_Programs AS T4 ON T3.degree_program_id = T4.degree_program_id 
 SELECT T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.state_province_county = "North Carolina" EXCEPT SELECT T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id JOIN Student_Enrolment_Courses AS T3 ON T3.student_id = T2.student_id JOIN Degree_Programs AS T4 ON T4.degree_program_id = T3.degree_program_id 
 SELECT T1.transcript_date,        T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2 
 SELECT T1.transcript_date,        T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2 
 SELECT cell_mobile_number FROM students WHERE first_name = "Timothy"   AND last_name = "Ward" 
 SELECT cell_mobile_number FROM students WHERE first_name = "Timothy"   AND last_name = "Ward"; 
 SELECT first_name,        middle_name,        last_name FROM students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name,        middle_name,        last_name FROM students ORDER BY date_first_registered LIMIT 1 
 SELECT first_name,        middle_name,        last_name FROM students WHERE date_left =     (SELECT min(date_left)      FROM students) 
 SELECT first_name,        middle_name,        last_name FROM students WHERE date_left =     (SELECT min(date_left)      FROM students) 
 SELECT T2.first_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.permanent_address_id EXCEPT SELECT T2.first_name FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.current_address_id 
 SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id EXCEPT SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id 
 SELECT T1.address_id,        T1.line_1,        T1.line_2,        T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.address_id,        T1.line_1,        T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT avg(transcript_date) FROM transcripts 
 SELECT other_details,        transcript_date FROM transcripts ORDER BY transcript_date ASC LIMIT 1 
 SELECT other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1 
 SELECT count(*) FROM transcripts 
 SELECT count(*) FROM transcripts 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
 SELECT count(*),        student_course_id FROM student_enrolment_courses AS T1 JOIN transcripts AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1 
 SELECT course_id,        max(student_enrolment_id) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id 
 SELECT T1.transcript_date,        T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1 
 SELECT T1.transcript_date,        T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) LIMIT 1 
 SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id =     (SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Master') INTERSECT   SELECT T1.semester_name   FROM semesters AS T1   JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id =     (SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Bachelor') 
 SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id =     (SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Masters') INTERSECT   SELECT T1.semester_id   FROM Semesters AS T1   JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id =     (SELECT degree_program_id      FROM degree_programs      WHERE degree_summary_name = 'Bachelors') 
 SELECT count(DISTINCT current_address_id) FROM students 
 SELECT DISTINCT T1.line_1,                 T1.line_2,                 T1.line_3,                 T1.city,                 T1.zip_postcode,                 T1.state_province_county,                 T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id 
 SELECT * FROM students ORDER BY other_student_details DESC 
 SELECT other_student_details FROM students ORDER BY last_name DESC 
 SELECT section_description FROM sections WHERE section_name = "H"; 
 SELECT T1.section_description FROM sections AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name = "h" 
 SELECT first_name FROM students WHERE permanent_address_id IN     (SELECT address_id      FROM addresses      WHERE country = 'Haiti')   OR cell_mobile_number = '09700166582' 
 SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.country = "Haiti" UNION SELECT first_name FROM Students WHERE cell_mobile_number = "099700166582" 
 SELECT Title FROM cartoon ORDER BY Title 
 SELECT Title FROM cartoon ORDER BY Title 
 SELECT title FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT title FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr" 
 SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr" 
 SELECT title,        directed_by FROM cartoon ORDER BY original_air_date 
 SELECT title,        directed_by FROM cartoon ORDER BY original_air_date 
 SELECT title FROM cartoon WHERE directed_by = "Ben Jones"   OR directed_by = "Brandon Vietti" 
 SELECT Title FROM cartoon WHERE Directed_by = "Ben Jones"   OR Written_by = "Brandon Vietti" 
 SELECT country,        count(*) FROM TV_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1 
 SELECT country,        count(*) FROM TV_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1 
 SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_channel 
 SELECT count(DISTINCT series_name),        count(DISTINCT content) FROM TV_channel 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT content FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT package_option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT package_option FROM TV_channel WHERE series_name = "Sky Radio" 
 SELECT count(*) FROM TV_channel WHERE LANGUAGE = "English" 
 SELECT count(*) FROM TV_channel WHERE LANGUAGE = "English" 
 SELECT LANGUAGE,        count(*) FROM TV_channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1 
 SELECT LANGUAGE,        count(*) FROM TV_channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1 
 SELECT LANGUAGE,        COUNT(*) FROM TV_channel GROUP BY LANGUAGE 
 SELECT LANGUAGE,        count(*) FROM TV_channel GROUP BY LANGUAGE 
 SELECT T1.series_name FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.title = "The Rise of the Blue Beetle!" 
 SELECT T1.series_name FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.title = "The Rise of the Blue Beetle" 
 SELECT T1.Title FROM cartoon AS T1 JOIN TV_channel AS T2 ON T1.channel = T2.id WHERE T2.series_name = "Sky Radio" 
 SELECT T1.Title FROM cartoon AS T1 JOIN TV_channel AS T2 ON T1.channel = T2.id WHERE T2.series_name = "Sky Radio" 
 SELECT Episode FROM TV_series ORDER BY Rating 
 SELECT Episode FROM TV_series ORDER BY Rating 
 SELECT Episode,        Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
 SELECT Rating,        Episode FROM TV_series ORDER BY Rating DESC LIMIT 3 
 SELECT min(share),        max(share) FROM TV_series 
 SELECT max(share),        min(share) FROM TV_series 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
 SELECT T1.series_name FROM TV_channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.channel WHERE T2.episode = "A Love of a Lifetime" 
 SELECT T2.series_name FROM TV_series AS T1 JOIN TV_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = "A Love of a Lifetime" 
 SELECT T2.Episode FROM TV_channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = "Sky Radio" 
 SELECT T2.Episode FROM TV_channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio" 
 SELECT directed_by,        count(*) FROM cartoon GROUP BY directed_by 
 SELECT directed_by,        count(*) FROM cartoon GROUP BY directed_by 
 SELECT t1.Production_code,        t1.channel FROM cartoon AS t1 JOIN TV_channel AS t2 ON t1.channel = t2.id ORDER BY t1.original_air_date DESC LIMIT 1 
 SELECT production_code,        channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
 SELECT package_option,        series_name FROM TV_channel WHERE Hight_definition_TV = 'Yes' 
 SELECT package_option,        series_name FROM TV_channel WHERE Hight_definition_TV = 'Yes' 
 SELECT DISTINCT T1.Country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.Written_by = "Todd Casey" 
 SELECT T1.Country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.Written_by = "Todd Casey" 
 SELECT country FROM TV_channel EXCEPT SELECT T1.country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.Written_by = "Todd Casey" 
 SELECT country FROM TV_channel EXCEPT SELECT T1.country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.Written_by = "Todd Casey" 
 SELECT T1.series_name,        T1.country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Ben Jones"   AND T2.written_by = "Michael Chang" 
 SELECT T1.series_name,        T1.country FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Ben Jones" INTERSECT   SELECT T1.series_name,          T1.country   FROM TV_channel AS T1   JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Michael Chang" 
 SELECT pixel_aspect_ratio_PAR,        country FROM TV_channel WHERE LANGUAGE!= 'English' 
 SELECT pixel_aspect_ratio_PAR,        country FROM TV_channel WHERE LANGUAGE!= 'English' 
 SELECT country FROM TV_channel GROUP BY country HAVING count(*) > 2 
 SELECT id FROM TV_channel GROUP BY id HAVING count(*) > 2 
 SELECT id FROM TV_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT id FROM TV_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = "Ben Jones" 
 SELECT package_option FROM TV_channel EXCEPT SELECT T1.package_option FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Ben Jones" 
 SELECT DISTINCT package_option FROM TV_channel EXCEPT SELECT T1.package_option FROM TV_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = "Ben Jones" 
 SELECT count(*) FROM poker_player 
 SELECT count(*) FROM poker_player 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT Final_Table_Made,        Best_Finish FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT avg(Earnings) FROM poker_player 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
 SELECT max(T1.Final_Table_Made) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000 
 SELECT max(T1.Final_Table_Made) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC 
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1 
 SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1 
 SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
 SELECT T1.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1 
 SELECT avg(Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200 
 SELECT avg(Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC 
 SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality,        COUNT(*) FROM people GROUP BY Nationality 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
 SELECT Name,        Birth_Date FROM people ORDER BY Name ASC 
 SELECT Name,        Birth_Date FROM people ORDER BY Name 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people WHERE Nationality!= "Russia" 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
 SELECT Name FROM people WHERE People_ID NOT IN     (SELECT People_ID      FROM poker_player) 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT Nationality) FROM people 
 SELECT count(DISTINCT state) FROM area_code_state 
 SELECT contestant_number,        contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
 SELECT vote_id,        phone_number,        state FROM votes 
 SELECT max(area_code),        min(area_code) FROM area_code_state 
 SELECT created FROM votes WHERE state = "CA" ORDER BY created DESC LIMIT 1 
 SELECT contestant_name FROM contestants WHERE contestant_name!= 'Jessie Alloway' 
 SELECT DISTINCT state,                 created FROM votes 
 SELECT T1.contestant_number,        T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2 
 SELECT T1.contestant_number,        T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1 
 SELECT count(*) FROM votes WHERE state = "NY"   OR state = "CA" 
 SELECT count(*) FROM contestants WHERE contestant_number NOT IN     (SELECT contestant_number      FROM votes) 
 SELECT area_code FROM AREA_CODE_STATE GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.created,        T1.state,        T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' 
 SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code = T2.area_code JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Tabatha Gehling' INTERSECT   SELECT T1.area_code   FROM AREA_CODE_STATE AS T1   JOIN VOTES AS T2 ON T1.area_code = T2.area_code   JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Kelly Clauss' 
 SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%' 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT name FROM country WHERE indepyear > 1950 
 SELECT count(*) FROM country WHERE GovernmentForm = "Republic"; 
 SELECT count(*) FROM country WHERE GovernmentForm = 'Republic' 
 SELECT sum(SurfaceArea) FROM country WHERE Region = "Caribbean"; 
 SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Caribbean' 
 SELECT Continent FROM country WHERE Name = "Anguilla"; 
 SELECT Continent FROM country WHERE Name = "Anguilla"; 
 SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = "Kabul"; 
 SELECT Region FROM country WHERE Capital =     (SELECT ID      FROM city      WHERE Name = "Kabul"); 
 SELECT language FROM countrylanguage WHERE countrycode =     (SELECT countrycode      FROM country      WHERE name = "Aruba") GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE countrycode =     (SELECT code      FROM country      WHERE name = "Aruba") GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT Population,        LifeExpectancy FROM country WHERE Name = 'Brazil' 
 SELECT Population,        LifeExpectancy FROM country WHERE Name = 'Brazil' 
 SELECT Region,        Population FROM country WHERE Name = "Angola"; 
 SELECT region,        population FROM country WHERE name = 'Angola' 
 SELECT avg(LifeExpectancy) FROM country WHERE Region = "Central Africa" 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Central Africa' 
 SELECT name FROM country WHERE continent = 'Asia'   AND lifeexpectancy =     (SELECT MIN(lifeexpectancy)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia'   AND lifeexpectancy =     (SELECT MIN(lifeexpectancy)      FROM country      WHERE continent = 'Asia') 
 SELECT sum(population),        max(GNP) FROM country WHERE Continent = 'Asia' 
 SELECT MAX(population),        MAX(GNP) FROM country WHERE Continent = 'Asia' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa'   AND GovernmentForm = 'Republic' 
 SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa'   AND GovernmentForm = 'Republic'; 
 SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia'   OR Continent = 'Europe' 
 SELECT sum(SurfaceArea) FROM country WHERE Continent = "Asia"   OR Continent = "Europe" 
 SELECT Population FROM city WHERE District = "Gelderland"; 
 SELECT SUM(population) FROM city WHERE district = 'Gelderland' 
 SELECT avg(GNP),        sum(Population) FROM country WHERE GovernmentForm = "US territory" 
 SELECT avg(GNP),        sum(Population) FROM country WHERE Continent = 'US' 
 SELECT COUNT (DISTINCT language) FROM countrylanguage 
 SELECT COUNT(DISTINCT language) FROM countrylanguage 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa' 
 SELECT count(*) FROM countrylanguage WHERE countrycode =     (SELECT code      FROM country      WHERE name = "Aruba") 
 SELECT COUNT (T2.language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = "Aruba" 
 SELECT count(*) FROM countrylanguage WHERE countrycode = "AF"   AND isofficial = "1" 
 SELECT count(*) FROM countrylanguage WHERE countrycode =     (SELECT code      FROM country      WHERE name = "Afghanistan")   AND isofficial = '1'; 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.continent ORDER BY count(*) DESC LIMIT 1 
 SELECT COUNT(*) FROM countrylanguage WHERE language = 'English' INTERSECT   SELECT COUNT(*)   FROM countrylanguage WHERE language = 'Dutch' 
 SELECT count(*) FROM countrylanguage WHERE language = 'English' INTERSECT   SELECT count(*)   FROM countrylanguage WHERE language = 'Dutch' 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' INTERSECT   SELECT T1.name   FROM country AS T1   JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'French' 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' INTERSECT   SELECT T1.name   FROM country AS T1   JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'French' 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' INTERSECT   SELECT T1.name   FROM country AS T1   JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'French' 
 SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' INTERSECT   SELECT T1.name   FROM country AS T1   JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'French' 
 SELECT COUNT(DISTINCT Continent) FROM countrylanguage WHERE Language = 'Chinese' 
 SELECT COUNT(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese' 
 SELECT Region FROM country WHERE Code IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English'      UNION      SELECT CountryCode      FROM countrylanguage      WHERE Language = 'Dutch') 
 SELECT Region FROM country WHERE Code IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'Dutch'      UNION      SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English') 
 SELECT name FROM country WHERE code IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      UNION SELECT countrycode      FROM countrylanguage      WHERE language = 'Dutch') 
 SELECT name FROM country WHERE code IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      UNION SELECT countrycode      FROM countrylanguage      WHERE language = 'Dutch') 
 SELECT language FROM countrylanguage WHERE continent = "Asia" GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE continent = 'Asia'      GROUP BY countrycode      ORDER BY count(*) DESC      LIMIT 1) GROUP BY language ORDER BY count(*) DESC LIMIT 1; 
 SELECT language FROM countrylanguage WHERE percentage = 100   AND countrycode IN     (SELECT countrycode      FROM country      WHERE governmentform = 'Republic') 
 SELECT language FROM countrylanguage WHERE countrycode IN     (SELECT code      FROM country      WHERE governmentform = 'Republic') GROUP BY language HAVING count(*) = 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1 
 SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' GROUP BY city.name ORDER BY city.population DESC LIMIT 1 
 SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia'   AND surfacearea =     (SELECT MAX (surfacearea)      FROM country      WHERE continent = 'Asia') 
 SELECT name,        population,        lifeexpectancy FROM country WHERE continent = 'Asia'   AND surfacearea =     (SELECT MAX(surfacearea)      FROM country      WHERE continent = 'Asia') 
 SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English') 
 SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English') 
 SELECT sum(t1.population) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language!= "English" 
 SELECT SUM(Population) FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English') 
 SELECT language FROM countrylanguage WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE headofstate = "Beatrix") ORDER BY percentage DESC LIMIT 1; 
 SELECT language FROM countrylanguage WHERE countrycode IN     (SELECT countrycode      FROM country      WHERE headofstate = "Beatrix") ORDER BY percentage DESC LIMIT 1; 
 SELECT count(DISTINCT language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.indepyear < 1930 
 SELECT count(DISTINCT language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.indepyear < 1930 
 SELECT name FROM country WHERE surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE surfacearea >     (SELECT min(surfacearea)      FROM country      WHERE continent = 'Europe') 
 SELECT name FROM country WHERE continent = 'Africa'   AND population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Africa'   AND population <     (SELECT min(population)      FROM country      WHERE continent = 'Asia') 
 SELECT name FROM country WHERE continent = 'Asia'   AND population >     (SELECT max(population)      FROM country      WHERE continent = 'Africa') 
 SELECT name FROM country WHERE continent = 'Asia'   AND population >     (SELECT max(population)      FROM country      WHERE continent = 'Africa') 
 SELECT countrycode FROM countrylanguage WHERE language!= "English" 
 SELECT countrycode FROM countrylanguage WHERE language!= "English" 
 SELECT countrycode FROM countrylanguage WHERE LANGUAGE!= "English" 
 SELECT countrycode FROM countrylanguage WHERE language!= "English" 
 SELECT Code FROM country WHERE Code NOT IN     (SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English')   AND GovernmentForm!= 'Republic' 
 SELECT code FROM country WHERE code NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English')   AND governmentform!= 'Republic' 
 SELECT T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode = T2.code JOIN countrylanguage AS T3 ON T2.code = T3.countrycode WHERE T2.continent = "Europe"   AND T3.language!= "English" 
 SELECT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language!= 'English'   AND T2.isofficial = 'Yes'   AND T2.countrycode IN     (SELECT countrycode      FROM countrylanguage      WHERE language = 'English')   AND T2.continent = 'Europe'; 
 SELECT DISTINCT t1.name FROM city AS t1 JOIN countrylanguage AS t2 ON t1.countrycode = t2.countrycode WHERE t2.language = "Chinese"   AND t2.isofficial = 1   AND t2.continent = "Asia"; 
 SELECT DISTINCT T1.name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = "Chinese"   AND T2.isofficial = 1   AND T2.continent = "Asia"; 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT name,        indepyear,        surfacearea FROM country ORDER BY population LIMIT 1 
 SELECT population,        name,        head_of_state FROM country ORDER BY surface_area DESC LIMIT 1 
 SELECT name,        population,        head_of_state FROM country ORDER BY surface_area DESC LIMIT 1 
 SELECT T1.name,        count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING count(*) >= 3 
 SELECT T1.name,        count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING count(*) > 2 
 SELECT count(*),        district FROM city WHERE population >     (SELECT avg(population)      FROM city) GROUP BY district 
 SELECT count(*),        T1.district FROM city AS T1 JOIN country AS T2 ON T1.countrycode = T2.code WHERE population >     (SELECT avg(population)      FROM city) GROUP BY T1.district 
 SELECT T2.GovernmentForm,        sum(T1.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy > 72 GROUP BY T2.GovernmentForm 
 SELECT governmentform,        sum(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform 
 SELECT avg(LifeExpectancy),        sum(Population),        Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 
 SELECT Continent,        SUM(Population),        avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name,        surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
 SELECT name FROM country ORDER BY population DESC LIMIT 3 
 SELECT name FROM city GROUP BY countrycode ORDER BY SUM (population) DESC LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT name FROM country ORDER BY population LIMIT 3 
 SELECT count(*) FROM country WHERE Continent = 'Asia' 
 SELECT count(*) FROM country WHERE Continent = 'Asia' 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000 
 SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000 
 SELECT sum(population),        avg(surfacearea) FROM country WHERE continent = 'North America'   AND surfacearea > 3000 
 SELECT sum(population),        avg(surfacearea) FROM country WHERE region = "North America"   AND surfacearea > 3000 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000; 
 SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
 SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1 
 SELECT language,        countrycode,        percentage FROM countrylanguage ORDER BY percentage DESC LIMIT 1 
 SELECT countrycode,        language FROM countrylanguage ORDER BY percentage DESC LIMIT 1 
 SELECT count(*) FROM countrylanguage WHERE language = 'Spanish'   AND percentage =     (SELECT max(percentage)      FROM countrylanguage      WHERE language = 'Spanish') 
 SELECT count(*) FROM countrylanguage WHERE language = "Spanish"   AND percentage > 0 
 SELECT countrycode FROM countrylanguage WHERE language = "Spanish" GROUP BY countrycode ORDER BY AVG(percentage) DESC LIMIT 1 
 SELECT countrycode FROM countrylanguage WHERE language = "Spanish" GROUP BY countrycode ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM conductor 
 SELECT count(*) FROM conductor 
 SELECT Name FROM conductor ORDER BY Age ASC 
 SELECT Name FROM conductor ORDER BY Age 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Name FROM conductor WHERE Nationality!= "USA" 
 SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC 
 SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC 
 SELECT avg(Attendance) FROM show 
 SELECT avg(Attendance) FROM show 
 SELECT max(official_ratings_(millions)),        min(official_ratings_(millions)) FROM performance WHERE TYPE!= "Live final" 
 SELECT max(share),        min(share) FROM performance WHERE TYPE!= "Live final" 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT count(DISTINCT nationality) FROM conductor 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
 SELECT Name FROM conductor ORDER BY YEAR_of_Work DESC LIMIT 1 
 SELECT Name FROM conductor ORDER BY YEAR_of_Work DESC LIMIT 1 
 SELECT T2.name,        T3.orchestra FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id JOIN conductor AS T3 ON T2.conductor_id = T3.conductor_id 
 SELECT T2.name,        T1.orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name HAVING count(*) > 1 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name HAVING count(*) > 1 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008 
 SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008 
 SELECT Record_Company,        COUNT(*) FROM orchestra GROUP BY Record_Company 
 SELECT Record_Company,        count(*) FROM orchestra GROUP BY Record_Company 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC 
 SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN     (SELECT Orchestra_ID      FROM performance) 
 SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN     (SELECT Orchestra_ID      FROM performance) 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT Record_Company FROM orchestra WHERE YEAR_OF_FOUNDED < 2003 INTERSECT   SELECT Record_Company   FROM orchestra WHERE YEAR_OF_FOUNDED > 2003 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT count(*) FROM orchestra WHERE major_record_format = "CD"   OR major_record_format = "DVD" 
 SELECT T2.year_of_founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.orchestra_id HAVING count(*) > 1 
 SELECT T2.year_of_founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.orchestra_id HAVING count(*) > 1 
 SELECT count(*) FROM highschooler 
 SELECT count(*) FROM highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT name,        grade FROM Highschooler 
 SELECT DISTINCT grade FROM Highschooler 
 SELECT DISTINCT grade FROM Highschooler 
 SELECT grade FROM highschooler WHERE name = 'Kyle' 
 SELECT grade FROM Highschooler WHERE name = "Kyle" 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT name FROM Highschooler WHERE grade = 10 
 SELECT id FROM highschooler WHERE name = "Kyle" 
 SELECT id FROM highschooler WHERE name = "Kyle" 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT student_id,        count(DISTINCT friend_id) FROM Friend GROUP BY student_id 
 SELECT count(DISTINCT friend_id),        student_id FROM Friend GROUP BY student_id 
 SELECT T2.name,        count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id 
 SELECT T2.name,        count(*) FROM friend AS T1 JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING count(*) >= 3 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 3 
 SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id = T2.id WHERE T1.student_id =     (SELECT id      FROM highschooler      WHERE name = 'Kyle') 
 SELECT T2.name FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id = T2.id WHERE T1.student_id =     (SELECT id      FROM highschooler      WHERE name = "Kyle") 
 SELECT count(*) FROM friend WHERE student_id IN     (SELECT id      FROM highschooler      WHERE name = 'Kyle') 
 SELECT count(*) FROM friend WHERE student_id IN     (SELECT id      FROM highschooler      WHERE name = 'Kyle') 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT id FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT name FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT name FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT T1.id FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id JOIN likes AS T3 ON T1.id = T3.student_id WHERE T2.friend_id = T3.liked_id 
 SELECT student_id FROM friend INTERSECT SELECT student_id FROM likes 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id JOIN likes AS T3 ON T1.id = T3.student_id 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id JOIN likes AS T3 ON T1.id = T3.student_id 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT student_id,        count(*) FROM Likes GROUP BY student_id 
 SELECT T1.name,        count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id 
 SELECT name,        count(*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2 
 SELECT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING count(*) >= 2   AND grade > 5 
 SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING count(*) >= 2 
 SELECT count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle' 
 SELECT count(*) FROM likes AS T1 JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id 
 SELECT avg(T1.grade) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id = T2.student_id 
 SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) 
 SELECT grade FROM highschooler WHERE id NOT IN     (SELECT student_id      FROM friend) ORDER BY grade LIMIT 1 
 SELECT state FROM owners INTERSECT SELECT state FROM professionals 
 SELECT state FROM owners INTERSECT SELECT state FROM professionals 
 SELECT avg(age) FROM Dogs WHERE dog_id IN     (SELECT dog_id      FROM Treatments) 
 SELECT avg(T1.age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT T1.professional_id,        T1.last_name,        T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = "Indiana"   OR T2.treatment_id IN     (SELECT T2.treatment_id      FROM Treatments AS T2      GROUP BY T2.treatment_id      HAVING count(*) > 2) 
 SELECT T1.professional_id,        T1.last_name,        T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = "Indiana"   OR T2.dog_id IN     (SELECT T3.dog_id      FROM Treatments AS T3      GROUP BY T3.dog_id      HAVING count(*) > 2) 
 SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T2.dog_id HAVING sum(T3.cost_of_treatment) <= 1000 
 SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T2.dog_id HAVING sum(T3.cost_of_treatment) <= 1000 
 SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs 
 SELECT first_name FROM owners UNION SELECT first_name FROM professionals EXCEPT SELECT name FROM dogs 
 SELECT professional_id,        role_code,        email_address FROM professionals EXCEPT SELECT T1.professional_id,        T1.role_code,        T1.email_address FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id 
 SELECT professional_id,        role_code,        email_address FROM professionals EXCEPT SELECT T1.professional_id,        T1.role_code,        T1.email_address FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id 
 SELECT T1.owner_id,        T2.first_name,        T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,        T2.first_name,        T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.professional_id,        T2.role_code,        T1.first_name FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.professional_id,        T1.role_code,        T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT t1.breed_name FROM Breeds AS t1 JOIN Dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_name ORDER BY count(*) DESC LIMIT 1 
 SELECT T1.owner_id,        T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,        T2.first_name,        T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum(T2.cost_of_treatment) LIMIT 1 
 SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum(T2.cost_of_treatment) LIMIT 1 
 SELECT T1.owner_id,        T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.owner_id,        T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1 
 SELECT T1.professional_id,        T2.cell_number FROM Professionals AS T1 JOIN Owners AS T2 ON T1.professional_id = T2.owner_id JOIN Treatments AS T3 ON T3.professional_id = T1.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T1.professional_id,        T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2 
 SELECT T2.first_name,        T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T1.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT T2.first_name,        T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T1.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
 SELECT T1.date_of_treatment,        T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id 
 SELECT T1.date_of_treatment,        T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id 
 SELECT T1.charge_amount,        T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code 
 SELECT T1.charge_amount,        T2.treatment_type_description FROM Charges AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code 
 SELECT T1.first_name,        T1.last_name,        T2.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code 
 SELECT T1.first_name,        T1.last_name,        T2.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code 
 SELECT T2.first_name,        T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T2.first_name,        T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id 
 SELECT T1.name,        T3.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name =     (SELECT breed_name      FROM Breeds      ORDER BY breed_name      LIMIT 1) 
 SELECT T1.name,        T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =     (SELECT breed_code      FROM Breeds      GROUP BY breed_code      ORDER BY count(*) ASC      LIMIT 1) 
 SELECT T2.first_name,        T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = "Virginia" 
 SELECT T2.first_name,        T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = "Virginia" 
 SELECT T1.date_arrived,        T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT T1.date_arrived,        T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
 SELECT t1.last_name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id ORDER BY t2.age LIMIT 1 
 SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.age LIMIT 1 
 SELECT email_address FROM professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT email_address FROM professionals WHERE state = "Hawaii"   OR state = "Wisconsin" 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT date_arrived,        date_departed FROM Dogs 
 SELECT count(DISTINCT dog_id) FROM treatments 
 SELECT count(DISTINCT dog_id) FROM treatments 
 SELECT count(DISTINCT professional_id) FROM treatments 
 SELECT count(DISTINCT professional_id) FROM Treatments 
 SELECT role_code,        street,        city,        state FROM professionals WHERE city LIKE '%West%' 
 SELECT role_code,        street,        city,        state FROM professionals WHERE city LIKE '%West%' 
 SELECT first_name,        last_name,        email_address FROM Owners WHERE state =     (SELECT state      FROM Owners      WHERE first_name LIKE '%North%') 
 SELECT first_name,        last_name,        email_address FROM Owners WHERE state LIKE '%North%' 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1 
 SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) 
 SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM owners WHERE owner_id NOT IN     (SELECT owner_id      FROM dogs) 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT count(*) FROM professionals WHERE professional_id NOT IN     (SELECT professional_id      FROM treatments) 
 SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
 SELECT name,        age,        weight FROM Dogs WHERE abandoned_yn = 1 
 SELECT avg(age) FROM Dogs 
 SELECT avg(age) FROM Dogs 
 SELECT age FROM Dogs ORDER BY date_of_birth LIMIT 1 
 SELECT age FROM Dogs ORDER BY date_of_birth LIMIT 1 
 SELECT charge_type,        charge_amount FROM charges 
 SELECT charge_type,        charge_amount FROM charges 
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1 
 SELECT email_address,        cell_number,        home_phone FROM professionals 
 SELECT email_address,        cell_number,        home_phone FROM professionals 
 SELECT DISTINCT breed_code,                 size_code FROM Dogs 
 SELECT DISTINCT breed_code,                 size_code FROM Dogs 
 SELECT T1.first_name,        T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code 
 SELECT T1.first_name,        T1.last_name,        T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code 
 SELECT count(*) FROM singer 
 SELECT count(*) FROM singer 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
 SELECT Birth_Year,        citizenship FROM singer 
 SELECT Birth_Year,        citizenship FROM singer 
 SELECT Name FROM singer WHERE Citizenship!= "France" 
 SELECT Name FROM singer WHERE Citizenship!= 'French' 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer WHERE Birth_Year = 1948   OR Birth_Year = 1949 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
 SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,        COUNT(*) FROM singer GROUP BY Citizenship 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT Citizenship,        max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
 SELECT T2.Title,        T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID 
 SELECT T2.Title,        T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000 
 SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1 
 SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1 
 SELECT T2.Name,        sum(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name 
 SELECT T2.Title,        sum(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Title 
 SELECT Name FROM singer WHERE Singer_ID NOT IN     (SELECT Singer_ID      FROM song) 
 SELECT Title FROM song EXCEPT SELECT Title FROM singer 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT   SELECT Citizenship   FROM singer WHERE Birth_Year > 1955 
 SELECT count(*) FROM Other_Available_Features 
 SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = "AirCon" 
 SELECT T2.property_type_description FROM properties AS T1 JOIN Ref_property_types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_type_code = "CONDO" 
 SELECT property_name FROM properties WHERE property_type_code = 'House'   AND room_count > 1 UNION SELECT property_name FROM properties WHERE property_type_code = 'Apartment'   AND room_count > 1 
