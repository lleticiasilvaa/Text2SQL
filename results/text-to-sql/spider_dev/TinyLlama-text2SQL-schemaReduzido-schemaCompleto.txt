SELECT count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Theme = "Live"   AND concert.Year = 2010   AND singer.Country = "United States"   AND singer.Is_male = 1 
SELECT count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Theme = "Live"   AND concert.Year = 2010   AND singer.Country = "United States"   AND singer.Is_male = 1 GROUP BY concert.Stadium_ID 
SELECT singer.Name,        singer.Country,        singer.age FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID ORDER BY singer.age DESC 
SELECT singer.Name,        singer.Country,        singer.Age,        singer.Is_male,        concert.Theme,        concert.Year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID ORDER BY singer.Age DESC 
SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = "France"   AND concert.Theme = "concert"   AND concert.Year = 2010 GROUP BY singer.age 
SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Country = "France"   AND singer.is_male = 1   AND concert.theme = "concert" GROUP BY singer.Country 
SELECT singer.Song_Name,        concert.Year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Is_male = 1 ORDER BY singer.Age,          concert.Year LIMIT 1 
SELECT singer.Song_Name,        concert.Year,        concert.Theme FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Is_male = 1   AND singer.Country = "United States"   AND singer.Age =     (SELECT min(Age)      FROM singer      WHERE Is_male = 1) 
SELECT DISTINCT singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.age > 20   AND singer.is_male = 1 
SELECT DISTINCT singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.age > 20   AND singer.is_male = 1 GROUP BY singer.Country HAVING avg(highest) > 1000   AND avg(lowest) < 1000 
SELECT singer.Country,        COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Country 
SELECT singer.Country,        count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Country 
SELECT singer.Song_Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.age > 18   AND singer.is_male = 1 GROUP BY singer.Song_Name HAVING avg(singer.age) >   (SELECT min(age)    FROM singer) 
SELECT singer.Song_Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.age >     (SELECT avg(age)      FROM singer)   AND singer.is_male = 1   AND singer.country = "United States"   AND concert.year > 2000 
SELECT stadium.location,        stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE singer.is_male = 1   AND singer.age > 18   AND singer.country = "United States"   AND concert.theme = "rock"   AND concert.year >= 2000   AND concert.year <= 2010   AND concert.capacity BETWEEN 5000 AND 10000 
SELECT stadium.location,        singer.name,        concert.theme,        concert.year FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE singer.capacity BETWEEN 5000 AND 10000 
SELECT max(stadium.capacity),        avg(stadium.average) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID AND concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID 
SELECT avg(stadium.capacity),        max(stadium.capacity) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.stadium_id 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.stadium_id ORDER BY avg(concert.highest) DESC LIMIT 1 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.Stadium_ID ORDER BY avg(concert.Highest) DESC LIMIT 1 
SELECT count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014   OR concert.Year = 2015 
SELECT count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.year = 2014   OR concert.year = 2015 
SELECT stadium.location,        count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.stadium_id 
SELECT stadium.location,        stadium.name,        count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.location ORDER BY concert.year 
SELECT stadium.location,        stadium.capacity,        concert.theme FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year = 2014   OR concert.year > 2014 GROUP BY concert.theme ORDER BY count(*) DESC LIMIT 1 
SELECT stadium.name,        stadium.capacity FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY sum(concert.highest) DESC LIMIT 1 
SELECT concert.year FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.year ORDER BY count(*) DESC LIMIT 1 
SELECT concert.year FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.year ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT stadium.location FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year = 2010   AND concert.theme = "Tour"   AND singer.country = "United States"   AND singer.is_male = 1 EXCEPT SELECT DISTINCT stadium.location FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year = 2010   AND concert.theme = "Tour"   AND singer.country = "United Kingdom"   AND singer.is_male
SELECT DISTINCT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE singer.country = "United States"   AND concert.theme = "Live"   AND concert.year = 2010 EXCEPT SELECT DISTINCT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE singer.country = "United Kingdom"   AND concert.theme = "Live"   AND concert.year = 2010 
SELECT DISTINCT country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.age > 40   AND singer.age < 30 
SELECT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year = 2014 EXCEPT SELECT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.year = 2014 
SELECT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.year = 2014 EXCEPT SELECT stadium.name FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.theme = "2014" 
SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_name,          concert.theme 
SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = singer.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_name,          concert.theme 
SELECT singer.Name,        COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name 
SELECT singer.Name,        count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name 
SELECT singer.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014 
SELECT singer.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014 
SELECT singer.Name,        singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Name = "Hey"   AND concert.Theme = "Hey"   AND singer.Country = "United States"   AND concert.Year = 2009 
SELECT singer.Name,        singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Name LIKE "%Hey%"   AND concert.Theme = "Hey" 
SELECT stadium.name,        stadium.location FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.theme = "2014" INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN singer ON stadium.stadium_id = singer.stadium_id   JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.theme = "2015" 
SELECT stadium.name,        stadium.location FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.year = 2014 INTERSECT   SELECT stadium.name,          stadium.location   FROM stadium   JOIN singer ON stadium.stadium_id = singer.stadium_id   JOIN concert ON concert.stadium_id = singer.stadium_id WHERE concert.year = 2015 
SELECT count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium)   AND concert.year =     (SELECT max(year)      FROM concert) GROUP BY concert.concert_id ORDER BY count(*) DESC LIMIT 1; 
SELECT count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.stadium_id JOIN concert ON concert.stadium_id = singer.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE stadium.capacity =     (SELECT max(capacity)      FROM stadium)   AND concert.year =     (SELECT max(year)      FROM concert) GROUP BY concert.concert_id ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "dog"   AND pets.pet_age > 10   AND pets.weight > 10 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "dog"   AND pets.pet_age > 10   AND pets.weight > 10 
SELECT pets.pet_age,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Linda"   AND student.lname = "Hoeger"   AND student.sex = "F"   AND student.major = 40   AND pets.pettype = "dog" ORDER BY pets.pet_age LIMIT 1 
SELECT pets.pet_age,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid =     (SELECT stuid      FROM student      WHERE lname = "Hoover"        AND fname = "Kristen"        AND age =          (SELECT min(age)           FROM student           WHERE lname = "Hoover"             AND fname = "Kristen"))   AND pets.pettype = "dog"   AND pets.weight =     (SELECT min(weight)      FROM pets      WHERE petid = pets.petid)   AND pets.pet_age =     (SELECT min(pet_age)      FROM pets); 
SELECT max(Pets.pet_age),        Pets.pet_type FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.petid = Pets.petid GROUP BY Pets.pet_type 
SELECT max(pet_age),        max(weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20 GROUP BY has_pet.stuid HAVING count(*) > 1 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Linda"   AND student.lname = "Homenick"   AND student.age > 20   AND pets.pettype = "dog"   AND pets.weight > 50 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "F"   AND student.lname = "Female"   AND student.sex = "F"   AND pets.pettype = "dog"   AND pets.weight > 0   AND pets.petage > 0 GROUP BY has_pet.petid 
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Linda"   AND student.lname = "Hall"   AND student.sex = "F"   AND pets.pettype = "dog"   AND pets.weight > 0   AND pets.petage > 0 GROUP BY has_pet.petid 
SELECT count(DISTINCT Pets.pettype) FROM Student JOIN Has_pet ON Student.stuid = Has_pet.stuid JOIN Pets ON Has_pet.petid = Pets.petid WHERE Student.fname = "Sophie"   AND Student.lname = "Hoover"   AND Student.sex = "F"   AND Student.major = 400   AND Has_pet.pettype = "dog"   AND Pets.pet_age > 10   AND Pets.weight > 50 GROUP BY Pets.pettype 
SELECT count(DISTINCT pet_type) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Linda"   AND student.lname = "Homenick"   AND student.sex = "F"   AND student.major = 42   AND pets.pettype = "dog"   AND pets.petage > 10   AND pets.weight > 50 
SELECT DISTINCT student.fname,                 student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat"   OR pets.pettype = "dog" 
SELECT DISTINCT student.fname,                 student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "cat"   OR pet.pettype = "dog"   AND pet.petage > 0   AND student.sex = "F" 
SELECT DISTINCT student.fname,                 student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat" INTERSECT   SELECT DISTINCT student.fname,                 student.lname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "dog" 
SELECT DISTINCT student.fname,                 student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "cat" INTERSECT   SELECT DISTINCT student.fname,                 student.lname   FROM student   JOIN has_pet ON student.stuid = has_pet.stuid   JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "dog" 
SELECT major,        age FROM student WHERE stuid NOT IN     (SELECT StuID      FROM has_pet      JOIN pet ON has_pet.petid = pet.petid      JOIN pets ON has_pet.stuid = pets.stuid      WHERE pets.pettype = "cat"        AND pets.petage > 12) 
SELECT major,        age FROM student WHERE stuid NOT IN     (SELECT stuid      FROM has_pet      JOIN pet ON has_pet.petid = pet.petid      JOIN pet ON pet.petid = has_pet.petid      WHERE pet.pettype = "Cat"      AND pet.petage > 10) 
SELECT StuID FROM Student WHERE Sex = 'M'   AND Major = '300' EXCEPT SELECT StuID FROM Has_pet JOIN Pets ON Has_pet.petid = Pets.petid WHERE Pets.pettype = 'Cat'   AND Pets.pet_age > 10   AND Pets.weight > 25 
SELECT StuID FROM Student WHERE StuID NOT IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.petid = Pets.petid      WHERE Pets.pettype = "Cat"        AND Pets.petage > 12) 
SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "dog" EXCEPT SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "cat" 
SELECT DISTINCT student.fname,                 student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE student.sex = "F" EXCEPT SELECT student.fname,        student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE student.sex = "M"   AND pet.pettype = "Cat"   AND pet.weight > 25 
SELECT pets.pet_type,        pets.pet_age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Linda"   AND student.lname = "Hoeger"   AND student.sex = "F"   AND student.major = 40 ORDER BY pets.pet_age LIMIT 1 
SELECT pets.pet_type,        pets.pet_age,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Kathleen"   AND student.lname = "Homenick"   AND student.sex = "F" ORDER BY pets.pet_age LIMIT 1 
SELECT pets.pet_id,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid IN     (SELECT stuid      FROM student      WHERE lname = "King"        AND fname = "Katherine"        AND age > 18        AND sex = "F")   AND pets.pet_age > 1 
SELECT pets.pet_id,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid > 1   AND pets.pet_age > 1 
SELECT avg(pet_age),        max(pet_age),        pets.pet_type FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pet_type 
SELECT avg(pet_age),        max(pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Sophie"   AND student.lname = "Hoover"   AND student.sex = "F"   AND student.major = 42 GROUP BY pets.pettype 
SELECT avg(pet_age),        pet_type FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN pets ON Has_pet.petid = pets.petid GROUP BY pet_type 
SELECT avg(pet_age),        avg(weight) FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN pets ON Has_pet.petid = pets.petid WHERE Student.sex = "F" GROUP BY pets.pettype 
SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "dog"   AND pet.pet_age > 10   AND student.sex = "F" 
SELECT DISTINCT student.fname,                 student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pet ON has_pet.petid = pet.petid WHERE pet.pettype = "dog"   AND pet.petage > 12 
SELECT pets.pet_id FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Smith"   AND student.lname = "Smith" 
SELECT pets.pet_id FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.fname = "Smith"   AND student.lname = "Smith"   AND student.sex = "M" 
SELECT count(*),        student.fname,        student.lname,        student.sex,        student.major,        student.advisor,        student.city_code FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.fname,          student.lname,          student.sex,          student.major,          student.advisor,          student.city_code HAVING count(*) > 0 
SELECT StuID,        count(*) FROM Student JOIN Has_pet ON Student.StuID = Has_pet.StuID JOIN Pets ON Has_pet.PetID = Pets.PetID WHERE Has_pet.pet_age > 12 GROUP BY StuID 
SELECT Fname,        Lname,        Sex,        major,        advisor FROM Student WHERE StuID IN     (SELECT StuID      FROM Has_pet      JOIN Pets ON Has_pet.petid = Pets.petid      WHERE Pets.pettype = "dog"        OR Pets.pettype = "cat") GROUP BY major,          advisor HAVING count(*) > 1 
SELECT DISTINCT student.fname,                 student.lname,                 student.sex,                 student.major,                 student.advisor,                 student.city_code FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid HAVING count(*) > 1 
SELECT fname,        lname FROM student WHERE stuid IN     (SELECT StuID      FROM has_pet      JOIN pet ON has_pet.petid = pet.petid      JOIN pet ON pet.petid = has_pet.petid      WHERE pet.pettype = "cat"        AND pet.petage = 3) 
SELECT fname,        lname FROM student WHERE StuID IN     (SELECT StuID      FROM has_pet      JOIN pet ON has_pet.petid = pet.petid      JOIN pet ON pet.petid = has_pet.petid      WHERE pet.pettype = "cat"        AND pet.petage = 3        AND has_pet.stuid = student.stuid        AND student.sex = "F") 
SELECT avg(pets.pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = "F"   AND student.major = 42 EXCEPT SELECT avg(pets.pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = "M"   AND student.major = 42 
SELECT avg(pets.pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F'   AND student.major = 42 EXCEPT SELECT avg(pets.pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'M'   AND student.major = 42 
SELECT count(DISTINCT continents.continent) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE continents.continent = "Asia" GROUP BY continents.continent 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND car_makers.maker = 1   AND model_list.country = "Europe"   AND cars_data.year = 2000   AND cars_data.accelerate = 1.6   AND cars_data.horsepower = 220   AND cars_data.mpg = 21.5   AND cars_data.weight = 2.5; 
SELECT continents.continent,        count(DISTINCT countries.countryname),        continents.continent FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON car_makers.country = continents.continent JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY continents.continent 
SELECT continents.Continent,        continents.Continent,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId GROUP BY continents.Continent 
SELECT count(DISTINCT continents.continent) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE continents.continent = "Asia" GROUP BY continents.continent 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON cars_data.make = car_makers.id JOIN model_list ON cars_data.model = model_list.model JOIN car_names ON cars_data.model = car_names.model JOIN cars_data ON cars_data.id = cars_data.id WHERE countries.continent = "continents.continent" GROUP BY continents.continent 
SELECT car_makers.FullName,        car_makers.Id,        count(*) FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId GROUP BY car_makers.FullName ORDER BY count(*) DESC 
SELECT car_makers.FullName,        car_makers.id,        count(*) FROM continents JOIN countries ON continents.continent = countries.country JOIN car_makers ON continents.continent = car_makers.id JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.id 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId WHERE car_makers.FullName = "BMW"   AND car_makers.Maker = "BMW"   AND model_list.FullName = "320i"   AND cars_data.Accelerate = 1.6   AND cars_data.Year = 2005   AND cars_data.Horsepower = 150   AND cars_data.Weight = 150   AND cars_data.MPG = 22.5 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId ORDER BY car_makers.FullName,          car_names.Accelerate LIMIT 1 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make WHERE car_names.Accelerate <     (SELECT avg(Accelerate)      FROM car_names)   AND car_makers.FullName = "BMW"   AND model_list.Cylinders < 12   AND model_list.Weight < 1000 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make WHERE car_names.Model =     (SELECT car_names.Model      FROM car_names      JOIN cars_data ON car_names.Make = cars_data.Make      WHERE cars_data.Accelerate <          (SELECT avg(Accelerate)           FROM cars_data))   AND cars_data.Weight <     (SELECT min(Weight)      FROM cars_data) 
SELECT car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.MakeId = car_names.MakeId WHERE cars_data.year = 1970 
SELECT DISTINCT car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId WHERE cars_data.year = 1970 
SELECT car_names.Make,        car_names.Model,        car_names.Year FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId WHERE car_makers.FullName = "BMW" ORDER BY car_names.Year LIMIT 1 
SELECT car_makers.Maker,        model_list.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN cars_data ON cars_data.MakeId = model_list.MakeId ORDER BY model_list.Model LIMIT 1 
SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make WHERE car_makers.FullName = "BMW"   AND model_list.Model = "320i"   AND model_list.Year > 1980 
SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make WHERE car_makers.FullName = "BMW"   AND model_list.Model = "320i"   AND model_list.Year > 1980 
SELECT continents.continent,        count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY continents.continent 
SELECT continents.continent,        count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY continents.continent 
SELECT countries.continent FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY countries.continent ORDER BY count(*) DESC LIMIT 1 
SELECT car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY car_makers.FullName ORDER BY count(*) DESC LIMIT 1 
SELECT model_list.model,        car_makers.fullname,        count(*) FROM continents JOIN countries ON continents.continent = countries.country JOIN car_makers ON continents.continent = car_makers.id JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY model_list.model ORDER BY count(*) DESC 
SELECT count(*),        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY car_makers.FullName 
SELECT cars_data.Accelerate FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_makers.FullName = "amc"   AND car_makers.Maker = "hornet"   AND model_list.Model = "sportabout"   AND cars_data.Year = 2000   AND cars_data.Accelerate > 1000; 
SELECT cars_data.Accelerate FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_names.Make = "amc"   AND car_makers.FullName = "hornet sportabout"   AND model_list.Country = "sw"   AND cars_data.Year = 2000   AND cars_data.Accelerate > 1000; 
SELECT count(DISTINCT car_makers.Maker) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.MakeId = car_names.MakeId WHERE countries.Continent = "France" GROUP BY car_makers.Maker ORDER BY sum(cars_data.Accelerate) DESC LIMIT 1; 
SELECT count(DISTINCT car_makers.Maker) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE countries.Continent = "France" GROUP BY car_makers.Maker 
SELECT count(DISTINCT model_list.model) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.country = "United States" GROUP BY model_list.model ORDER BY cars_data.Accelerate DESC LIMIT 1; 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.country = "United States" GROUP BY cars_data.year 
SELECT avg(cars_data.MPG) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.makeid = model_list.makeid JOIN car_names ON model_list.modelid = car_names.id JOIN cars_data ON cars_data.id = cars_data.id WHERE countries.continent = "continents"   AND cars_data.cylinders = 4   AND cars_data.edispl = 1   AND cars_data.horsepower = 200   AND cars_data.weight = 200   AND cars_data.accelerate = 1.5   AND cars_data.year = 2000 GROUP BY cars_data.id 
SELECT avg(cars_data.MPG) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.makeid = model_list.makeid JOIN car_names ON model_list.modelid = car_names.modelid JOIN cars_data ON cars_data.id = cars_data.id WHERE countries.continent = "continents"   AND cars_data.cylinders = 4   AND cars_data.edispl = 1   AND cars_data.horsepower = 200   AND cars_data.weight = 200   AND cars_data.accelerate = 1.5   AND cars_data.year = 2000 GROUP BY cars_data.id 
SELECT min(cars_data.Weight) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.MakeId = car_makers.Id JOIN model_list ON cars_data.ModelId = model_list.ModelId JOIN car_names ON model_list.ModelId = car_names.ModelId JOIN cars_data ON cars_data.Id = cars_data.Id WHERE countries.Continent = "Asia"   AND car_makers.FullName = "Toyota"   AND model_list.Country = "Japan"   AND car_names.Make = "Toyota"   AND cars_data.Year = 1974   AND cars_data.Cylinders = 8   AND cars_data.Edispl = 1.5   AND cars_data.Accelerate = 0.8   AND cars_data.Horsepower = 120   AND cars_data.Weight =     (SELECT min(
SELECT min(cars_data.Weight) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.MakeId = car_makers.Id JOIN model_list ON cars_data.ModelId = model_list.ModelId JOIN car_names ON model_list.ModelId = car_names.ModelId JOIN cars_data ON cars_data.Id = cars_data.Id WHERE countries.Continent = "Asia"   AND cars_data.Year = 1974   AND car_makers.FullName = "Toyota"   AND model_list.FullName = "Corolla"   AND car_names.Make = "Toyota" GROUP BY cars_data.Weight ORDER BY min(cars_data.Weight) 
SELECT car_makers.Maker,        model_list.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON model_list.Model = cars_data.Model WHERE continents.Continent = "Asia" GROUP BY car_makers.Maker 
SELECT car_makers.Maker,        model_list.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON model_list.Model = cars_data.Model WHERE continents.Continent = "Asia"   AND car_makers.FullName = "Toyota"   AND model_list.FullName = "Corolla"   AND cars_data.Accelerate > 1.5   AND cars_data.Year = 2000   AND cars_data.Weight > 1500   AND cars_data.Cylinders > 4   AND cars_data.MPG > 25   AND cars_data.Edispl > 1.5   AND cars_data.Horsepower > 100   AND cars_data.Maker = "Toyota
SELECT countries.Continent,        countries.CountryId FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY countries.Continent HAVING COUNT(*) >= 1 
SELECT countries.Continent,        cars_data.Id FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON model_list.Maker = cars_data.Maker JOIN cars_data ON cars_data.Id = model_list.Model WHERE countries.Continent IN     (SELECT Continent      FROM continents      GROUP BY Continent      HAVING COUNT(*) >= 1) 
SELECT cars_data.id FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.makeid = car_makers.id JOIN model_list ON cars_data.modelid = model_list.modelid JOIN car_names ON model_list.maker = car_names.maker JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.Accelerate > 1.5   AND cars_data.horsepower > 150 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND car_names.make = "BMW"   AND cars_data.accelerate > 1.5   AND cars_data.horsepower > 150   AND cars_data.year > 2000 
SELECT avg(cars_data.Weight),        cars_data.Year FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.MakeId = model_list.MakeId JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON cars_data.Id = cars_data.Id GROUP BY cars_data.Year 
SELECT avg(cars_data.Weight),        max(cars_data.Year) FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON model_list.Maker = cars_data.Maker JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY cars_data.Year 
SELECT continents.continent FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE continents.continent = "Europe" GROUP BY continents.continent HAVING COUNT(*) >= 3 
SELECT car_names.Make,        car_names.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model WHERE countries.Continent = "Europe" GROUP BY car_names.Make HAVING count(*) >= 3 
SELECT max(cars_data.Horsepower),        car_names.Make FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.id = car_names.MakeId GROUP BY car_names.Make HAVING max(cars_data.Accelerate) = 1   AND max(cars_data.Horsepower) = 3   AND cars_data.Cylinders = 3 
SELECT max(cars_data.Horsepower),        cars_data.Make FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON cars_data.Make = car_makers.Id JOIN model_list ON model_list.Maker = cars_data.Make JOIN cars_data ON cars_data.Id = model_list.Model WHERE countries.Continent = "Asia"   AND cars_data.Cylinders = 3   AND cars_data.Edispl = 1.6 GROUP BY cars_data.Make ORDER BY max(cars_data.Horsepower) DESC LIMIT 1; 
SELECT car_names.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND model_list.model = "320i"   AND cars_data.Accelerate = 1.0   AND cars_data.Year = 2005   AND car_makers.Maker = "BMW" GROUP BY car_names.model ORDER BY max(car_names.MPG) DESC LIMIT 1; 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make JOIN cars_data ON cars_data.id = car_names.MakeId WHERE car_makers.FullName = "BMW"   AND model_list.Model = "3 Series"   AND cars_data.Accelerate = 1.5   AND cars_data.Year = 2005   AND cars_data.MPG =     (SELECT max(MPG)      FROM cars_data      WHERE cars_data.Year = 2005        AND cars_data.Accelerate = 1.5        AND cars_data.Edispl = 0.25        AND cars_data.Horsepower = 200)   AND cars_data.
SELECT avg(cars_data.Horsepower) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.MakeId = model_list.MakeId JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Year < 1980 
SELECT avg(cars_data.Horsepower) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.Model = model_list.Model JOIN car_names ON cars_data.Make = car_names.Make JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Year < 1980 
SELECT avg(cars_data.edispl) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.makeid = car_makers.id JOIN model_list ON cars_data.modelid = model_list.modelid JOIN car_names ON model_list.maker = car_names.maker JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "Volvo"   AND model_list.country = "continents.continent"   AND cars_data.year = 2000 GROUP BY cars_data.edispl 
SELECT avg(cars_data.edispl) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.makeid = car_makers.id JOIN model_list ON cars_data.modelid = model_list.modelid JOIN car_names ON cars_data.makeid = car_names.id JOIN cars_data ON cars_data.id = cars_data.id WHERE car_makers.fullname = "Volvo"   AND model_list.country = "Sweden"   AND cars_data.year = 2000 GROUP BY cars_data.edispl 
SELECT max(cars_data.Accelerate),        cars_data.Cylinders FROM continents JOIN countries ON continents.Continent = countries.Country JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.Model = model_list.Model JOIN car_names ON cars_data.Model = car_names.Model JOIN cars_data ON cars_data.Id = cars_data.Id GROUP BY cars_data.Cylinders 
SELECT max(cars_data.Accelerate) FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.Model = model_list.Model JOIN car_names ON cars_data.Make = car_names.Make JOIN cars_data ON cars_data.Id = cars_data.Id WHERE countries.Continent = "Asia" GROUP BY cars_data.Maker ORDER BY max(cars_data.Accelerate) DESC 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make JOIN cars_data ON cars_data.Make = car_names.Make WHERE car_makers.FullName = "BMW" GROUP BY car_names.Make ORDER BY count(*) DESC LIMIT 1 
SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Make JOIN cars_data ON cars_data.MakeId = car_names.MakeId GROUP BY car_names.Make ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.makeid = cars_data.makeid JOIN model_list ON cars_data.modelid = model_list.modelid JOIN car_names ON cars_data.modelid = car_names.modelid JOIN cars_data ON cars_data.id = cars_data.id WHERE cars_data.Accelerate > 0.8   AND cars_data.year > 2000   AND cars_data.Cylinders > 4   AND cars_data.Edispl > 0.8   AND cars_data.Horsepower > 200   AND cars_data.MPG > 30   AND cars_data.Weight > 2000 GROUP BY cars_data.id HAVING count(*) > 1 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND model_list.model = "320i"   AND car_names.make = "BMW"   AND cars_data.Accelerate > 1.5   AND cars_data.Year > 2000 GROUP BY cars_data.year HAVING count(*) > 1 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND model_list.model = "320i"   AND cars_data.year = 1980   AND cars_data.accelerate = 1.6   AND cars_data.horsepower = 110   AND cars_data.weight = 1500   AND cars_data.mpg = 20.5   AND cars_data.edispl = 1.6 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE countries.continent = "Africa"   AND car_makers.fullname = "BMW"   AND model_list.country = "South Africa"   AND cars_data.year = 1980   AND cars_data.accelerate = 1.6   AND cars_data.edispl = 0.2   AND cars_data.horsepower = 200   AND cars_data.mpg = 12.5   AND cars_data.weight = 2000 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.country = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "American Motor Company"   AND countries.country = "United States"   AND cars_data.Accelerate = 1   AND cars_data.Year = 2000   AND cars_data.Weight = 2000   AND cars_data.Cylinders = 4   AND cars_data.MPG = 30   AND cars_data.Horsepower = 150 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.country = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "American Motor Company"   AND cars_data.Accelerate = 1   AND cars_data.year = 2000   AND cars_data.horsepower > 200   AND cars_data.weight > 2000   AND cars_data.edispl > 0.8 
SELECT car_makers.FullName,        car_makers.Id FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.MakeId = car_names.MakeId GROUP BY car_makers.FullName HAVING count(*) > 3 
SELECT car_makers.Maker,        model_list.ModelId FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON model_list.Model = cars_data.Model GROUP BY car_makers.Maker HAVING count(*) > 3 
SELECT DISTINCT model_list.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "General Motors"   OR car_names.horsepower > 3500   OR car_names.weight > 1000 
SELECT DISTINCT model_list.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN cars_data ON cars_data.id = model_list.id WHERE car_makers.fullname = "General Motors"   OR cars_data.Accelerate > 1.5   OR cars_data.Weight > 3500 
SELECT cars_data.year FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.id = model_list.id JOIN car_names ON model_list.id = car_names.id JOIN cars_data ON cars_data.id = car_names.id WHERE cars_data.Accelerate > 1.5   AND cars_data.Weight > 3000   AND cars_data.Weight < 4000   AND cars_data.year > 2000   AND cars_data.year < 2010 
SELECT DISTINCT cars_data.year FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.id = model_list.id JOIN car_names ON model_list.id = car_names.id JOIN cars_data ON cars_data.id = car_names.id WHERE cars_data.mpg < 4000   AND cars_data.weight > 3000   AND cars_data.Accelerate > 1.5   AND cars_data.year > 2000   AND cars_data.year < 2010 
SELECT cars_data.Horsepower FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.Model = model_list.Model JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE countries.Continent = "Africa" ORDER BY cars_data.Accelerate DESC LIMIT 1 
SELECT cars_data.Horsepower FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON cars_data.Maker = car_makers.Id JOIN model_list ON cars_data.Model = model_list.Model JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId ORDER BY cars_data.Accelerate DESC LIMIT 1 
SELECT min(cars_data.cylinders) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.model = model_list.model JOIN car_names ON model_list.maker = car_names.maker JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "volvo"   AND countries.countryid = "continents.continent"   AND cars_data.accelerate = "true"   AND cars_data.year = 2000 GROUP BY cars_data.id ORDER BY min(cars_data.cylinders) LIMIT 1; 
SELECT min(cars_data.cylinders),        cars_data.edispl FROM continents JOIN countries ON continents.continent = countries.country JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.model = model_list.model JOIN car_names ON model_list.maker = car_names.maker JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY cars_data.id ORDER BY cars_data.accelerate LIMIT 1 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND car_names.model = "320i"   AND cars_data.accelerate >     (SELECT max(accelerate)      FROM cars_data      WHERE car_names.make = "BMW"        AND car_makers.fullname = "BMW")   AND cars_data.year >     (SELECT max(year)      FROM cars_data      WHERE car_names.make = "BMW"        AND car_makers.fullname = "BMW") 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.countryid = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname = "BMW"   AND car_names.horsepower >     (SELECT max(horsepower)      FROM car_names      JOIN cars_data ON cars_data.id = car_names.makeid      WHERE cars_data.year = 2000        AND cars_data.accelerate > 1.5)   AND cars_data.edispl = 1   AND cars_data.mpg > 100   AND cars_data.weight > 2000 
SELECT count(DISTINCT continents.continent) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname LIKE "%2%" GROUP BY continents.continent HAVING count(DISTINCT car_makers.maker) > 2 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE count(*) > 2 GROUP BY continents.continent HAVING count(*) > 2 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_makers.fullname LIKE "%over 6 cylinders%"   AND model_list.country = "continents"   AND cars_data.year > 2000 GROUP BY cars_data.id HAVING sum(cars_data.accelerate) > 1000 
SELECT count(*) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_names.make = "Toyota"   AND car_makers.fullname = "Toyota"   AND model_list.model = "Corolla"   AND cars_data.year > 2000   AND cars_data.accelerate > 1.5   AND cars_data.horsepower > 120   AND cars_data.mpg > 12.5   AND cars_data.edispl > 1.5 
SELECT car_names.Make,        cars_data.Accelerate FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN cars_data ON cars_data.Id = model_list.Model GROUP BY car_names.Make ORDER BY max(cars_data.Accelerate) DESC LIMIT 1 
SELECT car_names.Make,        cars_data.Accelerate FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Country JOIN model_list ON model_list.Maker = car_makers.Id JOIN cars_data ON cars_data.Id = model_list.Model GROUP BY car_names.Make ORDER BY max(cars_data.Accelerate) DESC LIMIT 1 
SELECT car_names.MakeId,        car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Accelerate =     (SELECT min(Accelerate)      FROM car_names)   AND car_makers.Maker!=     (SELECT car_makers.Maker      FROM continents      JOIN countries ON continents.Continent = countries.CountryId      JOIN car_makers ON continents.Continent = car_makers.Id      JOIN model_list ON model_list.Maker = car_makers.Id      JOIN car_names ON model_list.Model = car_names.Model      WHERE car_names.Accelerate =          (SELECT min(Accelerate)           FROM car_names)) 
SELECT car_names.MakeId,        car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Cylinders < 4   AND car_makers.FullName!= "Nissan"   AND car_makers.FullName!= "Toyota"   AND car_makers.FullName!= "Honda"   AND car_makers.FullName!= "BMW"   AND car_makers.FullName!= "Audi"   AND car_makers.FullName!= "Mercedes-Benz"   AND car_makers.FullName!= "Volvo"   AND car_makers.FullName!= "Ford"   AND car_makers.FullName!= "Bentley"  
SELECT max(cars_data.MPG) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.makeid = model_list.makeid JOIN car_names ON model_list.modelid = car_names.id JOIN cars_data ON cars_data.id = car_names.id WHERE countries.countryname = "United States"   AND cars_data.year < 1980 GROUP BY cars_data.id ORDER BY max(cars_data.MPG) DESC LIMIT 1; 
SELECT max(cars_data.MPG) FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON cars_data.id = car_makers.id JOIN model_list ON cars_data.id = model_list.id JOIN car_names ON model_list.id = car_names.id JOIN cars_data ON cars_data.id = cars_data.id WHERE countries.continent = "continents"   AND cars_data.cylinders = 8   AND cars_data.edispl = 1   AND cars_data.horsepower > 150   AND cars_data.weight < 1000   AND cars_data.accelerate > 1.5   AND cars_data.year < 1980 
SELECT cars_data.model_list.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.accelerate > 1.5   AND cars_data.year > 2000   AND cars_data.weight < 3500   AND car_makers.fullname!= 'Ford Motor Company' 
SELECT DISTINCT model_list.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN cars_data ON cars_data.id = model_list.id WHERE cars_data.Accelerate < 3.5   AND cars_data.year > 2000   AND cars_data.horsepower > 150   AND cars_data.weight < 3500   AND cars_data.edispl > 0.8 
SELECT DISTINCT countries.continent FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE continents.continent = 0 
SELECT DISTINCT countries.continent FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE continents.continent = "null" 
SELECT car_makers.id,        car_makers.maker FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.id JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.id HAVING count(*) >= 2 AND count(*) > 3 
SELECT car_makers.id,        car_makers.maker,        car_makers.fullname,        model_list.model,        car_names.make,        car_names.model,        cars_data.mpg,        cars_data.cylinders,        cars_data.edispl,        cars_data.horsepower,        cars_data.weight,        cars_data.accelerate,        cars_data.year FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.id JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON model_list.model = cars_data.model WHERE car_makers.fullname LIKE "%Audi%"   AND car_makers.fullname LIKE "%BMW%"   AND car_makers.fullname LIKE "%Mercedes%"   AND car_makers.fullname LIKE "%To
SELECT countries.continent,        car_makers.maker,        model_list.model FROM continents JOIN countries ON continents.continent = countries.countryid JOIN car_makers ON continents.continent = car_makers.id JOIN model_list ON model_list.maker = car_makers.id JOIN cars_data ON cars_data.id = model_list.makeid WHERE car_makers.maker = 'fiat' GROUP BY car_makers.maker HAVING count(*) > 3 OR model_list.model = 'fiat' 
SELECT car_names.MakeId,        car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.CountryId JOIN car_makers ON continents.Continent = car_makers.Id JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.Maker > 3   OR countries.CountryId IN     (SELECT car_makers.CountryId      FROM car_makers      JOIN model_list ON model_list.Maker = car_makers.Id      JOIN car_names ON model_list.Model = car_names.Model      WHERE car_names.Make = "Fiat") 
SELECT airlines.country FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.Airline = "JetBlue Airways" 
SELECT airlines.country FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "Jetblue Airways"   AND airports.Country = "United States"   AND flights.DestAirport = "New York" 
SELECT airlines.abbreviation FROM airlines JOIN airports ON airports.city = airlines.city JOIN flights ON flights.DestAirport = airports.City JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = "JetBlue Airways"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT airlines.abbreviation FROM airlines JOIN airports ON airports.city = airlines.city JOIN flights ON flights.DestAirport = airports.City JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = "Jetblue Airways"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airports.City = airlines.AirportCode JOIN flights ON flights.DestAirport = airports.City WHERE airports.Country = "USA"   AND airports.CountryAbbrev = "USA" 
SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "USA"   AND airports.CountryAbbrev = "USA" 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Airline = "Anthony"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA"; 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Airline = "Anthony"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA"; 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT count(DISTINCT airports.City) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" GROUP BY airports.City 
SELECT count(DISTINCT airports.city) FROM airlines JOIN airports ON airlines.city = airports.city JOIN flights ON airlines.uid = flights.airline WHERE airports.country = "United States"   AND airports.countryabbrev = "USA" GROUP BY airports.city 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT airlines.Airline FROM airlines JOIN airports ON airports.City = airlines.AirportCode JOIN flights ON flights.DestAirport = airports.City AND flights.SourceAirport = airports.City WHERE airlines.abbreviation = 'UAL' 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.DestAirport = "San Francisco"   AND flights.SourceAirport = "Los Angeles"   AND airlines.Airline = "UAL"   AND flights.AirlineCode = "DL"; 
SELECT count(*) FROM airlines WHERE country = 'USA'   AND countryAbbrev = 'USA' 
SELECT count(*) FROM airlines WHERE country = 'USA'   AND countryAbbrev = 'USA' 
SELECT airports.City,        airports.Country FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.AirportName = "Alton"   AND airports.Country = "United States" 
SELECT airports.City,        airports.Country FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = "Alton"   AND flights.SourceAirport = "Alton"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT airports.airportname FROM airlines JOIN airports ON airlines.airportcode = airports.city JOIN flights ON airlines.uid = flights.airline WHERE airports.country = 'United States'   AND airports.countryabbrev = 'USA'   AND flights.destairport = 'AKO' 
SELECT airports.City FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "AKO" 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = 'United Kingdom'   AND airports.Country = 'Scotland'   AND airports.CountryAbbrev = 'GB'   AND airlines.Airline = 'Aberdeen' 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = "United Kingdom"   AND airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airlines.Airline = "Aberdeen"; 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND airports.City = 'APG'   AND flights.DestAirport = 'LHR'   AND flights.SourceAirport = 'LHR' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND airports.AirportName = 'APG' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "Australia"   AND airports.CountryAbbrev = "ATO" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "Australia"   AND airports.CountryAbbrev = "ATO" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND flights.DestAirport = "Aberdeen" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airports.AirportName = "Aberdeen"   AND flights.DestAirport = "Aberdeen"   AND flights.SourceAirport = "Aberdeen" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND flights.DestAirport = "Aberdeen" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND flights.DestAirport = "Aberdeen"   AND flights.SourceAirport = "Aberdeen"   AND flights.Airline = 1 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United Kingdom'   AND airports.CountryAbbrev = 'GB'   AND airports.City = 'Aberdeen'   AND flights.DestAirport = 'Ashley' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airports.AirportName = "Aberdeen"   AND airports.AirportCode = "BHX"   AND flights.DestAirport = "Belfast"   AND flights.SourceAirport = "Belfast" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = 'JetBlue Airways'   AND airports.Country = 'United States'   AND flights.SourceAirport = 'New York'   AND flights.DestAirport = 'New York' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airlines.abbreviation = "JetBlue"   AND airports.country = "United States"   AND airports.countryAbbrev = "USA" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND airlines.Airline = 'United Airlines'   AND flights.SourceAirport = 'ASY'   AND flights.DestAirport = 'ASY' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "ASY"   AND airlines.abbreviation = "United Airlines" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND airlines.abbreviation = 'United'   AND flights.sourceAirport = 'AHD' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.abbreviation = "United" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'US'   AND airlines.Airline = 'United Airlines'   AND flights.SourceAirport = 'Aberdeen' 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "ABX"   AND airlines.abbreviation = "United Airlines" 
SELECT airports.City,        flights.SourceAirport FROM airlines JOIN airports ON airlines.Country = airports.Country JOIN flights ON airlines.uid = flights.uid GROUP BY flights.SourceAirport ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City,        flights.DestAirport FROM airlines JOIN airports ON airlines.Country = airports.Country JOIN flights ON airlines.uid = flights.uid GROUP BY flights.DestAirport ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City,        flights.SourceAirport FROM airlines JOIN airports ON airlines.Country = airports.Country JOIN flights ON airlines.uid = flights.uid GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City,        flights.SourceAirport FROM airlines JOIN airports ON airlines.Country = airports.Country JOIN flights ON airlines.uid = flights.uid GROUP BY flights.SourceAirport ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City,        airports.AirportName,        flights.SourceAirport,        flights.DestAirport FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.SourceAirport,           flights.DestAirport ORDER BY count(*) DESC LIMIT 1 
SELECT airports.airportcode FROM airlines JOIN airports ON airlines.airportcode = airports.city JOIN flights ON airlines.uid = flights.airline GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City,        airports.AirportCode,        flights.DestAirport FROM airlines JOIN airports ON airlines.AirportCode = airports.AirportCode JOIN flights ON airlines.uid = flights.uid GROUP BY airports.City,           airports.AirportCode ORDER BY count(*) LIMIT 1 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City GROUP BY airports.City ORDER BY count(*) LIMIT 1 
SELECT airlines.Airline,        flights.SourceAirport,        flights.DestAirport FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.Airline,        flights.SourceAirport,        flights.DestAirport FROM airlines JOIN flights ON airlines.uid = flights.DestAirport GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.abbreviation,        airlines.country FROM airlines JOIN airports ON airlines.airportcode = airports.city JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation,           airlines.country ORDER BY count(*) LIMIT 1 
SELECT airlines.abbreviation,        airports.country FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.abbreviation ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND flights.DestAirport = 'AHD' 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.SourceAirport = "AHD" 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND flights.DestAirport = 'AHD' 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.DestAirport = "AHD" 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'United States'   AND airports.CountryAbbrev = 'USA'   AND flights.SourceAirport = 'APG'   AND flights.DestAirport = 'CVO' 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "APG" INTERSECT   SELECT airlines.Airline   FROM airlines   JOIN airports ON airlines.AirportCode = airports.City   JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "CVO" 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'Canada'   AND airports.CountryAbbrev = 'APG' EXCEPT SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = 'Canada'   AND airports.CountryAbbrev = 'CVO' 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.DestAirport!= "APG"   AND flights.SourceAirport!= "APG" 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) >= 10 
SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) >= 10 
SELECT Airline FROM airlines WHERE Country = "United States" GROUP BY Airline HAVING count(*) < 200 
SELECT Airline FROM airlines WHERE Abbreviation!= "A"   AND Country!= "United States" GROUP BY Airline HAVING count(*) < 200 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Airline = "United Airlines"   AND airports.Country = "United States"   AND airports.CountryAbbrev = "USA" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airlines.Airline = "United Airlines"   AND airports.Country = "United States"   AND flights.DestAirport = "Los Angeles"   AND flights.SourceAirport = "Los Angeles" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.Airline = "APG" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.abbreviation = "APG" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.Airline = "APG" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airlines.abbreviation = "APG" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airlines.Airline = "Aberdeen" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airlines.abbreviation = "ABZ" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.AirportCode JOIN flights ON airlines.uid = flights.uid WHERE airports.country = "United Kingdom"   AND airports.countryAbbrev = "GB"   AND airports.city = "Aberdeen" 
SELECT flights.flightno FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.uid WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "GB"   AND airlines.abbreviation = "ABZ" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND airports.City = "Aberdeen"   OR airports.City = "Abilene" 
SELECT count(*) FROM airlines JOIN airports ON airlines.AirportCode = airports.City JOIN flights ON airlines.uid = flights.Airline WHERE airports.Country = "United States"   AND airports.CountryAbbrev = "USA"   AND flights.DestAirport = "Aberdeen"   OR flights.DestAirport = "Abilene" 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = "United States"   AND airports.Country = "United States" EXCEPT SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = "Canada"   AND airports.Country = "Canada" 
SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = "United States"   AND airports.Country = "United States" EXCEPT SELECT airports.City,        airports.AirportName FROM airlines JOIN airports ON airlines.AirportCode = airports.City WHERE airlines.Country = "Canada"   AND airports.Country = "Canada" 
SELECT count(*) FROM employee JOIN shop ON employee.employee_id = shop.employee_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON evaluation.employee_id = employee.employee_id WHERE shop.location = "New York City"   AND shop.district = "Manhattan"   AND hiring.start_from > 1990   AND hiring.is_full_time = 1   AND evaluation.year_awarded > 2000   AND evaluation.bonus > 0; 
SELECT count(*) FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE shop.Location = "New York City"   AND shop.District = "NYC"   AND hiring.Start_from = "2010-01-01"   AND hiring.Is_full_time = 1   AND evaluation.Bonus > 0 GROUP BY employee.Name ORDER BY count(*) DESC LIMIT 1; 
SELECT employee.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id ORDER BY employee.age 
SELECT employee.name,        employee.age FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id ORDER BY employee.age ASC 
SELECT count(*),        city FROM employee JOIN shop ON employee.employee_id = shop.employee_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY city 
SELECT count(*),        city FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY city 
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.age < 30 GROUP BY shop.location HAVING count(*) > 1 
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.age < 30 GROUP BY shop.location HAVING count(*) > 1 
SELECT COUNT (DISTINCT shop.location),        shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name = "Jerry" GROUP BY shop.location 
SELECT shop.location,        COUNT(*) FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name = "Jerry" GROUP BY shop.location 
SELECT shop.location,        shop.district FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.shop_id = evaluation.shop_id GROUP BY shop.location ORDER BY count(*) DESC LIMIT 1 
SELECT shop.location,        shop.district FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY shop.location ORDER BY sum(evaluation.bonus) DESC LIMIT 1 
SELECT min(shop.number_products),        max(shop.number_products) FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY shop.shop_id 
SELECT min(shop.number_products),        max(shop.number_products) FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY shop.shop_id 
SELECT shop.location,        shop.district,        shop.number_products FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.shop_id = evaluation.shop_id ORDER BY shop.number_products DESC 
SELECT shop.location,        shop.district,        shop.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.shop_id = evaluation.shop_id ORDER BY shop.number_products 
SELECT shop.location,        shop.district FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE hiring.is_full_time = 1 GROUP BY shop.location HAVING avg(shop.number_products) >     (SELECT avg(number_products)      FROM shop      JOIN hiring ON hiring.shop_id = shop.shop_id      JOIN evaluation ON hiring.employee_id = evaluation.employee_id      WHERE hiring.is_full_time = 1) 
SELECT shop.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.age > 30 GROUP BY shop.name HAVING avg(evaluation.bonus) >     (SELECT avg(evaluation.bonus)      FROM employee      JOIN shop ON employee.employee_id = shop.shop_id      JOIN hiring ON hiring.shop_id = shop.shop_id      JOIN evaluation ON hiring.employee_id = evaluation.employee_id      WHERE employee.city = "London"        AND employee.city = "Paris") 
SELECT employee.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE evaluation.year_awarded =     (SELECT max(year_awarded)      FROM evaluation)   AND shop.location = "New York City"   AND shop.district = "Manhattan"   AND hiring.is_full_time = 1   AND hiring.start_from = "2010-01-01"   AND evaluation.bonus > 0 
SELECT employee.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE evaluation.year_awarded =     (SELECT max(year_awarded)      FROM evaluation) 
SELECT employee.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE shop.location = "New York City"   AND shop.district = "Manhattan" ORDER BY evaluation.year_awarded DESC LIMIT 1 
SELECT employee.name FROM employee JOIN shop ON employee.employee_id = shop.employee_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE evaluation.year_awarded =     (SELECT max(year_awarded)      FROM evaluation)   AND evaluation.bonus =     (SELECT max(bonus)      FROM evaluation) 
SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM hiring      JOIN evaluation ON hiring.employee_id = evaluation.employee_id      WHERE evaluation.year_awarded = 2010) 
SELECT name FROM employee WHERE employee_id NOT IN     (SELECT employee_id      FROM shop      JOIN hiring ON shop.shop_id = hiring.shop_id      JOIN evaluation ON hiring.shop_id = evaluation.shop_id      WHERE evaluation.year_awarded = 2015) 
SELECT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON employee.employee_id = hiring.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE evaluation.year_awarded =     (SELECT max(year_awarded)      FROM evaluation)   AND employee.name =     (SELECT employee.name      FROM employee      JOIN shop ON employee.employee_id = shop.shop_id      JOIN hiring ON employee.employee_id = hiring.employee_id      JOIN evaluation ON hiring.employee_id = evaluation.employee_id      WHERE employee.city =          (SELECT city           FROM shop           JOIN hiring ON shop.shop_id = hiring.shop_id           JOIN evaluation ON hiring.employee_id = evaluation.employee_id           WHERE shop.location =               (SELECT location                FROM shop                JOIN hiring ON shop.shop_id = hiring.shop_id                JOIN evaluation ON hiring.employee_id
SELECT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id GROUP BY shop.location ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name!= 'employee' 
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name = "No employees" 
SELECT shop.name,        count(*) FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.employee_id = employee.employee_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.age > 25 GROUP BY shop.name 
SELECT count(*),        shop.name FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE hiring.is_full_time = 1 GROUP BY shop.name 
SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON hiring.Shop_ID = evaluation.Shop_ID WHERE employee.Name = "Jerry"   AND employee.Age > 35   AND employee.City = "San Francisco"   AND shop.Location = "San Francisco"   AND shop.District = "San Francisco"   AND hiring.Start_from = "2010-01-01"   AND hiring.Is_full_time = 1 GROUP BY evaluation.Bonus 
SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON hiring.Shop_ID = evaluation.Shop_ID WHERE employee.City = "London"   AND employee.Age > 30   AND employee.Name = "Jane"   AND shop.Location = "London"   AND shop.District = "Westminster"   AND hiring.Start_from = "2010-01-01"   AND hiring.Is_full_time = 1 GROUP BY evaluation.Bonus 
SELECT * FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON hiring.Employee_ID = employee.Employee_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE shop.Location = "New York City"   AND shop.District = "NYC"   AND hiring.Start_from = "2010-01-01"   AND hiring.Is_full_time = 1   AND evaluation.Bonus > 0   AND evaluation.Year_awarded = 2010 
SELECT * FROM employee JOIN shop ON employee.Employee_ID = shop.Employee_ID JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON hiring.Employee_ID = evaluation.Employee_ID WHERE hiring.Is_full_time = 1 
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.shop_id = evaluation.shop_id WHERE employee.name = "Product Manager"   AND employee.age < 30   AND employee.city!= "New York City"   AND employee.city!= "Los Angeles"   AND employee.city!= "San Francisco"   AND employee.city!= "Chicago"   AND employee.city!= "Houston"   AND employee.city!= "Baltimore"   AND employee.city!= "Dallas"   AND employee.city!= "Atlanta"   AND employee.city!= "Boston"   AND employee.city!= "Denver"   AND employee.city!= "Miami"   AND employee.city!= "Phoenix"   AND employee.city!= "Toronto"   AND employee.city!= "Seattle"   AND employee.city!= "Lond
SELECT DISTINCT shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.shop_id = evaluation.shop_id WHERE employee.name = "employee"   AND employee.age < 30   AND employee.city = "New York"   AND shop.district = "NYC"   AND shop.number_products < 3000   AND shop.number_products > 10000   AND hiring.is_full_time = 1   AND evaluation.year_awarded < 2000   AND evaluation.year_awarded > 2010 
SELECT count(DISTINCT shop.location) FROM employee JOIN shop ON employee.employee_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name = "Jane"   AND employee.age > 30   AND employee.city = "San Francisco"   AND hiring.start_from > 2000   AND hiring.is_full_time = 1   AND evaluation.year_awarded > 2000 GROUP BY shop.location 
SELECT count(DISTINCT shop.location) FROM employee JOIN shop ON employee.shop_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON hiring.employee_id = evaluation.employee_id WHERE employee.name = "Jerry"   AND employee.age > 35   AND employee.city = "San Francisco"   AND hiring.start_from > 2000   AND hiring.is_full_time = 1   AND evaluation.year_awarded > 2000 GROUP BY shop.location 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Document" 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Document" 
SELECT DISTINCT Documents.Document_ID,                 Documents.Document_Name,                 Documents.Document_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
SELECT DISTINCT Documents.Document_ID,                 Documents.Document_Name,                 Documents.Document_Description,                 Documents.Other_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
SELECT Documents.Document_Name,        Templates.Template_Type_Code,        Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Description LIKE "%w%"   AND Documents.Document_Description LIKE "%w%"   AND Documents.Document_Name LIKE "%w%"   AND Documents.Other_Details LIKE "%w%" 
SELECT Documents.Document_Name,        Documents.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Description = "Template"   AND Documents.Document_Description LIKE "%w%" 
SELECT Documents.Document_ID,        Templates.Template_Type_Code,        Documents.Document_Name,        Documents.Document_Description,        Documents.Other_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Description = "Robbin CV" 
SELECT Documents.document_id,        Templates.template_type_code,        Documents.document_name,        Documents.document_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_description = "Robbin CV"   AND Documents.document_name = "CV"; 
SELECT count(DISTINCT TEMPLATES.Template_Type_Code) FROM ref_template_types JOIN TEMPLATES ON ref_template_types.template_type_code = TEMPLATES.template_type_code JOIN documents ON documents.template_id = TEMPLATES.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id 
SELECT count(DISTINCT TEMPLATES.Template_Type_Code) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = 'PPT' 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "PPT" 
SELECT Templates.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_Type_Code = Documents.Template_Type_Code JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code 
SELECT DISTINCT Templates.Template_Type_Code,                 COUNT(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_Type_Code = Documents.Template_Type_Code JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code 
SELECT Templates.Template_Type_Code,        Templates.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
SELECT Templates.Template_Type_Code,        Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT TEMPLATES.Template_ID FROM TEMPLATES JOIN DOCUMENTS ON TEMPLATES.Template_Type_Code = DOCUMENTS.Template_Type_Code JOIN PARAGRAPHS ON DOCUMENTS.Document_ID = PARAGRAPHS.Document_ID GROUP BY TEMPLATES.Template_ID HAVING COUNT(*) > 1 
SELECT DISTINCT TEMPLATES.Template_ID FROM TEMPLATES JOIN DOCUMENTS ON TEMPLATES.Template_Type_Code = DOCUMENTS.Template_Type_Code JOIN PARAGRAPHS ON DOCUMENTS.Document_ID = PARAGRAPHS.Document_ID GROUP BY TEMPLATES.Template_ID HAVING COUNT(*) > 1 
SELECT template_id FROM ref_template_types EXCEPT SELECT template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE document_name = "Document 1"   AND document_description = "Document 2"   AND other_details = "Document 3" 
SELECT template_id FROM ref_template_types EXCEPT SELECT template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Document" 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Document" GROUP BY Ref_template_types.template_type_code 
SELECT Templates.template_id,        Templates.version_number,        Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Documents.template_id = Templates.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id 
SELECT Templates.Template_ID,        Templates.Version_Number,        Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
SELECT DISTINCT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id 
SELECT DISTINCT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id 
SELECT DISTINCT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "PP"   OR Ref_Template_Types.Template_Type_Description = "PPT" 
SELECT templates.template_id FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE ref_template_types.template_type_description = "PP"   OR ref_template_types.template_type_description = "PPT" 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "CV" 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "CV" GROUP BY Ref_template_types.template_type_code 
SELECT Templates.template_type_code,        Templates.version_number FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Templates.version_number > 5 
SELECT Templates.template_type_code,        Templates.version_number FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code WHERE Templates.version_number > 5 
SELECT Ref_template_types.template_type_code,        count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code 
SELECT Ref_template_types.template_type_code,        count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code HAVING count(*) < 3 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code HAVING count(*) < 3 
SELECT min(documents.document_id),        ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_code ORDER BY min(documents.document_id) 
SELECT min(documents.document_effective_from),        ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_code 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Documents.document_name = "Data base"   AND Documents.document_description = "Data base"   AND Documents.other_details = "Data base" 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Documents.document_name = "Data base"   AND Documents.document_description = "Database"   AND Documents.other_details = "Database" 
SELECT documents.document_name FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_description = "BK" 
SELECT Documents.Document_Name,        Documents.Document_Description,        Documents.Other_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Ref_Template_Types.Template_Type_Description = "BK" 
SELECT Ref_template_types.template_type_code,        count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code 
SELECT Ref_template_types.template_type_code,        count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id GROUP BY Ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_template_types.template_type_code NOT IN     (SELECT template_type_code      FROM Ref_template_types      JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code      JOIN Documents ON Templates.template_id = Documents.template_id      JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id) 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_template_types.template_type_description = "Template type code" EXCEPT SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_template_types.template_type_description = "Document" 
SELECT Ref_template_types.template_type_code,        Ref_template_types.template_type_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id 
SELECT Ref_template_types.template_type_code,        Ref_template_types.template_type_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id 
SELECT Ref_template_types.template_type_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_template_types.template_type_code = "AD" 
SELECT Ref_template_types.template_type_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_template_types.template_type_code = "AD" 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Book"   AND Documents.document_name = "Book"   AND Documents.document_description = "Book"   AND Documents.other_details = "Book" 
SELECT Ref_template_types.template_type_code FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Book"   AND Documents.document_name = "Book"   AND Documents.document_description = "Book"   AND Documents.other_details = "Book" 
SELECT DISTINCT Ref_template_types.template_type_description FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id 
SELECT DISTINCT documents.document_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_description = "Document" 
SELECT DISTINCT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Presentation" 
SELECT templates.template_id FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_description = 'Presentation'   AND documents.document_name = 'Presentation'   AND documents.document_description = 'Presentation'   AND paragraphs.other_details = 'Presentation' 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Documents.template_id WHERE Ref_template_types.template_type_description = "Paragraphs" 
SELECT count(*) FROM Ref_template_types JOIN Templates ON Ref_template_types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.template_id = Paragraphs.document_id WHERE Ref_template_types.template_type_description = "Document" 
SELECT COUNT (DISTINCT paragraphs.paragraph_text) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = "Summer Show"   AND documents.document_description = "Summer Show"   AND documents.other_details = "Summer Show"; 
SELECT COUNT (DISTINCT paragraphs.paragraph_text) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = "Summer Show"   AND documents.document_description = "Show"   AND documents.other_details = "Summer Show" 
SELECT paragraphs.paragraph_text,        documents.document_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.template_id = paragraphs.document_id WHERE ref_template_types.template_type_description = "Korea"   AND documents.document_name = "Korea"   AND documents.document_description = "Korea"; 
SELECT documents.document_description,        documents.document_name,        documents.other_details FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE ref_template_types.template_type_description = "Korea"   AND documents.document_name = "Korea"   AND documents.document_description = "Korea"; 
SELECT DISTINCT paragraphs.paragraph_id,                 paragraphs.paragraph_text FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = "Welcome to NY"   AND documents.document_description = "Welcome to NY"   AND documents.other_details = "Welcome to NY"; 
SELECT Documents.Document_ID,        Documents.Paragraph_Text FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Welcome to NY" 
SELECT DISTINCT paragraphs.paragraph_text FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = "Customer reviews"   AND documents.document_description = "Customer reviews"; 
SELECT paragraphs.paragraph_text FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = "Customer reviews"   AND documents.document_description = "Customer reviews"; 
SELECT Documents.Document_ID,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID 
SELECT Documents.Document_ID,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID 
SELECT Documents.Document_ID,        Documents.Document_Name,        Documents.Document_Description,        COUNT(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID 
SELECT Documents.Document_ID,        Documents.Template_ID,        Documents.Document_Name,        Documents.Document_Description,        Paragraphs.Paragraph_Text,        Paragraphs.Other_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_Type_Code = Documents.Template_Type_Code JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID 
SELECT DISTINCT documents.document_id FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(*) >= 2 
SELECT DISTINCT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2 
SELECT Documents.Document_ID,        Documents.Document_Name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) DESC LIMIT 1 
SELECT Documents.Document_ID,        Documents.Document_Name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) DESC LIMIT 1 
SELECT documents.document_id FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) LIMIT 1 
SELECT documents.document_id FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(*) LIMIT 1 
SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "1 to 2 paragraphs" 
SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Template"   AND Paragraphs.Other_Details LIKE "%Paragraphs%"   AND Paragraphs.Other_Details LIKE "%Paragraphs%" GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 
SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Brazil"   AND Ref_Template_Types.Template_Type_Description = "Ireland"   AND Paragraphs.Paragraph_Text = "Brazil"   AND Paragraphs.Other_Details = "Ireland" 
SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Brazil" INTERSECT   SELECT Documents.Document_ID   FROM Ref_Template_Types   JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code   JOIN Documents ON Templates.Template_ID = Documents.Template_ID   JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "Ireland" 
SELECT count(*) FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.teacher_id 
SELECT count(*) FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.course_id 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Age ASC 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Age ASC 
SELECT course.teacher.age,        course.teacher.hometown FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id 
SELECT course.coursename,        course.staring_date,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,        course.coursename,       
SELECT DISTINCT teacher.name FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id WHERE teacher.hometown!= 'Little Lever Urban District' 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE course.Hometown!= "Little Lever Urban District" 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE course.Grade = 1   OR course.Grade = 2   OR course.Grade = 3   AND teacher.age >= 32   OR teacher.age >= 33 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE course.Grade = 1   OR course.Grade = 2   AND teacher.Age = 32   OR teacher.Age = 33 
SELECT course.hometown FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id WHERE teacher.age =     (SELECT min(age)      FROM teacher)   AND course.starting_date =     (SELECT min(starting_date)      FROM course)   AND course.course = "course"   AND course.coursename = "course"; 
SELECT course.course FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id WHERE teacher.age =     (SELECT min(age)      FROM teacher)   AND course.starting_date =     (SELECT max(starting_date)      FROM course) 
SELECT course.hometown,        count(*) FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.hometown 
SELECT course.hometown,        count(*) FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.hometown 
SELECT DISTINCT teacher.Hometown FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY course.Teacher_ID ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT course.hometown FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.hometown ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT teacher.Hometown FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY course.Teacher_ID HAVING count(*) >= 2 
SELECT DISTINCT course.hometown FROM course JOIN teacher ON course.teacher_id = teacher.teacher_id JOIN course_arrange ON course.course_id = course_arrange.course_id GROUP BY course.hometown HAVING count(*) >= 2 
SELECT course.Course,        course.Course_ID,        course.Staring_Date,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID 
SELECT course.Course,        teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID 
SELECT course.Course,        course.Course_ID,        course.Staring_Date,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name 
SELECT course.Course,        course.Course_ID,        course.Staring_Date,        course.Course FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = "Math"   AND course.Staring_Date = "2010-09-01"   AND course_arrange.Grade = 1 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = "Math"   AND course.Staring_Date = "2000-01-01"   AND course_arrange.Grade = 1 
SELECT course.Course,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Course_ID GROUP BY course.Course_ID 
SELECT course.Course,        course.Staring_Date,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Course_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY course.Course_ID 
SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID GROUP BY course.Teacher_ID HAVING count(*) >= 2 
SELECT DISTINCT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY course.Course_ID HAVING count(*) >= 2 
SELECT name FROM course WHERE course_id NOT IN     (SELECT course_id      FROM course_arrange) 
SELECT name FROM course WHERE course_id NOT IN     (SELECT course_id      FROM course_arrange) 
SELECT sum(visit.Num_of_Ticket) FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.visitor_ID < 30 
SELECT visitor.Name,        visit.Num_of_Ticket,        visit.Total_spent FROM museum JOIN visitor ON museum.Museum_ID = visitor.ID JOIN visit ON visit.Museum_ID = museum.Museum_ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership 
SELECT avg(visitor.age) FROM museum JOIN visit ON museum.museum_id = visit.museum_id WHERE visit.visitor_id IN     (SELECT visitor_id      FROM visitor      WHERE membership_level!= 4) 
SELECT museum.name,        museum.num_of_staff,        visitor.name,        visitor.level_of_membership,        visit.total_spent,        visit.num_of_ticket FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership > 4 ORDER BY visitor.age 
SELECT museum.name,        museum.num_of_staff FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id ORDER BY sum(visit.num_of_ticket) DESC LIMIT 1 
SELECT avg(museum.num_of_staff) FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id WHERE visit.total_spent > 0   AND visit.visitor_id IN     (SELECT visitor.id      FROM visitor      JOIN museum ON museum.museum_id = visitor.museum_id      WHERE museum.open_year < 2009) 
SELECT museum.open_year,        museum.num_of_staff FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id WHERE museum.name = "Plaza Museum"   AND visitor.level_of_membership = 1   AND visit.total_spent > 0   AND visit.num_of_ticket > 0 
SELECT museum.name FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id WHERE visitor.level_of_membership >     (SELECT min(level_of_membership)      FROM visitor      WHERE museum_id =          (SELECT museum_id           FROM museum           WHERE open_year > 2010)) GROUP BY museum.name HAVING count(*) > (SELECT count(*)  FROM museum  WHERE open_year > 2010) 
SELECT museum.name,        museum.num_of_staff,        visitor.name,        visitor.level_of_membership,        visit.total_spent,        visit.num_of_ticket FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visit.num_of_ticket > 1 GROUP BY visit.visitor_id HAVING sum(visit.total_spent) > 1 
SELECT museum.name,        museum.num_of_staff,        visitor.name,        visit.total_spent FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id GROUP BY visit.visitor_id ORDER BY visit.total_spent DESC LIMIT 1 
SELECT museum.name,        museum.num_of_staff FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM museum WHERE num_of_staff = 0 
SELECT visitor.Name,        visitor.Age FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1 
SELECT avg(visit.Num_of_Ticket),        max(visit.Num_of_Ticket) FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID JOIN museum ON museum.Museum_ID = visit.Museum_ID WHERE museum.Name = "National Museum of Qatar"   AND museum.Open_Year = "2010"   AND visitor.Level_of_membership = 1 GROUP BY visit.visitor_ID 
SELECT sum(visit.total_spent) FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1 
SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Num_of_Ticket > 0   AND visit.Total_spent > 0   AND museum.Open_Year < 2009 UNION SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Num_of_Ticket > 0   AND visit.Total_spent > 0   AND museum.Open_Year > 2011 
SELECT count(*) FROM museum JOIN visitor ON museum.museum_id = visitor.museum_id JOIN visit ON visit.museum_id = museum.museum_id WHERE visit.visitor_id NOT IN     (SELECT visitor_id      FROM visitor      WHERE open_year > 2010) 
SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Jeremy"   AND players.last_name = "Henderson"   AND matches.birth_date > "1990-01-01"   AND matches.country_code = "USA"   AND rankings.tours > 1   AND rankings.tourney_level = "Tournament"   AND rankings.year = 2012 GROUP BY players.player_id 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Jeremy"   AND players.last_name = "Henderson"   AND matches.birth_date > "1990-01-01"   AND matches.country_code = "USA"   AND rankings.tours > 1   AND rankings.tourney_level = "Tournament of Champions"   AND rankings.year = 2010   AND rankings.tourney_id = 1; 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.first_name = "Jordan"   AND players.last_name = "Stephens"   AND players.hand = "Right"   AND players.birth_date = "1989-03-25"   AND players.country_code = "USA"   AND matches.bests_of = 3   AND matches.draw_size = 1   AND matches.loser_rank = 1   AND matches.loser_rank_points = 1   AND matches.loser_seed = 1   AND matches.minutes = 120   AND matches.round = 1   AND matches.surface = "Outdoor"   AND matches.tourney_date = "2011-07-05"   AND matches.tourney_id = 110   AND matches
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.first_name = "Jordan"   AND players.last_name = "Stephens"   AND players.hand = "Right"   AND players.birth_date = "1989-03-25"   AND players.country_code = "USA"   AND matches.bests_of = 3   AND matches.draw_size = 1   AND matches.loser_rank = 1   AND matches.loser_rank_points = 1   AND matches.loser_seed = 1   AND matches.minutes = 120   AND matches.round = 1   AND matches.surface = "Outdoor"   AND matches.tourney_date = "2011-07-05"   AND matches.tourney_id = 110   AND matches
SELECT players.first_name,        players.last_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA"   AND rankings.tours > 1   AND rankings.ranking = 1   AND rankings.ranking_points > 0   AND rankings.tourney_level = "Tournament"   AND rankings.tourney_name = "US Open"   AND rankings.year = 2015   AND players.birth_date LIKE "1995-01-01"; 
SELECT players.first_name,        players.last_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA"   AND rankings.tours > 1000   AND rankings.tourney_level = "Tournament"   AND rankings.year = 2012   AND rankings.rank_points > 1000   AND rankings.rank_points < 2000   AND rankings.tourney_name = "US Open"   AND rankings.tourney_date = "2012-09-15"; 
SELECT avg(players.loser_age),        avg(players.winner_age) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY players.player_id 
SELECT avg(loser_age),        avg(winner_age) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA" GROUP BY players.player_id 
SELECT avg(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.first_name = "Jordan"   AND players.last_name = "Stephens"   AND players.country_code = "USA"   AND matches.tourney_level = "Tournament"   AND matches.tourney_date = "2016-07-02"   AND matches.tourney_id = "2016-07-02"   AND matches.tourney_name = "Citi Open"   AND rankings.tourney_date = "2016-07-02"   AND rankings.tourney_id = "2016-07-02"   AND rankings.tourney_name = "Citi Open" GROUP BY players.player_id 
SELECT avg(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.first_name = "Jordan"   AND players.last_name = "Stevenson"   AND players.country_code = "USA"   AND matches.tourney_level = "Tournament"   AND matches.tourney_date = "2010-05-23"   AND matches.tourney_id = "2010-05-23"   AND matches.tourney_name = "2010 World Junior Championships"   AND rankings.tours = 1 GROUP BY rankings.ranking 
SELECT max(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.tourney_level = "Tournament"   AND matches.tourney_date > "2016-08-25" GROUP BY players.player_id ORDER BY max(rankings.ranking_points) DESC LIMIT 1; 
SELECT rankings.tourney_level,        rankings.tourney_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY rankings.tourney_level ORDER BY min(rankings.tourney_date) LIMIT 1 
SELECT count(DISTINCT country_code) FROM players WHERE first_name = "Jeremy"   AND last_name = "Henderson"   AND hand = "Left"   AND birth_date = "1989-01-01"   AND country_code = "USA"   AND tourney_name = "2008 World Junior Championships"   AND tourney_date = "2008-06-25"   AND tourney_level = "Group"; 
SELECT count(DISTINCT players.country_code) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Jeremy"   AND players.last_name = "Henderson"   AND matches.birth_date > "1990-01-01"   AND matches.tourney_date > "2010-01-01"   AND matches.tourney_level = "Championship"   AND rankings.tours > 1 GROUP BY players.country_code 
SELECT count(DISTINCT players.first_name, players.last_name) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA"   AND matches.birth_date > "1990-01-01" GROUP BY players.player_id 
SELECT count(DISTINCT players.loser_name) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA"   AND matches.tourney_level = "Tournament"   AND matches.tourney_id = 1996   AND rankings.tours > 1 GROUP BY players.loser_name 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_id,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        matches.minutes,        matches.round,        matches.surface,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        winner_id,        players.player_id,        rankings.tours FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.birth_date = "2013"   AND matches.birth_date = "2016"   AND players.country_code = "USA"   AND players.hand = "Left"   AND players.first
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_id,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        matches.minutes,        matches.round,        matches.surface,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        winner_id,        players.player_id,        rankings.tours FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.birth_date = "2013"   AND matches.birth_date = "2016"   AND players.country_code = "USA"   AND players.hand = "Left"   AND players.first
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.country_code = "USA"   AND players.birth_date >= "2013-01-01"   AND players.birth_date <= "2016-01-01"   AND rankings.tours >= 1 GROUP BY players.player_id 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.country_code = "USA"   AND players.first_name = "Alexander"   AND players.last_name = "Rossi"   AND matches.tourney_date = "2013-07-05"   OR matches.tourney_date = "2016-07-05"   AND rankings.tourney_level = "Tournament"   AND rankings.year = 2013   OR rankings.year = 2016 GROUP BY players.player_id 
SELECT players.country_code,        players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_level = "Tourney WTA Championships" INTERSECT   SELECT players.country_code,          players.first_name,          players.last_name   FROM players   JOIN matches ON players.player_id = matches.winner_id   JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_level = "Tourney Australian Open" 
SELECT players.first_name,        players.last_name,        players.country_code,        players.hand,        players.birth_date,        players.country_code,        players.tourney_date,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.
SELECT players.first_name,        players.last_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_id = rankings.match_id WHERE rankings.tourney_level = "Tourney"   AND rankings.tourney_id = 1 ORDER BY rankings.ranking_points DESC LIMIT 1 
SELECT players.first_name,        players.last_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_id = rankings.match_id WHERE rankings.tourney_level = 1   AND rankings.tourney_id = 1   AND rankings.year = 2012 ORDER BY rankings.ranking_points DESC LIMIT 1 
SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id ORDER BY rankings.ranking_date 
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        players.best_of,        players.draw_size,        players.loser_seed,        players.loser_rank,        players.loser_rank_points,        players.loser_hand,        players.loser_id,        players.loser_name,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank_points,        players.loser_rank
SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.hand = "left" ORDER BY players.birth_date 
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        players.best_of,        players.draw_size,        players.loser_rank,        players.loser_rank_points,        players.loser_seed,        players.match_num,        players.minutes,        players.round,        players.score,        players.surface,        players.tourney_date,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.winner_rank,        players.winner_rank_points,        players.winner_seed,        players.year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.country_code = "Sweden"   AND players.first_name =
SELECT players.first_name,        players.last_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT players.first_name,        players.last_name,        players.country_code,        rankings.tours FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY sum(rankings.tours) DESC LIMIT 1 
SELECT tourney_date,        tourney_level FROM matches JOIN rankings ON matches.tourney_date = rankings.ranking_date GROUP BY tourney_date ORDER BY count(*) DESC LIMIT 1 
SELECT tourney_name,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        winner_rank,        winner_rank_points,        winner_seed FROM matches JOIN rankings ON matches.loser_id = rankings.player_id WHERE rankings.tours > 1 GROUP BY tourney_name,          tourney_date,          tourney_id,          tourney_level,          tourney_name,          winner_rank,          winner_rank_points,          winner_seed ORDER BY tourney_date DESC LIMIT 1; 
SELECT players.first_name,        players.last_name,        rankings.ranking_points,        rankings.tours FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        matches.minutes,        matches.round,        matches.surface,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        winner_rank,        winner_rank_points,        winner_seed,        year FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Kyle"   AND players.last_name = "Snyder"   AND matches.birth_date = "1
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        minutes,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        players.winner_rank,        players.winner_rank_points,        players.winner_seed,        players.year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.country_code = "Australia"   AND matches.tourney_date = "2016-01-01"   AND matches.tourney_level = "Tourney"   AND players.first_name = "Alexander"   AND players.last_
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        minutes,        tourney_date,        tourney_id,        tourney_level,        tourney_name,        tourney_name,        tourney_rank,        tourney_rank_points,        tourney_seed,        tourney_level,        tourney_name,        tourney_rank,        tourney_rank_points,        tourney_seed,        tourney_level,        players.tourney_date,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_rank,        players.tourney_rank_points,        players.tourney
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_id,        matches.loser_name,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        matches.minutes,        matches.round,        matches.score,        matches.surface,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        winner_id,        winner_rank,        winner_rank_points,        winner_seed,        winner_id,        winner_name,        winner_rank,        winner_rank_points,        winner_seed,        year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.ranking_date WHERE players
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        matches.loser_id,        matches.loser_rank,        matches.loser_rank_points,        matches.loser_seed,        matches.match_num,        matches.minutes,        matches.round,        matches.surface,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        tourney_level,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        tourney_level,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        tourney_level,        tourney_name,        tourney_id,        tourney_level,        tourney_name,        tourney_level,        tourney_name
SELECT avg(rankings.ranking),        players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.id = rankings.id GROUP BY players.player_id 
SELECT players.first_name,        players.last_name,        avg(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA" GROUP BY players.player_id 
SELECT sum(rankings.ranking_points),        players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.id = rankings.id GROUP BY players.first_name 
SELECT players.first_name,        players.last_name,        sum(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA" GROUP BY players.player_id 
SELECT count(*),        country_code FROM players GROUP BY country_code 
SELECT players.country_code,        count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY players.country_code 
SELECT country_code FROM players WHERE first_name = "Jeremy"   AND last_name = "Henderson"   AND hand = "Left"   AND birth_date = "1989-01-01"   AND country_code = "USA" GROUP BY country_code ORDER BY count(*) DESC LIMIT 1; 
SELECT country_code FROM players WHERE first_name = "Jeremy"   AND last_name = "Henderson"   AND hand = "Left"   AND birth_date = "1989-01-01"   AND country_code = "USA" GROUP BY country_code ORDER BY count(*) DESC LIMIT 1; 
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
SELECT sum(tours),        ranking_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Jordan"   AND players.last_name = "Stephens" GROUP BY ranking_date 
SELECT sum(tours),        ranking_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.first_name = "Jordan"   AND players.last_name = "Stephens" GROUP BY ranking_date 
SELECT count(*),        YEAR FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.tourney_num WHERE players.country_code = "USA" GROUP BY YEAR 
SELECT count(*),        YEAR FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.first_name = "Jordan"   AND players.last_name = "Melo" GROUP BY YEAR 
SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code,        rankings.tourney_date,        rankings.tourney_id,        rankings.tourney_level,        rankings.year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_num = rankings.match_num WHERE players.first_name = "Leon"   AND players.last_name = "Holtzman"   AND players.hand = "Left-handed"   AND players.birth_date = "1990-01-01"   AND players.country_code = "USA"   AND rankings.tourney_date = "2010-05-29"   AND rankings.tourney_id = 1   AND rankings.tourney_level = 1   AND rankings.year = 
SELECT players.first_name,        players.last_name,        rankings.ranking,        rankings.tourney_level,        rankings.tourney_name,        rankings.tourney_date,        rankings.tourney_id,        rankings.year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.first_name = "Leon"   AND players.last_name = "Holtzman"   AND matches.birth_date = "1995-05-25"   AND matches.country_code = "USA"   AND rankings.tourney_date = "2010-05-25"   AND rankings.tourney_id = 1   AND rankings.year = 2010   AND rankings.tourney_level = "Tournament"   AND rankings.tourney
SELECT count(DISTINCT players.first_name, players.last_name, players.hand) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE players.country_code = "USA"   AND matches.tourney_level = "Tourney"   AND matches.tourney_id = "WTA Championships"   AND players.hand = "left" GROUP BY players.first_name,          players.last_name,          players.hand 
SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE rankings.tourney_level = "Tourney"   AND rankings.tourney_name = "WTA Championships"   AND players.first_name = "Left"   AND players.last_name = "Hand"   AND players.country_code = "USA"   AND players.hand = "Left"   AND players.birth_date > "1995-01-01"   AND players.birth_date < "2000-01-01"   AND rankings.tourney_date > "2015-07-01"   AND rankings.tourney_date < "2016-07-01" GROUP BY rankings.tourney_date HAVING rankings.tourney_points > rankings.tourney_points ORDER BY rankings
SELECT players.first_name,        players.last_name,        players.birth_date,        players.country_code,        players.hand,        players.tourney_date,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.year,        players.tourney_date,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tour
SELECT players.first_name,        players.last_name,        players.birth_date,        players.country_code,        players.hand,        players.tourney_date,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.year,        players.tourney_date,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tourney_level,        players.tourney_name,        players.tourney_id,        players.tour
SELECT count(*),        first_name,        last_name,        hand,        birth_date,        country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_id = rankings.match_id WHERE players.birth_date >= "1990-01-01" GROUP BY hand 
SELECT count(*),        first_name,        last_name,        hand,        birth_date,        country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON matches.match_id = rankings.match_id WHERE players.birth_date >= "1990-01-01" GROUP BY hand 
SELECT count(*) FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.ship_type = 'Captain'   AND ship.disposition_of_ship = 'Captured'   AND death.killed > 0   AND death.injured > 0 
SELECT ship.name,        ship.tonnage FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id ORDER BY ship.name 
SELECT battle.name,        battle.date,        battle.result FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id ORDER BY battle.date 
SELECT max(death.killed),        min(death.injured) FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY death.caused_by_ship_id 
SELECT avg(death.injured),        battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.date 
SELECT death.killed,        death.injured FROM battle JOIN ship ON battle.ship_type = ship.ship_type JOIN death ON death.caused_by_ship_id = battle.id WHERE ship.tonnage = 't' 
SELECT battle.name,        battle.result FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.ship_type = 'Bulgarian'   AND ship.disposition_of_ship = 'Defender'   AND death.killed!= 0   AND death.injured!= 0   AND death.note!= 'Boril' 
SELECT battle.id,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' 
SELECT battle.id,        battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id HAVING count(*) > 10 
SELECT ship.id,        ship.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id ORDER BY sum(death.injured) DESC LIMIT 1 
SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.ship_type = 'Galleon'   AND ship.location = 'Bulgaria'   AND ship.disposition_of_ship = 'Battleship'   AND battle.bulgarian_commander = 'Kaloyan'   AND battle.latin_commander = 'Baldwin I'   AND death.killed > 0   AND death.injured > 0   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.note!= 'none'   AND death.
SELECT count(DISTINCT battle.result) FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id 
SELECT count(*) FROM battle WHERE date NOT IN     (SELECT battle.date      FROM battle      JOIN ship ON battle.id = ship.lost_in_battle      JOIN death ON death.caused_by_ship_id = ship.id      WHERE ship.tonnage = '225'        AND ship.ship_type ='ship') 
SELECT battle.name,        battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.name = 'Lettice' INTERSECT   SELECT battle.name,          battle.date   FROM battle   JOIN ship ON battle.id = ship.lost_in_battle   JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.name = 'HMS Atalanta' 
SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'English Channel'   AND ship.location = 'English Channel'   AND ship.disposition_of_ship = 'neutral' EXCEPT SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'English Channel'   AND ship.location = 'English Channel'   AND ship.disposition_of_ship = 'neutral'   AND battle.date = '2015-06-25'   AND battle.result = 'defeated'   AND battle.bulgarian_commander = 'German'   AND battle.latin_commander = 'German'   AND battle.name = 'Battle of the Baltic Sea'   AND battle.date =
SELECT death.note FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.ship_type = 'Ship'   AND ship.location = 'East' 
SELECT addresses.line_1,        addresses.line_2,        addresses.line_3,        addresses.city,        addresses.zip_postcode,        addresses.state_province_county,        courses.course_description,        departments.department_description,        degrees_programs.degree_summary_name,        sections.section_description,        semesters.semester_description,        students.first_name,        students.middle_name,        students.last_name,        students.cell_mobile_number,        students.email_address,        student_enrolment.other_details,        student_enrolment_courses.course_id,        transcripts.transcript_date,        transcripts.other_details FROM addresses JOIN courses ON addresses.course_id = courses.course_id JOIN departments ON departments.department_id = courses.department_id JOIN degrees_programs ON degrees_programs.degree_program_id = courses.
SELECT addresses.line_1,        addresses.line_2,        addresses.line_3 FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id
SELECT count(*) FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY courses.course_id 
SELECT count(*) FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY courses.course_id 
SELECT Courses.course_description FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Courses.course_
SELECT DISTINCT Courses.course_description FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Courses
SELECT addresses.line_3 FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id WHERE courses.department_name = "Department of Computer Science"   AND courses.department_description = "Computer Science"   AND courses.course_name = "
SELECT DISTINCT address_id FROM addresses WHERE line_1 = "Port Chelsea"   AND line_2 = "New York"   AND line_3 = "United States"   AND country = "United States"   AND other_address_details = "New York City"; 
SELECT DISTINCT departments.department_name,                 departments.department_id FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_
SELECT Degree_Programs.department_id,        Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Courses ON Degree_Programs.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript
SELECT count(DISTINCT departments.department_name) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY departments.
SELECT count(DISTINCT departments.department_name) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY departments.
SELECT count(DISTINCT degree_programs.degree_summary_name) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN students ON students.student_id = degree_programs.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY degree_programs.degree_summary_name 
SELECT count(DISTINCT degree_programs.department_description) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN students ON students.student_id = degree_programs.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY degree_programs.department_description 
SELECT count(DISTINCT degree_programs.degree_summary_name) FROM addresses JOIN departments ON addresses.department_id = departments.department_id JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE addresses.city = "San Jose"   AND addresses.state_province_county = "California"   AND department_id = 1 GROUP BY degree_programs.degree_summary_name 
SELECT count(DISTINCT degree_programs.department_id) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id WHERE departments.department_name = "Engineering" GROUP BY degree_programs.department_id 
SELECT SECTIONS.section_name,        SECTIONS.section_description FROM ADDRESSES JOIN Courses ON ADDRESSES.department_id = Courses.department_id JOIN Degree_Programs ON ADDRESSES.department_id = Degree_Programs.department_id JOIN SECTIONS ON ADDRESSES.department_id = SECTIONS.department_id JOIN Students ON ADDRESSES.address_id = Students.current_address_id JOIN Students ON ADDRESSES.address_id = Students.permanent_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts
SELECT SECTIONS.section_name,        SECTIONS.section_description FROM ADDRESSES JOIN Courses ON ADDRESSES.department_id = Courses.department_id JOIN Degree_Programs ON ADDRESSES.department_id = Degree_Programs.department_id JOIN SECTIONS ON ADDRESSES.department_id = SECTIONS.department_id JOIN Students ON ADDRESSES.address_id = Students.current_address_id JOIN Students ON ADDRESSES.address_id = Students.permanent_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts
SELECT Courses.course_name,        Courses.course_id,        Students.student_id FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.course_id = Degree_Programs.course_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id WHERE Courses.course_name LIKE "Courses" GROUP BY Courses.course_id HAVING count(*) <= 2 
SELECT DISTINCT Courses.course_name,                 Courses.course_id FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.course_id = Degree_Programs.course_id JOIN Sections ON Sections.course_id = Courses.course_id GROUP BY Courses.course_id HAVING count(*) < 2 
SELECT SECTIONS.section_name FROM ADDRESSES JOIN Courses ON ADDRESSES.department_id = Courses.department_id JOIN Degree_Programs ON ADDRESSES.department_id = Degree_Programs.department_id JOIN SECTIONS ON ADDRESSES.department_id = SECTIONS.section_id JOIN Students ON ADDRESSES.department_id = Students.current_address_id JOIN Students ON ADDRESSES.department_id = Students.permanent_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript
SELECT SECTIONS.section_name FROM ADDRESSES JOIN Courses ON ADDRESSES.department_id = Courses.department_id JOIN Degree_Programs ON Degree_Programs.department_id = Courses.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id
SELECT DISTINCT Addresses.department_name,                 Addresses.department_id FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.course_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents
SELECT DISTINCT Addresses.line_1,                 Addresses.line_2,                 Addresses.line_3,                 Addresses.city,                 Addresses.zip_postcode,                 Addresses.state_province_county,                 Courses.course_description,                 Courses.department_description,                 Degree_Programs.degree_summary_name,                 Degree_Programs.degree_summary_description,                 Sections.section_description,                 Semesters.semester_description,                 Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.cell_mobile_number,                 Students.email_address,                 Student_Enrolment.other_details,                 Student_Enrolment_Courses.other_details,                 Transcripts.transcript_date,                 Transcripts.other_details FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN D
SELECT DISTINCT departments.department_description FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON addresses.department_id = departments.department_id WHERE courses.course_name LIKE "%the computer%" 
SELECT DISTINCT departments.department_description FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON degrees.department_id = courses.department_id JOIN sections ON sections.course_id = courses.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id WHERE courses.course_name LIKE "Computer"   AND courses.course_description LIKE "Computer Science"   AND courses.department_id =
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.student_id,                 Students.date_first_registered,                 Students.date_left,                 Degree_Programs.degree_summary_name,                 Degree_Programs.degree_summary_description,                 Courses.course_description,                 Transcripts.transcript_date,                 Transcript_Contents.student_course_id FROM Students JOIN Degree_Programs ON Students.degree_program_id = Degree_Programs.degree_program_id JOIN Courses ON Degree_Programs.course_id = Courses.course_id JOIN Transcripts ON Transcripts.transcript_id = Courses.course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Degree_Programs.degree_summary_name = "Bach
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.student_id,                 Students.date_first_registered,                 Students.date_left FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Student_Enrolment_Courses.degree_program_id IN     (SELECT degree_program_id      FROM Degree_Programs      WHERE semester_name = "Spring")   AND Student_Enrolment_Courses.semester_id = 
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.student_id,                 Students.date_first_registered,                 Students.date_left FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Student_Enrolment_Courses.degree_program_id = 100000000000000000000000000000000000000000000000000000
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.student_id,                 Students.date_first_registered,                 Students.date_left FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Students.degree_program_id = 100000000000000000000000000000000000000000000000000000000000
SELECT DISTINCT Degree_Programs.degree_summary_name FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Addresses.department_id = Degree_Programs.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Students ON Degree_Programs.degree_program_id = Students.degree_program_id JOIN Semesters ON Students.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Students.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Degree_Programs.degree_summary_name ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT Courses.course_id,                 Courses.course_description FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.course_id = Degree_Programs.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Courses.
SELECT Degree_Programs.degree_summary_name,        Degree_Programs.degree_summary_description,        Courses.course_description FROM Courses JOIN Degree_Programs ON Courses.course_id = Degree_Programs.course_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Degree_Programs.degree_summary_name,          Degree_Programs.degree_summary_description,          Courses.course_description ORDER BY count
SELECT Students.student_id,        Students.first_name,        Students.middle_name,        Students.last_name,        count(*) FROM Students JOIN Degree_Programs ON Students.degree_program_id = Degree_Programs.degree_program_id JOIN Courses ON Degree_Programs.course_id = Courses.course_id JOIN Transcripts ON Courses.course_id = Transcripts.course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Students.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.student_id,                 Students.date_first_registered,                 Students.date_left,                 Student_Enrolment.other_details,                 Transcripts.transcript_id,                 Transcripts.transcript_date FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcripts.student_enrolment_id GROUP BY Students.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT semesters.semester_name FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.department_id = degrees.department_id JOIN sections ON sections.course_id = degrees.department_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcripts ON student_enrolment.student_id = transcripts.student_id WHERE transcripts.transcript_date < "20
SELECT semesters.semester_name FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id WHERE department_id = 1000000000000000000000000000000
SELECT courses.course_name FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id IN     (SELECT course
SELECT DISTINCT courses.course_name FROM addresses JOIN courses ON addresses.department_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id IN 
SELECT courses.course_name FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN department_enrollment ON addresses.department_id = department_enrollment.department_id JOIN department_enrollment_courses ON department_enrollment.department_id = department_enrollment_courses.department_id JOIN transcripts ON department_enrollment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY courses.course_name ORDER BY count(*) DESC LIMIT 1 
SELECT courses.course_name FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON degrees.department_id = degrees.department_id JOIN sections ON sections.course_id = degrees.department_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY courses.course
SELECT DISTINCT students.first_name,                 students.middle_name,                 students.last_name,                 students.cell_mobile_number,                 students.email_address,                 students.ssn,                 students.date_first_registered,                 students.date_left FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE student_enrolment_courses.degree_program_id = 1000   AND student_enrolment_courses.semester_id = 1   AND student_enrolment.permanent_
SELECT DISTINCT students.first_name,                 students.middle_name,                 students.last_name,                 students.cell_mobile_number,                 students.email_address,                 students.ssn,                 students.date_first_registered,                 students.date_left FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE student_enrolment_courses.degree_program_id = 1000   AND student_enrolment_courses.semester_id = 1   AND student_enrolment.permanent_
SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcripts
SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.course_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_course_id = Students.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcripts.
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy"   AND last_name = "Ward"   AND date_first_registered > "2010-01-01"   AND date_left > "2010-01-01"; 
SELECT student_enrolment.cell_mobile_number FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.department_id = degrees.department_id JOIN semesters ON degrees.semester_id = semesters.semester_id JOIN students ON students.student_id = degrees.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE students.first_name = "Timmothy"   AND students
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.cell_mobile_number,                 Students.email_address,                 Students.date_first_registered,                 Students.date_left FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.degree_program_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students_Enrolment ON Students.student_id = Students_Enrolment.student_id JOIN Students_Enrolment_Courses ON Students_Enrolment.student_id = Students_Enrolment_Courses.student
SELECT DISTINCT Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.cell_mobile_number,                 Students.email_address,                 Students.ssn,                 Students.date_first_registered,                 Students.date_left FROM Students JOIN Degree_Programs ON Students.degree_program_id = Degree_Programs.degree_program_id JOIN Courses ON Degree_Programs.course_id = Courses.course_id JOIN Transcripts ON Courses.course_id = Transcripts.course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Students.student_id = Transcript_Contents.student_course_id ORDER BY Students.date_first_registered 
SELECT Students.first_name,        Students.middle_name,        Students.last_name,        Students.date_first_registered,        Students.date_left FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Student_Enrolment_Courses.degree_program_id = 100   AND Student_Enrolment_Courses.course_id = 100   AND Transcripts.semester_id = 1   AND Transcript_Contents.transcript_date = "2010-0
SELECT DISTINCT Courses.course_name,                 Courses.course_description,                 Courses.department_name,                 Courses.department_description,                 Degree_Programs.degree_summary_name,                 Degree_Programs.degree_summary_description,                 Sections.section_name,                 Sections.section_description,                 Semesters.semester_name,                 Semesters.semester_description,                 Students.first_name,                 Students.middle_name,                 Students.last_name,                 Students.cell_mobile_number,                 Students.email_address,                 Student_Enrolment.other_details,                 Student_Enrolment_Courses.student_enrolment_id,                 Transcripts.transcript_date,                 Transcripts.other_details FROM Courses JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections
SELECT DISTINCT Addresses.first_name FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.degree_program_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.course_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts.transcript
SELECT DISTINCT students.first_name FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.department_id = degrees.department_id JOIN semesters ON semesters.semester_id = degrees.semester_id JOIN students ON students.student_id = semesters.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE addresses.address_id = semesters.semester_id   AND courses.course_id!= semesters.
SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2,        Addresses.line_3,        Addresses.city,        Addresses.zip_postcode,        Addresses.state_province_county,        Courses.course_description,        Courses.course_name,        Degree_Programs.degree_summary_name,        Degree_Programs.degree_summary_description,        Sections.section_name,        Sections.section_description,        Semesters.semester_name,        Semesters.semester_description,        Students.first_name,        Students.middle_name,        Students.last_name,        Students.ssn,        Transcripts.transcript_date,        Transcripts.other_details FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Degree_Programs ON Degree_Programs.degree
SELECT addresses.line_1,        addresses.line_2,        addresses.line_3 FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id
SELECT avg(Transcripts.transcript_date) FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.course_id = Departments.course_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcripts
SELECT avg(Transcripts.transcript_date) FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.course_id = Departments.course_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id WHERE Courses.
SELECT Transcripts.transcript_date,        Transcripts.other_details FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Semesters ON Semesters.semester_id = Courses.semester_id JOIN Students ON Students.student_id = Semesters.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id WHERE Courses.course_name = "Introduction to Psychology"   AND Courses.course_description = "
SELECT Transcripts.transcript_date,        Transcripts.other_details FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.course_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrol
SELECT count(*) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcripts.date >= "2015-01-01
SELECT count(*) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcripts.date_first_registered > "2015-
SELECT Transcripts.transcript_date FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.course_id = Departments.course_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.degree_program_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_course_id WHERE Courses.course_name
SELECT Transcripts.transcript_date FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.course_id = Departments.course_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Departments.department_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id WHERE Courses.course_name
SELECT count(*),        transcripts.transcript_id FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN sections ON degree_programs.degree_program_id = sections.degree_program_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id GROUP BY transcripts.transcript_id HAVING count(*) <= 3
;
SELECT Transcripts.transcript_id,        Transcripts.transcript_date FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id GROUP BY Transcripts.
SELECT Transcripts.transcript_date,        Transcripts.transcript_id FROM Addresses JOIN Courses ON Addresses.department_id = Courses.department_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.course_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.student_en
SELECT semesters.semester_name,        semesters.semester_description FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE
SELECT semesters.semester_id FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE courses.department_id = departments.
SELECT count(DISTINCT addresses.line_1) FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.department_id = departments.department_id JOIN sections ON degrees.department_id = sections.department_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY addresses.line
SELECT DISTINCT addresses.line_1,                 addresses.line_2,                 addresses.line_3,                 addresses.city,                 addresses.zip_postcode,                 addresses.state_province_county,                 courses.course_description,                 departments.department_description,                 degrees_programs.degree_summary_name,                 degrees_programs.degree_summary_description,                 semesters.semester_description,                 students.first_name,                 students.middle_name,                 students.last_name,                 students.cell_mobile_number,                 students.email_address,                 student_enrolment.other_details,                 student_enrolment_courses.course_id,                 transcripts.transcript_date,                 transcripts.other_details FROM addresses JOIN courses ON addresses.course_id = courses.course_id JOIN departments ON departments.department_id = courses.department_id JOIN degrees_programs ON degrees_programs.
SELECT * FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.student_course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id ORDER BY transcript_contents.student_course_id 
SELECT DISTINCT Student_Enrolment.other_details FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcripts.student_course_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id ORDER BY Student_Enrolment_Courses.date_left 
SELECT SECTION.section_name,        SECTION.section_description,        SECTION.section_summary_name,        SECTION.section_summary_description,        SECTION.other_details FROM Courses JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Courses.course_id JOIN Sections ON Sections.course_id = Courses.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Sections.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_
SELECT SECTION_DESCRIPTION FROM SECTIONS WHERE course_id = 101   AND section_name = "h"   AND section_description = "Humanities"   AND other_details = "Humanities"; 
SELECT DISTINCT students.first_name,                 students.middle_name,                 students.last_name,                 students.cell_mobile_number,                 students.email_address,                 students.date_first_registered,                 students.date_left FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.degree_program_id = courses.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student
SELECT DISTINCT students.first_name,                 students.middle_name,                 students.last_name,                 students.cell_mobile_number,                 students.email_address,                 students.date_first_registered,                 students.date_left FROM addresses JOIN courses ON addresses.department_id = courses.department_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON degrees.degree_program_id = courses.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.course_id = semesters.course_id JOIN students ON students.student_id = sections.course_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_id = student_enrolment_courses.student_id JOIN transcripts ON student_enrolment_courses.student
SELECT Cartoon.title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id ORDER BY Cartoon.original_air_date 
SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id ORDER BY Cartoon.Original_air_date 
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share FROM TV_Channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN TV_series ON TV_series.id = TV_series.id WHERE TV_series.Directed_by = "Ben Jones"   AND TV_series.Written_by = "Ben Jones"   AND TV_series.Original_air_date = "2003-09-25"   AND TV_series.Production_code = 1 
SELECT Cartoon.title FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.channel WHERE TV_Channel.series_name = "Cartoon"   AND Cartoon.directed_by = "Ben Jones"   AND Cartoon.original_air_date = "2000-01-01"   AND Cartoon.production_code = 1 
SELECT COUNT (DISTINCT Cartoon.Written_by) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.Directed_by = "Joseph Kuhr"   AND Cartoon.Original_air_date = "1999-09-25"   AND Cartoon.Production_code = 1 
SELECT COUNT (DISTINCT Cartoon.Original_air_date) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Written_by = "Joseph Kuhr"   AND Cartoon.Production_code = 1 
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_channel.Channel,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id ORDER BY Cartoon.Original_air_date 
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_channel.Channel,        TV_channel.Country,        TV_channel.Language,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE Cartoon.Original_air_date > "2000-01-01" ORDER BY Cartoon.Original_air_date 
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_channel.Channel,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.Directed_by = "Ben Jones"   OR TV_series.Written_by = "Brandon Vietti" 
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_channel.Channel,        TV_channel.Country,        TV_channel.Language,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE Cartoon.Directed_by = "Ben Jones"   OR Cartoon.Written_by = "Brandon Vietti" 
SELECT TV_Channel.country,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.country ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT TV_Channel.Country,        TV_Channel.Number_of_TV_Channels FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id GROUP BY TV_Channel.Country ORDER BY count(*) DESC LIMIT 1 
SELECT count(*),        TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.id 
SELECT count(DISTINCT TV_series.Episode),        count(DISTINCT TV_Channel.series_name) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE Cartoon.original_air_date > 1990 GROUP BY TV_Channel.id 
SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.title = "Sky Radio"   AND Cartoon.original_air_date = "2010-01-01"   AND Cartoon.channel = TV_Channel.id   AND TV_Channel.series_name = "Sky Radio"   AND TV_Channel.language = "English"   AND TV_Channel.country = "United Kingdom"   AND TV_Channel.content = "TV series about radio."   AND TV_Channel.pay_per_view_PPV = 0   AND TV_Channel.package_Option = "Standard"   AND TV_Channel.hight_definition_TV = 1   AND TV_Channel.Content = "TV series about radio."   AND TV_Channel.Content = "TV series about radio."   AND TV_Channel.Content = "TV series about radio."   AND TV_
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        18_49_Rating_Share,         Viewers_m,         Weekly_Rank,         TV_Channel.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE Cartoon.Original_air_date = "2010-09-25"   AND Cartoon.Production_code = 1   AND Cartoon.Written_by = "Sky Radio"   AND Cartoon.Directed_by = "Sky Radio"   AND Cartoon.Channel = "Cartoon Network"   AND TV_series.Share = 1   AND TV_series.Rating = 4.0   AND TV_series.Weekly_Rank = 1   AND TV_Channel.Country = "USA"  
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.title = "Sky Radio" 
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.title = "Sky Radio" 
SELECT count(*) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_series.id = cartoon.id WHERE cartoon.original_air_date LIKE "1999-01-01"   AND cartoon.production_code = 1   AND cartoon.channel.language = "english" 
SELECT count(*) FROM TV_channel WHERE language = 'english' 
SELECT TV_Channel.language,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.language ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT TV_Channel.language,        count(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.original_air_date = "1999-01-01" GROUP BY TV_Channel.language ORDER BY count(*) DESC LIMIT 1 
SELECT TV_Channel.language,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.language 
SELECT count(*),        TV_Channel.language FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.language 
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "The Rise of the Blue Beetle!"   AND Cartoon.original_air_date = "2000-01-01"   AND Cartoon.Production_code = 1 
SELECT TV_series.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_series.id = cartoon.id WHERE cartoon.title = "The Rise of the Blue Beetle"   AND TV_channel.country = "USA"   AND TV_channel.language = "English"   AND TV_channel.content = "TV"   AND TV_channel.pixel_aspect_ratio_PAR = 1.75   AND TV_channel.high_definition_TV = 1   AND TV_channel.pay_per_view_PPV = 1   AND TV_channel.package_option = "Standard"   AND TV_series.viewers_m > 1000   AND TV_series.weekly_rank = 1   AND TV_series.original_air_date = "2000-01-01"   AND TV_series.directed_by = "Jimmy Palmer"   AND TV
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_series.18_49_Rating_Share,        TV_series.Viewers_m,        TV_channel.Channel,        TV_channel.Country,        TV_channel.Language,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE Cartoon.Original_air_date = "2015-09-25"   AND Cartoon.Production_code = 1   AND TV_channel.Country = "Canada"   AND TV_channel.Language =
SELECT TV_series.Episode,        TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_channel.Channel,        TV_channel.Country,        TV_channel.Language,        TV_channel.Content,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Hight_definition_TV,        TV_channel.Pay_per_view_PPV,        TV_channel.Package_Option FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON cartoon.channel = TV_channel.id WHERE TV_series.series_name = "Sky Radio" 
SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id ORDER BY Cartoon.Original_air_date 
SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code = 1 ORDER BY TV_series.Rating 
SELECT TV_series.Episode,        TV_series.Rating FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id ORDER BY Cartoon.Original_air_date DESC LIMIT 3 
SELECT TV_series.Episode,        TV_series.Rating FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code = 1 ORDER BY Cartoon.Original_air_date LIMIT 3 
SELECT min(TV_series.share),        max(TV_series.share) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_series.id = cartoon.id GROUP BY TV_series.id 
SELECT max(TV_series.share),        min(TV_series.share) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_series.id = cartoon.id GROUP BY TV_series.id 
SELECT TV_series.Air_Date FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "A Love of a Lifetime"   AND Cartoon.original_air_date = "1999-01-01"   AND Cartoon.channel = TV_Channel.id   AND TV_series.rating = 9.0   AND TV_series.share = 1.0   AND TV_series.weekly_rank = 1   AND TV_series.channel = TV_Channel.id   AND TV_series.directed_by = "David E. Talbert"   AND TV_series.written_by = "David E. Talbert"   AND TV_series.original_air_date = "1999-01-01"   AND TV_series.channel = TV_Channel.id   AND TV_series.content = "TV series"   AND TV_series
SELECT TV_series.Air_Date FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "A Love of a Lifetime"   AND Cartoon.original_air_date = "1999-01-25"   AND Cartoon.channel = TV_Channel.id   AND TV_series.rating = 9.0   AND TV_series.share = 1.0   AND TV_series.weekly_rank = 1   AND TV_series.channel = TV_Channel.id   AND TV_series.directed_by = "David E. Talbert"   AND TV_series.written_by = "David E. Talbert"   AND TV_series.original_air_date = "1999-01-25"   AND Cartoon.channel = TV_Channel.id   AND TV_series.rating = 9.0   AND TV_series.
SELECT TV_series.Weekly_Rank FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "A Love of a Lifetime"   AND Cartoon.original_air_date = "1999-01-01"   AND Cartoon.Production_code = 1 
SELECT TV_series.weekly_rank FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_series.id = cartoon.id WHERE cartoon.title = "A Love of a Lifetime"   AND cartoon.original_air_date = "2000-01-01"   AND cartoon.production_code = 1 
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "A Love of a Lifetime" 
SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Original_air_date = "A Love of a Lifetime" 
SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel WHERE TV_series.series_name = "Sky Radio" 
SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.title = "Sky Radio"   AND Cartoon.original_air_date = "2000-01-01"   AND Cartoon.channel = TV_Channel.id   AND Cartoon.Production_code = 1 
SELECT count(*),        TV_series.Director FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_series.Director 
SELECT TV_series.Air_Date,        TV_series.Rating,        TV_series.Share,        TV_series.18_49_Rating_Share,        TV_channel.Channel,        TV_channel.Pay_per_view_PPV,        TV_channel.Hight_definition_TV,        TV_channel.Pixel_aspect_ratio_PAR,        TV_channel.Country,        TV_channel.Language FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_series.id 
SELECT TV_Channel.channel,        TV_Channel.country,        TV_Channel.language,        TV_Channel.content,        TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.hight_definition_TV,        TV_Channel.pay_per_view_PPV,        TV_Channel.package_option,        TV_series.weekly_rank,        TV_series.viewers_m,        Cartoon.original_air_date,        Cartoon.production_code FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.original_air_date =     (SELECT max(original_air_date)      FROM TV_series) ORDER BY TV_series.weekly_rank DESC LIMIT 1; 
SELECT TV_Channel.channel,        TV_Channel.country,        TV_Channel.language,        TV_Channel.content,        TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.hight_definition_TV,        TV_Channel.pay_per_view_PPV,        TV_Channel.package_option,        TV_series.weekly_rank,        TV_series.viewers_m,        Cartoon.original_air_date,        Cartoon.production_code FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_series.original_air_date =     (SELECT max(original_air_date)      FROM TV_series)   AND TV_series.channel = TV_Channel.id   AND TV_series.production_code = TV_Channel.production_code   AND TV_series.channel = TV_Channel.channel   AND TV_series.
SELECT TV_Channel.Content,        TV_Channel.Series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel WHERE TV_series.weekly_rank = 1   AND TV_series.viewers_m > 1000   AND TV_series.original_air_date = "2015-09-25"   AND TV_series.channel = "Cartoon"   AND TV_Channel.Pay_per_view_PPV = 0   AND TV_Channel.Hight_definition_TV = 1   AND TV_Channel.Content = "high definition TV"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Cartoon"   AND TV_Channel.Content = "high definition TV"   AND TV_Channel.Content = "Cartoon"   AND TV_Channel.Content = "high definition TV"   AND TV_Channel.Content = "Cartoon"   AND TV_Channel.Content = "high definition TV"  
SELECT TV_Channel.Package_Option,        TV_series.Series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel WHERE TV_Channel.country = "Canada"   AND TV_series.Share = 1   AND TV_series.Weekly_Rank = 1   AND TV_series.Original_air_date = "2010-01-01"   AND TV_series.Production_code = 1 UNION SELECT TV_Channel.Package_Option,        TV_series.Series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel WHERE TV_Channel.country = "Canada"   AND TV_series.Share = 1   AND TV_series.Weekly_Rank = 1   AND TV_series.Original_air_date = "2010-01-01"   AND TV_series.Production_code = 2 
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Original_air_date = "2000-01-01"   AND Cartoon.Production_code = 1   AND Cartoon.Written_by = "Todd Casey" 
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Written_by = "Todd Casey"   AND Cartoon.Original_air_date = "2000-01-01" 
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code!= "Todd Casey" 
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code!= "Todd Casey" 
SELECT TV_Channel.series_name,        TV_Channel.country,        TV_Channel.language,        TV_Channel.content,        TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.hight_definition_TV,        TV_Channel.pay_per_view_PPV,        TV_Channel.package_option,        TV_series.episode,        TV_series.air_date,        TV_series.rating,        TV_series.share,        TV_series.18_49_rating_share,        TV_series.viewers_m,        TV_series.weekly_rank,        Cartoon.original_air_date,        Cartoon.production_code FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.series_id WHERE TV_series.directed_by = "Ben Jones"   AND TV_series.written_by = "Michael
SELECT TV_Channel.series_name,        TV_Channel.country,        TV_Channel.language,        TV_Channel.content,        TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.hight_definition_TV,        TV_Channel.pay_per_view_PPV,        TV_Channel.package_option,        TV_series.episode,        TV_series.air_date,        TV_series.rating,        TV_series.share,        TV_series.18_49_rating_share,        TV_series.viewers_m,        TV_series.weekly_rank,        TV_Channel.channel FROM TV_Channel JOIN TV_series ON TV_series.channel = TV_Channel.id JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.directed_by = "Ben Jones"   AND Cartoon.written_by = "Michael Chang" 
SELECT TV_Channel.Pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code!= 1 GROUP BY TV_Channel.Country HAVING TV_Channel.Country!= 'United States' 
SELECT TV_Channel.Pixel_aspect_ratio_PAR,        TV_Channel.Country,        TV_Channel.Language FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Production_code!= 1 GROUP BY TV_Channel.id HAVING TV_Channel.Language!= "English" 
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE TV_Channel.country = "Canada" GROUP BY TV_Channel.id HAVING COUNT(*) > 2 
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_series.id = Cartoon.id GROUP BY TV_Channel.id HAVING count(*) > 2 
SELECT channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.directed_by!= "Ben Jones"   AND tv_channel.country!= "USA"   AND tv_channel.language!= "English"   AND tv_channel.content!= "Cartoon"   AND tv_channel.pixel_aspect_ratio_PAR!= 1.75   AND tv_channel.high_definition_tv!= 1   AND tv_channel.pay_per_view_PPV!= 1   AND tv_channel.package_option!= "Standard"   AND tv_channel.rating!= 1.5   AND tv_channel.share!= 1   AND tv_channel.18_49_rating_share!= 1   AND tv_channel.viewers_m!= 1   AND tv_channel.weekly_rank!= 1 
SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.id = cartoon.id WHERE cartoon.directed_by!= "Ben Jones"   AND tv_channel.country!= "USA"   AND tv_channel.language!= "English"   AND tv_channel.content!= "Cartoon"   AND tv_channel.pixel_aspect_ratio_PAR!= 1.75   AND tv_channel.high_definition_tv!= 1   AND tv_channel.pay_per_view_PPV!= 1   AND tv_channel.package_option!= "Standard"   AND tv_channel.rating!= 1.5   AND tv_channel.share!= 1   AND tv_channel.18_49_rating_share!= 1   AND tv_channel.viewers_m!= 1   AND tv_channel.weekly_rank!= 1 
SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM TV_channel      WHERE directed_by = "Ben Jones") 
SELECT package_option FROM TV_channel WHERE id NOT IN     (SELECT channel      FROM TV_channel      WHERE directed_by = "Ben Jones") 
SELECT count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = "American"   AND people.Birth_Date = "1989-01-01"   AND people.Height = 180   AND poker_player.Final_Table_Made = 1   AND poker_player.Best_Finish = 1   AND poker_player.Money_Rank = 1   AND poker_player.Earnings > 0; 
SELECT count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = "American"   AND people.Birth_Date = "1989-01-01"   AND people.Height = 6'3"   AND poker_player.Final_Table_Made = 1   AND poker_player.Best_Finish = 1   AND poker_player.Money_Rank = 1   AND poker_player.Earnings > 0 
SELECT people.Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings DESC 
SELECT people.Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings DESC 
SELECT people.Final_Table_Made,        people.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Birth_Date 
SELECT people.Final_Table_Made,        people.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
SELECT avg(people.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.People_ID 
SELECT avg(people.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.People_ID 
SELECT people.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Birth_Date LIMIT 1 
SELECT people.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings DESC LIMIT 1 
SELECT max(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date < "1985-01-01"   AND people.Height < 180   AND people.Nationality = "United States"   AND poker_player.Money_Rank < 200000   AND poker_player.Earnings < 200000 
SELECT max(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date < "1980-01-01"   AND people.Height < 180   AND people.Nationality = "United States"   AND poker_player.Money_Rank < 200000   AND poker_player.Earnings < 200000 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Final_Table_Made = 1   AND people.Birth_Date = "1989-01-01"   AND people.Height = 180 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date > "1985-01-01"   AND people.Height > 180   AND poker_player.Earnings > 300000 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date > "1985-01-01"   AND poker_player.Earnings > 300000 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY count(*) DESC 
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings LIMIT 1 
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings LIMIT 1 
SELECT people.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height =     (SELECT MAX (people.Height)      FROM people      JOIN poker_player ON people.People_ID = poker_player.People_ID      WHERE people.Nationality = "Tall")   AND poker_player.Final_Table_Made = 1   AND poker_player.Best_Finish = 1 
SELECT people.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1 
SELECT avg(people.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
SELECT avg(people.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings DESC 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Earnings DESC 
SELECT people.Nationality,        count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality 
SELECT people.Nationality,        count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality 
SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY count(*) DESC LIMIT 1 
SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY count(*) DESC LIMIT 1 
SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING COUNT(*) >= 2 
SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING count(*) >= 2 
SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Name ASC 
SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Name 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= "Russia" 
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= 'Russia' 
SELECT name FROM people WHERE people_id NOT IN     (SELECT people_id      FROM poker_player) 
SELECT name FROM people WHERE people_id NOT IN     (SELECT people_id      FROM poker_player) 
SELECT count(DISTINCT people.Nationality) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality 
SELECT count(DISTINCT people.Nationality) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Final_Table_Made = 1   AND poker_player.Best_Finish = 1   AND poker_player.Money_Rank = 1   AND poker_player.Earnings > 0 
SELECT count(DISTINCT AREA_CODE_STATE.state) FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.state = "Texas" GROUP BY AREA_CODE_STATE.state 
SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number ORDER BY CONTESTANTS.contestant_name DESC 
SELECT votes.phone_number,        votes.state,        AREA_CODE_STATE.state FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN votes ON votes.contestant_number = CONTESTANTS.contestant_number WHERE AREA_CODE_STATE.state = "Texas" 
SELECT max(area_code),        min(area_code) FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE AREA_CODE_STATE.state = "Texas" GROUP BY AREA_CODE_STATE.area_code 
SELECT votes.created FROM area_code_state JOIN CONTESTANTS ON area_code_state.area_code = CONTESTANTS.contestant_number JOIN votes ON votes.contestant_number = CONTESTANTS.contestant_number WHERE area_code_state.state = 'CA' 
SELECT CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name!= "Jessie Alloway" 
SELECT DISTINCT AREA_CODE_STATE.state,                 VOTES.created FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number 
SELECT CONTESTANTS.contestant_number,        CONTESTANTS.state,        VOTES.phone_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number GROUP BY VOTES.phone_number HAVING COUNT(*) >= 2 
SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number ORDER BY count(*) LIMIT 1 
SELECT COUNT (DISTINCT votes.phone_number) FROM area_code_state JOIN CONTESTANTS ON area_code_state.area_code = CONTESTANTS.contestant_number JOIN votes ON votes.contestant_number = CONTESTANTS.contestant_number WHERE area_code_state.state = 'NY'   OR area_code_state.state = 'CA' 
SELECT count(*) FROM area_code_state JOIN CONTESTANTS ON area_code_state.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.state = "NY" EXCEPT SELECT count(*) FROM area_code_state JOIN CONTESTANTS ON area_code_state.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.state = "NJ" 
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY AREA_CODE_STATE.area_code ORDER BY count(*) DESC LIMIT 1 
SELECT votes.created,        AREA_CODE_STATE.state,        AREA_CODE_STATE.phone_number FROM area_code_state JOIN CONTESTANTS ON area_code_state.area_code = CONTESTANTS.contestant_number JOIN votes ON CONTESTANTS.contestant_number = votes.contestant_number WHERE CONTESTANTS.contestant_name = "Tabatha Gehling" 
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = "Tabatha Gehling" INTERSECT   SELECT AREA_CODE_STATE.area_code   FROM AREA_CODE_STATE   JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number   JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = "Kelly Clauss" 
SELECT CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name LIKE '%Al%' 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.indepyear > 1950 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.surfacearea > 1000   AND country.indepyear > 1950 
SELECT count(*) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.GovernmentForm = "Republic" GROUP BY city.CountryCode HAVING sum(countrylanguage.Percentage) > 0.5 
SELECT count(*) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Europe"   AND country.Region = "Europe"   AND country.SurfaceArea > 1000000   AND country.IndepYear = 1952   AND country.GovernmentForm = "Republic"   AND country.HeadOfState = "President"   AND country.Capital = 1   AND country.Code2 = "FR"   AND countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Percentage > 0.5 
SELECT sum(country.surfacearea) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "Caribbean"   AND country.lifeexpectancy > 0.8   AND country.gnpoalive > 0.8   AND country.gnpoffice > 0.8 GROUP BY country.countrycode 
SELECT sum(city.surfacearea) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "Caribbean" GROUP BY city.countrycode 
SELECT country.continent FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.name = "Anguilla"   AND country.region = "Caribbean"   AND country.surfacearea > 0; 
SELECT country.continent FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Anguilla"   AND countrylanguage.iso639_1 = "bx"   AND countrylanguage.percentage = 100; 
SELECT country.region FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE city.name = "Kabul"   AND country.continent = "Asia"   AND country.region = "Western Asia"; 
SELECT country.region FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE city.name = "Kabul"   AND country.continent = "Asia"   AND country.region = "Western Asia"; 
SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Aruba"   AND countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage      WHERE country.Name = "Aruba"        AND countrylanguage.IsOfficial = "Yes") 
SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Aruba"   AND countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage      WHERE CountryCode = country.Code        AND Language = "English")   AND country.CountryCode = countrylanguage.CountryCode   AND country.Capital = 192   AND country.GovernmentForm = "Republic"   AND country.LifeExpectancy = 80   AND country.GNPOld = 100   AND country.GNPOld = 100   AND country.Capital = 192   AND country.Capital = 192   AND country.Capital = 192   AND country.Capital = 192   AND country.Capital = 192   AND country.Capital = 192   AND country.Capital = 192  
SELECT city.Population,        city.LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Name = "Brazil"   AND country.Continent = "South America"   AND country.Region = "South"; 
SELECT city.Population,        city.LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Brazil"   AND countrylanguage.IsOfficial = 1   AND countrylanguage.Language = "Portuguese"; 
SELECT country.region,        country.population FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.name = "Angola"   AND country.continent = "Africa"   AND country.surfacearea = 12999.5; 
SELECT country.region,        country.population FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.name = "Angola"   AND country.continent = "Africa"   AND country.surfacearea = 11999.99   AND country.indipyear = 1975   AND country.lifeexpectancy = 72.5   AND country.gnpoal = "Yes"   AND country.governmentform = "Republic"   AND country.headofstate = "Joao Lourenco"   AND country.capital = 16   AND country.code2 = "AO"; 
SELECT avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa"   AND country.region = "Central Africa"   AND country.surfacearea > 1000   AND country.indipyear > 1950   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.capital = 2000 GROUP BY country.countrycode 
SELECT avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Central Africa"   AND country.region = "Central Africa"   AND country.surfacearea > 1000   AND country.indepyear > 1800   AND country.population > 1000000   AND country.capital = 2000   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.countrylanguage.language = "English"   AND country.countrylanguage.percentage = 100; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "Asia"   AND country.surfacearea =     (SELECT min(surfacearea)      FROM country      WHERE country.region = "Asia"        AND country.continent = "Asia")   AND country.lifeexpectancy =     (SELECT min(lifeexpectancy)      FROM country      WHERE country.region = "Asia"        AND country.continent = "Asia")   AND country.gnpoffice = "President"   AND country.governmentform = "Presidential"   AND country.headofstate = "President"   AND country.capital = 139 ORDER BY country.lifeexpectancy LIMIT 1; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "Asia"   AND country.surfacearea =     (SELECT min(surfacearea)      FROM country      WHERE country.region = "Asia"        AND country.continent = "Asia")   AND country.lifeexpectancy =     (SELECT min(lifeexpectancy)      FROM country      WHERE country.region = "Asia"        AND country.continent = "Asia")   AND country.gnpoffice = "President"   AND country.gnpold = "GDP"   AND country.governmentform = "President"   AND country.headofstate = "China"   AND country.capital = 110 ORDER BY country.lifeexpectancy LIMIT 1; 
SELECT sum(city.Population),        max(city.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia" GROUP BY country.CountryCode 
SELECT city.Population,        country.GNP FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia" GROUP BY city.CountryCode ORDER BY max(city.GNP) DESC LIMIT 1 
SELECT avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa"   AND country.region = "Republic"   AND country.surfacearea > 1000 GROUP BY country.countrycode HAVING country.governmentform = "Republic" 
SELECT avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa"   AND country.region = "Republic"   AND country.surfacearea > 1000 GROUP BY country.countrycode 
SELECT sum(country.surfacearea) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia'   OR country.continent = 'Europe' GROUP BY country.countrycode 
SELECT sum(country.surfacearea) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   OR country.continent = "Europe" GROUP BY city.countrycode 
SELECT city.Population FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Europe"   AND country.Region = "Gelderland"   AND countrylanguage.Language = "Dutch"   AND countrylanguage.Percentage = 100; 
SELECT sum(city.Population) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Europe"   AND country.Region = "Gelderland"   AND countrylanguage.Language = "Dutch"   AND countrylanguage.Percentage = 100 
SELECT avg(country.GNP),        sum(city.Population) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "US" GROUP BY country.CountryCode 
SELECT country.GNP,        country.Population FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Americas"   AND country.Region = "US" GROUP BY country.CountryCode 
SELECT COUNT (DISTINCT countrylanguage.Language) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Asia"   AND country.Region = "World"   AND country.SurfaceArea > 1000000   AND country.IndepYear > 1950   AND country.LifeExpectancy > 80   AND country.GNP > 1000000   AND country.GNPOld > 80   AND country.GovernmentForm = "Republic"   AND country.HeadOfState = "President"   AND country.Capital = 1   AND country.Code2 = "AF"   AND countrylanguage.IsOfficial = "Yes"; 
SELECT COUNT (DISTINCT countrylanguage.Language) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Asia"   AND country.Region = "Asia"   AND country.SurfaceArea > 1000000   AND country.IndepYear > 1950   AND country.LifeExpectancy > 70   AND country.GNPOld > 100   AND country.GNPOld < 100   AND country.GovernmentForm = "Republic"   AND country.HeadOfState = "President"   AND country.Capital = 110   AND country.Code2 = "AF"   AND countrylanguage.IsOfficial = "Yes"; 
SELECT count(DISTINCT country.governmentform) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa" GROUP BY country.governmentform 
SELECT DISTINCT country.governmentform FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa" GROUP BY country.governmentform HAVING COUNT(*) > 1 
SELECT sum(countrylanguage.percentage) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Aruba"   AND country.continent = "Americas"   AND country.region = "Caribbean"   AND country.surfacearea = 1000   AND country.indepyear = 1983   AND country.population = 30000   AND country.lifeexpectancy = 80   AND country.gnpoal = "country"   AND country.governmentform = "constitutional monarchy"   AND country.headofstate = "Prime Minister"   AND country.capital = 19   AND country.code2 = "AW"; 
SELECT countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Aruba"   AND country.capital = 192   AND country.surfacearea = 119   AND country.indipyear = 1980   AND country.governmentform = "constitutional monarchy"   AND country.headofstate = "Prime Minister"   AND country.capital = 192   AND country.countrylanguage.iso6391 = "nl"   AND country.countrylanguage.iso6392 = "nl"   AND country.countrylanguage.iso6393 = "nl"   AND country.countrylanguage.iso6394 = "nl"   AND country.countrylanguage.iso6395 = "nl"   AND country.countrylanguage.iso6396 = "nl"   AND country.countrylanguage.iso639
SELECT countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"   AND country.continent = "Asia"   AND country.region = "Central Asia"   AND country.surfacearea > 1000000   AND country.indepyear > 1920   AND country.lifeexpectancy > 70   AND country.gnpoal < 100   AND country.gnpoold < 100   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.capital = 143   AND country.code2 = "AF"   AND countrylanguage.iso3 = "AFG"   AND countrylanguage.percentage = "100"; 
SELECT countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Afghanistan"   AND country.continent = "Asia"   AND country.region = "Central Asia"   AND country.surfacearea > 1000   AND country.indepyear > 1920   AND country.lifeexpectancy > 70   AND country.gnpoalive > 100   AND country.gnpoffice > 100   AND country.capital = 143   AND country.code2 = "AF"   AND countrylanguage.iso3 = "AFG"   AND countrylanguage.percentage = "100"; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage =     (SELECT max(percentage)      FROM countrylanguage) GROUP BY country.name ORDER BY country.capital LIMIT 1; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.iso6391 = "en" ORDER BY countrylanguage.percentage DESC LIMIT 1 
SELECT country.continent FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia" GROUP BY country.continent ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
SELECT country.continent FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.iso6391 = "en" GROUP BY country.continent ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
SELECT count(*) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.region = "Netherlands"   AND country.surfacearea > 1000000   AND country.indipyear > 1950   AND country.lifeexpectancy > 80   AND country.gnpoalive > 100   AND country.gnpoffice > 60   AND country.capital = 10000   AND country.code2 = "NL"   AND countrylanguage.iso3 = "NLD"   AND countrylanguage.percentage > 0.5 GROUP BY country.countrycode HAVING count(*) = 2 
SELECT COUNT (DISTINCT country.name) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Europe"   AND country.region = "Netherlands"   AND country.surfacearea > 1000   AND country.indipyear > 1500   AND country.lifeexpectancy > 80   AND country.gnpoalive > 100   AND country.gnpoffice > 100   AND country.capital = 1000   AND country.code2 = "NL"   AND countrylanguage.iso3 = "eng"   AND countrylanguage.percentage > 0.5 GROUP BY country.name 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French" 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French" 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French" 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" INTERSECT   SELECT country.name   FROM city   JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name   JOIN country ON city.countrycode = country.code   JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "French" 
SELECT DISTINCT country.continent FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "Chinese"   AND countrylanguage.language = "Chinese"   AND countrylanguage.percentage > 0.5 
SELECT country.continent,        country.region,        country.surfacearea,        country.lifeexpectancy,        country.gnp,        country.gnpold,        country.governmentform,        country.headofstate,        country.capital,        country.code2 FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = "China"   AND countrylanguage.language = "Chinese" GROUP BY country.continent,          country.region,          country.surfacearea,          country.lifeexpectancy,          country.gnp,          country.gnpold,          country.governmentform,          country.headofstate,          country.capital,          country.code2 ORDER BY country.capital 
SELECT country.region FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.region = "North America"   AND country.language = "English"   OR country.region = "South America"   AND country.language = "Dutch" 
SELECT country.region FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.region = "Netherlands"   OR country.region = "England"   AND country.language = "Dutch"   OR country.language = "English"   AND country.capital = 10000   AND country.surfacearea > 10000   AND country.gnpoal < 10000   AND country.gnpoold < 10000   AND country.lifeexpectancy > 80   AND country.gnp > 1000000   AND country.gnpold > 1000000   AND country.governmentform = "Republic"   AND country.headofstate = "Prime Minister"   AND country.capital = 10000   AND country.surfacearea > 100
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   OR countrylanguage.language = "Dutch"   AND country.iso3 = "USA" 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   OR countrylanguage.language = "Dutch"   AND country.iso3 = "USA" 
SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON sqlite_sequence.name = city.countrycode JOIN countrylanguage ON countrylanguage.countrycode = city.countrycode WHERE country.continent = "Asia" GROUP BY countrylanguage.language ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON sqlite_sequence.name = city.countrycode JOIN country ON country.code = city.countrycode WHERE country.continent = "Asia" GROUP BY country.language ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.CountryCode IN     (SELECT country.CountryCode      FROM country      JOIN countrylanguage ON country.Code = countrylanguage.CountryCode      WHERE countrylanguage.IsOfficial = 'Y'      GROUP BY country.CountryCode      HAVING COUNT(*) = 1) 
SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.CountryCode = countrylanguage.CountryCode   AND country.GovernmentForm = "Republic" GROUP BY countrylanguage.Language HAVING count(*) = 1 
SELECT city FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.countrycode = "United States"   AND country.continent = "North America"   AND country.region = "Midwest"   AND country.surfacearea =     (SELECT max(city.population)      FROM city      JOIN country ON city.countrycode = country.code      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.countrycode = "United States"        AND country.continent = "North America"        AND country.region = "Midwest"        AND country.language = "English")   AND country.governmentform = "Republic"   AND country.headofstate = "Donald Trump"   AND country.capital = 1876   AND country.code2 = "US"   AND countrylanguage.percentage =     (SELECT max(countrylanguage.percentage)      FROM countrylanguage      JOIN
SELECT city.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   AND countrylanguage.percentage > 0.5 ORDER BY city.population DESC LIMIT 1; 
SELECT city.name,        city.population,        city.lifeexpectancy FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "Asia"   AND country.surfacearea =     (SELECT MAX (surfacearea)      FROM country      WHERE country.continent = "Asia"        AND country.region = "Asia")   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.capital = "Tokyo"   AND country.code2 = "JP"   AND countrylanguage.iso3 = "JPN"   AND countrylanguage.percentage =     (SELECT max(percentage)      FROM countrylanguage      WHERE country.countrycode = countrylanguage.countrycode        AND countrylanguage.language = "Japanese") 
SELECT city.name,        city.population,        city.life_expectancy FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "Asia"   AND country.surfacearea =     (SELECT MAX (surfacearea)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.continent = "Asia"        AND country.region = "Asia"        AND country.countrycode = city.countrycode        AND city.district = "capital")   AND country.governmentform = "democracy"   AND country.headofstate = "China"   AND country.capital = 1396 ORDER BY city.population DESC LIMIT 1; 
SELECT avg(country.lifeexpectancy) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   AND country.region = "Europe"   AND country.continent = "Europe"   AND country.surfacearea > 1000000   AND country.indipopulation > 1000000   AND country.gnpoffice = "true"   AND country.gnpoldate = "2010"   AND country.governmentform = "democracy"   AND country.capital = 1000000 GROUP BY country.lifeexpectancy HAVING avg(country.lifeexpectancy) > 80 
SELECT country.lifeexpectancy FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   AND country.region = "Europe" GROUP BY country.countrycode HAVING avg(countrylanguage.percentage) > 0.5 
SELECT sum(city.Population) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia"   AND country.Region = "national"   AND country.SurfaceArea = 0   AND country.IndepYear = 0   AND country.Population < 1000000   AND country.LifeExpectancy = 0   AND country.GNPOld = 0   AND country.GNPOld = 0   AND country.GovernmentForm = "dictatorship"   AND country.HeadOfState = "dictator"   AND country.Capital = 0   AND country.Code2 = "AF"   AND countrylanguage.IsOfficial = "No" GROUP BY country.CountryCode 
SELECT city.Population FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Americas"   AND country.Region = "United States"   AND country.SurfaceArea = 7890   AND country.IndepYear = 1776   AND country.Population > 1000000   AND country.LifeExpectancy > 80   AND country.GNPOld > 80   AND country.GNPOld < 100   AND country.GovernmentForm = "Republic"   AND country.HeadOfState = "President"   AND country.Capital = 1307   AND country.Code2 = "USA"   AND countrylanguage.IsOfficial = "No"   AND countrylanguage.Percentage = "No" 
SELECT countrylanguage.Language FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.CountryCode = "BEATRIX"   AND countrylanguage.IsOfficial = 1   AND countrylanguage.Percentage = 100.00 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.countrycode = "Beatrix"   AND countrylanguage.iso639_1 = "nl"   AND countrylanguage.percentage = 100.0 
SELECT sum(countrylanguage.percentage) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Europe"   AND country.Region = "Europe"   AND country.SurfaceArea < 1000000   AND country.IndepYear < 1930 GROUP BY country.CountryCode 
SELECT sum(countrylanguage.percentage) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.region = "Europe"   AND country.surfacearea < 1000000   AND country.indepyear < 1930 GROUP BY country.countrycode 
;
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.surfacearea >     (SELECT max(surfacearea)      FROM country      WHERE country.continent = "Europe") 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa"   AND country.region = "Asia"   AND city.population <     (SELECT min(city.population)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.continent = "Africa"        AND country.region = "Asia") 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Africa"   AND country.region = "Asia"   AND city.population <     (SELECT min(city.population)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.continent = "Africa"        AND country.region = "Asia") 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "Asia"   AND city.population >     (SELECT max(city.population)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.continent = "Africa"        AND country.region = "Africa") 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND city.population >     (SELECT max(city.population)      FROM city      JOIN country ON city.countrycode = country.code      WHERE country.region = "Africa"        AND country.countrycode = country.code        AND country.governmentform = "Republic") 
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "United States"   AND country.surfacearea = 0   AND country.indepyear = 1776   AND country.population = 1000000   AND country.lifeexpectancy = 80   AND country.gnpoal = "none"   AND country.governmentform = "none"   AND country.headofstate = "none"   AND country.capital = 0   AND country.code2 = "USA"   AND countrylanguage.iso3 = "eng" EXCEPT SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "United States
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.countrycode WHERE country.continent = "Americas"   AND country.region = "United States"   AND country.surfacearea = 0   AND country.indepyear = 1776   AND country.population = 1000000   AND country.lifeexpectancy = 80   AND country.gnpoal = "none"   AND country.governmentform = "none"   AND country.headofstate = "none"   AND country.capital = 0   AND country.code2 = "USA"   AND countrylanguage.iso3 = "eng" EXCEPT SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.countrycode WHERE country.continent = "Americas"   AND country.region = "Un
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "North America"   AND country.surfacearea > 1000000   AND country.lifeexpectancy > 80   AND country.gnpoalive > 0   AND country.gnpoffice > 0   AND country.capital = 1   AND country.code2 = "USA"   AND countrylanguage.isocode!= "eng" 
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language!= "English" 
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "United States"   AND country.surfacearea = 0   AND country.indepyear = 1776   AND country.population = 13888000   AND country.lifeexpectancy = 80   AND country.gnpoal = "No"   AND country.governmentform = "Republic"   AND country.headofstate = "None"   AND country.capital = 0   AND country.code2 = "USA"   AND countrylanguage.iso3 = "eng" EXCEPT SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas"   AND country.region = "Un
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas" EXCEPT SELECT country.countrycode FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.iso6391 = "eng"   AND countrylanguage.iso6392 = "eng"   AND countrylanguage.percentage = 100 
;
SELECT city.Name FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name WHERE city.Language!= "English" 
SELECT DISTINCT city.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia"   AND country.region = "Chinese"   AND country.surfacearea > 1000   AND country.indepyear > 1949   AND country.lifeexpectancy > 70   AND country.gnpoal > 0   AND country.gnpoold > 0   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.capital = 110   AND country.code2 = "CN"   AND countrylanguage.iso639 = "zh"   AND countrylanguage.percentage > 0.5 
SELECT DISTINCT city.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia"   AND country.region = "China"   AND country.surfacearea > 1000   AND country.lifeexpectancy > 70   AND country.gnpoal = "Chinese"   AND country.gnpoffice = "headofstate"   AND country.capital = 110   AND country.code2 = "CN"; 
SELECT country.name,        country.indepyear,        country.surfacearea FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.region = "Europe" ORDER BY city.population DESC LIMIT 1 
SELECT country.name,        country.surface_area,        country.population FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON country.code = city.countrycode WHERE country.continent = "Americas" ORDER BY country.population LIMIT 1 
SELECT city.Population,        city.Name,        city.CountryCode,        city.GovernmentForm,        city.HeadOfState,        city.Capital,        city.LifeExpectancy,        city.GNPOld,        city.GNP,        city.Country.Region,        city.Country.Continent,        city.Country.SurfaceArea,        city.Country.IsOfficial,        city.Country.Capital FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Country.Region =     (SELECT country.Region      FROM country      JOIN countrylanguage ON country.Code = countrylanguage.CountryCode      WHERE country.Country.Continent = "Asia"        AND country.Country.SurfaceArea =          (SELECT MAX (country.SurfaceArea)           FROM country           JOIN countrylanguage ON country.Code = countrylanguage.CountryCode           WHERE country.Country.Continent = "Asia"             AND
SELECT city.name,        city.population,        city.head_of_state FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea =     (SELECT MAX (surfacearea)      FROM country)   AND country.continent = "Europe"   AND country.region = "Northern Europe"   AND country.lifeexpectancy > 80   AND country.gnpoalive > 0.95   AND country.gnpoffice > "President" ORDER BY country.capital 
SELECT country.name,        countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.countrycode IN     (SELECT country.countrycode      FROM country      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE countrylanguage.iso6391 IN          (SELECT iso6391           FROM countrylanguage           WHERE percentage > 0.3)) GROUP BY country.name HAVING country.capital IN     (SELECT capital      FROM country      WHERE country.countrycode IN          (SELECT country.countrycode           FROM country           JOIN countrylanguage ON country.code = countrylanguage.countrycode           WHERE countrylanguage.iso6391 IN               (SELECT iso6391                FROM countrylanguage                WHERE percentage > 0.3)) GROUP BY country.capital HAVING country.capital IN     (SELECT capital      FROM country      WHERE country.countrycode IN          (SELECT country
SELECT country.name,        country.countrycode,        country.district,        country.population,        country.lifeexpectancy,        country.gnpoal,        country.gnpoff,        country.governmentform,        country.headofstate,        country.capital,        country.code2 FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.countrycode = countrylanguage.countrycode WHERE country.countrycode IN     (SELECT country.countrycode      FROM country      JOIN countrylanguage ON country.countrycode = countrylanguage.countrycode      WHERE countrylanguage.percentage > 0.5) GROUP BY country.countrycode 
SELECT city.district,        count(*) FROM city JOIN country ON city.countrycode = country.code JOIN citylanguage ON city.id = citylanguage.countrycode WHERE city.population >     (SELECT avg(population)      FROM city      JOIN country ON city.countrycode = country.code      JOIN citylanguage ON city.id = citylanguage.countrycode      WHERE country.continent = "Asia"        AND country.region = "North America"        AND country.surfacearea > 1000        AND country.indepyear > 1950        AND country.lifeexpectancy > 80        AND country.gnpoalive > 100        AND country.governmentform = "Republic"        AND country.headofstate = "United States") GROUP BY city.district 
SELECT city.district,        count(*) FROM city JOIN country ON city.countrycode = country.code JOIN citylanguage ON city.id = citylanguage.countrycode WHERE city.population >     (SELECT avg(population)      FROM city      JOIN country ON city.countrycode = country.code      JOIN citylanguage ON city.id = citylanguage.countrycode      WHERE country.continent = "Asia"        AND country.region = "North America"        AND country.surfacearea > 1000        AND country.indepyear > 1950        AND country.gnpoal = "true"        AND country.gnpoffice = "President") GROUP BY city.district HAVING count(*) > 1 
SELECT country.countrycode,        country.population,        country.governmentform FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.countrycode WHERE country.region = "Asia"   AND country.lifeexpectancy > 72 GROUP BY country.countrycode HAVING avg(country.gnpoal) > 100 
SELECT country.countrycode,        country.population,        country.governmentform,        country.capital,        country.gnpoal,        country.gnpold,        country.lifeexpectancy,        country.GNP,        country.GNPOld,        country.headofstate,        country.capital,        country.code2 FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.lifeexpectancy > 72 GROUP BY country.countrycode HAVING sum(countrylanguage.percentage) > 0.5 
SELECT country.countrycode,        avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Asia"   AND country.continent = "Asia" GROUP BY country.countrycode HAVING avg(country.lifeexpectancy) < 72 
SELECT country.continent,        country.population,        country.lifeexpectancy,        country.gnpoal,        country.gnpoff,        country.capital,        country.code2,        country.governmentform,        country.headofstate,        country.capital,        country.countrylanguage.language,        country.countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.country WHERE countrylanguage.percentage < 72 GROUP BY country.continent 
SELECT country.name,        country.surfacearea,        country.population,        country.lifeexpectancy,        country.gnp,        country.gnpold,        country.localname,        country.governmentform,        country.headofstate,        country.capital,        country.code2 FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON sqlite_sequence.name = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.surfacearea =     (SELECT MAX (surfacearea)      FROM city      JOIN country ON city.countrycode = country.code      JOIN sqlite_sequence ON sqlite_sequence.name = city.countrycode      JOIN countrylanguage ON country.code = countrylanguage.countrycode) ORDER BY country.surfacearea DESC LIMIT 5; 
SELECT country.name,        country.surfacearea,        country.population FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia" ORDER BY country.surfacearea DESC LIMIT 5; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.population >     (SELECT max(population)      FROM city      JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name      JOIN country ON city.countrycode = country.code      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.countrylanguage.percentage =          (SELECT max(percentage)           FROM countrylanguage)) ORDER BY country.population DESC LIMIT 3; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.countrycode IN     (SELECT country.countrycode      FROM city      JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name      JOIN country ON city.countrycode = country.code      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.continent = "Americas"        AND country.region = "North America"        AND country.surfacearea > 1000000        AND country.lifeexpectancy > 80        AND country.gnpoalive > 100        AND country.gnpoffice > 100        AND country.governmentform = "Presidential"        AND country.headofstate = "United States") ORDER BY country.population DESC LIMIT 3; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.surfacearea =     (SELECT min(surfacearea)      FROM country)   AND country.region =     (SELECT min(region)      FROM country)   AND country.continent =     (SELECT min(continent)      FROM country) ORDER BY country.population LIMIT 3; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Americas" GROUP BY country.name ORDER BY count(*) LIMIT 3 
SELECT COUNT (DISTINCT country.name) FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Asia" GROUP BY country.countrycode 
SELECT COUNT(*) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia" GROUP BY city.CountryCode 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.population > 80000 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.continent = "Europe"   AND country.population = 80000 
SELECT sum(city.Population),        avg(city.Population) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "North America"   AND country.Area > 3000 GROUP BY country.CountryCode 
SELECT sum(city.Population),        avg(city.SurfaceArea) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name WHERE city.CountryCode IN     (SELECT country.CountryCode      FROM country      JOIN countrylanguage ON country.Code = countrylanguage.CountryCode      WHERE countrylanguage.Language = "English"      AND country.Continent = "North America"      AND country.Region = "North America"      AND country.SurfaceArea > 3000) GROUP BY city.CountryCode 
SELECT city.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN citylanguage ON city.id = citylanguage.countrycode WHERE city.population BETWEEN 160000 AND 900000 
SELECT city.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code WHERE country.surfacearea BETWEEN 160000 AND 900000   AND country.region = "Asia"   AND country.continent = "Asia"   AND country.lifeexpectancy > 70   AND country.gnpoalive > 0.8   AND country.gnpoffice > 0.8   AND country.capital = 137   AND country.governmentform = "Republic"   AND country.headofstate = "President"   AND country.capital = 137   AND country.countrylanguage.percentage > 0.5 
SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON country.code = sqlite_sequence.code JOIN countrylanguage ON country.countrycode = countrylanguage.countrycode GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1 
SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1 
SELECT country.name,        country.countrycode,        country.district,        country.population,        country.lifeexpectancy,        country.gnpoal,        country.governmentform,        country.headofstate,        country.capital,        country.code2,        country.percentage,        country.iso3,        country.isocountry,        country.isocountrycode FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.isocountry = "country" GROUP BY country.countrycode ORDER BY country.lifeexpectancy DESC LIMIT 1; 
SELECT country.countrycode,        country.name,        countrylanguage.language,        countrylanguage.percentage FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Asia" GROUP BY country.countrycode ORDER BY countrylanguage.percentage DESC LIMIT 10; 
SELECT country.name FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish"   AND countrylanguage.percentage =     (SELECT max(percentage)      FROM countrylanguage      WHERE language = "Spanish") GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
SELECT count(*) FROM city JOIN sqlite_sequence ON city.CountryCode = sqlite_sequence.name JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = "Europe"   AND country.Region = "Spain"   AND country.SurfaceArea > 1000000   AND country.IndepYear > 1980   AND country.LifeExpectancy > 80   AND country.GNPOld > 100   AND country.GNPOld < 100   AND country.GovernmentForm = "Republic"   AND country.HeadOfState = "President"   AND country.Capital = 13   AND country.Code2 = "ES"   AND countrylanguage.Language = "Spanish"   AND countrylanguage.Percentage > 0.5 
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = "Americas"   AND country.region = "North America"   AND country.surfacearea =     (SELECT max(surfacearea)      FROM city      JOIN country ON city.countrycode = country.code      JOIN countrylanguage ON country.code = countrylanguage.countrycode      WHERE country.countrylanguage.language = "Spanish"        AND countrylanguage.percentage =          (SELECT max(percentage)           FROM countrylanguage           JOIN countrylanguage ON countrylanguage.countrycode = country.countrylanguage.countrycode           WHERE country.countrylanguage.language = "Spanish")) 
SELECT country.countrycode FROM city JOIN sqlite_sequence ON city.countrycode = sqlite_sequence.name JOIN country ON city.countrycode = country.countrycode JOIN countrylanguage ON country.countrycode = countrylanguage.countrycode WHERE country.name = "Spain"   AND countrylanguage.language = "Spanish"   AND countrylanguage.percentage = 1.0 
SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "Russia"   AND show.If_first_show = 1   AND show.Result = "Win"   AND show.Attendance > 1000; 
SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1   AND show.Result = "Success"   AND show.Attendance > 0 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID ORDER BY conductor.Age ASC 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 ORDER BY conductor.Age 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE orchestra.Nationality!= "USA" 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE orchestra.Nationality!= "USA" 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID ORDER BY orchestra.Year_of_Founded 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE conductor.Name = "Tony"   AND conductor.Age = 30   AND conductor.Nationality = "USA" ORDER BY orchestra.Year_of_Founded DESC 
SELECT avg(show.attendance) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE conductor.name = "Tony"   AND conductor.age = 30   AND conductor.nationality = "United States"   AND show.if_first_show = 1   AND show.result = "Win" GROUP BY show.performance_id 
SELECT avg(show.attendance) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE conductor.name = "John Williams"   AND conductor.age > 40   AND conductor.nationality = "US"   AND show.if_first_show = 1   AND show.result = "Win" GROUP BY show.performance_id 
SELECT max(show.share),        min(show.share) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE orchestra.Nationality!= "Russia"   AND orchestra.Year_of_Founded > 1900   AND orchestra.Major_Record_Format!= "Live final" GROUP BY show.show_id 
SELECT max(show.Share),        min(show.Share) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "Russia"   AND orchestra.Year_of_Founded > 1900 EXCEPT SELECT show.Share,        show.Share FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "United States"   AND orchestra.Year_of_Founded > 1900 
SELECT count(DISTINCT nationality) FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE show.if_first_show = 1   AND conductor.name = "Conductor"   AND orchestra.year_of_work = performance.year_of_work   AND orchestra.name = "Orchestra"   AND performance.year_of_founded = performance.year_of_founded   AND performance.major_record_format = "Record Company"   AND performance.record_company = "Record Company"   AND performance.type = "Show"   AND performance.share = "Share"   AND performance.weekly_rank = "Weekly rank"   AND performance.official_ratings_millions = "Millions"   AND performance.result = "Attendance" 
SELECT count(DISTINCT conductor.Nationality) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 1   AND show.Result = "Attended" GROUP BY conductor.Nationality 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID ORDER BY conductor.Age DESC 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID ORDER BY conductor.Age DESC 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 ORDER BY orchestra.Year_of_Work DESC LIMIT 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 ORDER BY orchestra.Year_of_Work DESC LIMIT 1 
SELECT conductor.Name,        conductor.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1   AND show.Result = "Success"   AND show.Attendance > 0 
SELECT conductor.Name,        orchestras.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1   AND show.Result = "Success"   AND show.Attendance > 0 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY conductor.Name HAVING count(*) > 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY conductor.Name HAVING count(*) > 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded > 2008   AND show.If_first_show = 1   AND show.Result = "Share"   AND show.Attendance > 1000 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded > 2008 
SELECT orchestra.Record_Company,        count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE conductor.Name = "Tony"   AND conductor.Age = 30   AND conductor.Nationality = "USA"   AND show.If_first_show = 1 GROUP BY orchestra.Record_Company 
SELECT orchestra.Orchestra,        orchestra.Conductor_ID,        count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "USA"   AND orchestra.Year_of_Founded = 1990 GROUP BY orchestra.Orchestra 
SELECT orchestra.Major_Record_Format FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 ORDER BY orchestra.Major_Record_Format 
SELECT orchestra.Major_Record_Format FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 ORDER BY orchestra.Major_Record_Format 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY orchestra.Record_Company ORDER BY sum(show.Attendance) DESC LIMIT 1 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE show.If_first_show = 1 GROUP BY orchestra.Record_Company ORDER BY sum(show.Attendance) DESC LIMIT 1 
SELECT orchestra FROM conductor WHERE conductor_id NOT IN     (SELECT orchestral_id      FROM orchestra      JOIN performance ON orchestra.orchestra_id = performance.orchestra_id      JOIN show ON show.performance_id = performance.performance_id      WHERE show.if_first_show = 1        AND show.result = "No Show") 
SELECT orchestra FROM conductor WHERE conductor_id NOT IN     (SELECT conductor_id      FROM orchestra      JOIN performance ON orchestra.conductor_id = performance.Orchestra_ID      JOIN show ON show.Performance_ID = performance.Performance_ID      WHERE show.if_first_show = 1        AND show.result = "Attendance"        AND show.Attendance > 1000) 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded < 2003   OR orchestra.Year_of_Founded > 2003 GROUP BY orchestra.Record_Company 
SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded < 2003 INTERSECT   SELECT orchestra.Record_Company   FROM conductor   JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID   JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID   JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded > 2003 
SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "Canada"   OR orchestra.Nationality = "United States"   OR orchestra.Year_of_Founded = 2000   OR show.If_first_show = 1   OR show.Result = "Win"   OR show.Attendance > 1000 GROUP BY conductor.Name HAVING count(*) = 1 
SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Nationality = "Canada"   AND orchestra.Year_of_Founded = 2000   AND orchestra.Record_Company = "Universal Music Group"   AND show.If_first_show = 1   AND show.Result = "CD"   OR show.Result = "DVD" GROUP BY show.Orchestra_ID 
SELECT year_of_founded FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE show.if_first_show = 1 GROUP BY year_of_founded HAVING count(*) > 1 
SELECT orchestra.year_of_founded FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON show.performance_id = performance.performance_id WHERE show.if_first_show = 1 GROUP BY orchestra.year_of_founded HAVING count(*) > 1 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.liked_id 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id 
SELECT Highschooler.name,        Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id 
SELECT Highschooler.name,        Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id 
SELECT DISTINCT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id 
SELECT DISTINCT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id 
SELECT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id WHERE Highschooler.grade = 10 
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE Highschooler.grade = 10 
SELECT highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.student_id JOIN likes ON friend.friend_id = likes.liked_id WHERE highschooler.name = "Kyle" 
SELECT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.grade = 9   OR highschooler.grade = 10 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.grade = 9   OR highschooler.grade = 10 
SELECT count(*),        highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.grade 
SELECT count(*),        highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.grade 
SELECT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.grade ORDER BY count(*) DESC LIMIT 1 
SELECT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.grade HAVING count(*) >= 4 
SELECT DISTINCT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.grade HAVING count(*) >= 4 
SELECT Highschooler.name,        Highschooler.grade,        count(*) FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON Highschooler.id = likes.student_id GROUP BY Highschooler.id 
SELECT count(*),        highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY highschooler.name 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY Highschooler.id 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY Highschooler.id 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id GROUP BY Highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY Highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id GROUP BY Highschooler.id HAVING count(*) >= 3 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id GROUP BY Highschooler.id HAVING count(*) >= 3 
SELECT DISTINCT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.grade = 9   AND likes.liked_id = 100   AND friend.friend_id = likes.liked_id 
SELECT DISTINCT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.grade = 9   AND likes.liked_id = 1 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT DISTINCT highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.student_id JOIN likes ON highschooler.ID = likes.student_id WHERE friend.friend_id = likes.liked_id EXCEPT SELECT DISTINCT highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.friend_id JOIN likes ON highschooler.ID = likes.student_id WHERE friend.student_id = likes.liked_id 
SELECT DISTINCT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE friend.friend_id NOT IN     (SELECT highschooler.id      FROM highschooler      JOIN friend ON highschooler.id = friend.student_id      JOIN likes ON highschooler.id = likes.student_id) 
SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend      JOIN likes ON friend_id = liked_id      WHERE liked_id IN          (SELECT liked_id           FROM likes           WHERE friend_id IN               (SELECT friend_id                FROM friend                JOIN likes ON friend_id = liked_id                WHERE liked_id IN                    (SELECT liked_id                     FROM likes                     WHERE friend_id IN                         (SELECT friend_id                          FROM friend                          JOIN likes ON friend_id = liked_id                          WHERE liked_id IN                              (SELECT liked_id                               FROM likes                               WHERE friend_id IN                                   (SELECT friend_id                                    FROM friend                                    JOIN likes ON friend_id = liked_id                                    WHERE liked_id IN                                        (SELECT liked_id                                         FROM likes                                         WHERE friend_id IN                                             (SELECT friend_id                                              FROM
SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend      JOIN likes ON friend_id = liked_id      WHERE liked_id = 1) 
SELECT highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.student_id JOIN likes ON highschooler.ID = likes.student_id 
SELECT highschooler.ID FROM highschooler JOIN friend ON highschooler.ID = friend.student_id JOIN likes ON highschooler.ID = likes.student_id 
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id 
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id 
SELECT count(*),        highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name 
SELECT highschooler.name,        count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Likes ON Highschooler.id = Likes.student_id GROUP BY Highschooler.id 
SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID 
SELECT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY Highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY Highschooler.id HAVING count(*) >= 2 
SELECT Highschooler.name FROM Highschooler JOIN friend ON Highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY Highschooler.id HAVING count(*) >= 2 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.id HAVING count(*) >= 2 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.id = Friend.student_id JOIN Likes ON Friend.student_id = Likes.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.id HAVING count(*) >= 2 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = "Kyle" 
SELECT avg(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY highschooler.id 
SELECT avg(grade) FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON friend.student_id = likes.student_id GROUP BY highschooler.id 
SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend      JOIN likes ON friend.student_id = likes.student_id      WHERE likes.liked_id = 1) 
SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT friend_id      FROM friend      JOIN likes ON friend.student_id = likes.student_id      WHERE likes.liked_id NOT IN          (SELECT friend_id           FROM friend           JOIN likes ON friend.student_id = likes.student_id           WHERE likes.liked_id NOT IN               (SELECT friend_id                FROM friend                JOIN likes ON friend.student_id = likes.student_id                WHERE likes.liked_id NOT IN                    (SELECT friend_id                     FROM friend                     JOIN likes ON friend.student_id = likes.student_id                     WHERE likes.liked_id NOT IN                         (SELECT friend_id                          FROM friend                          JOIN likes ON friend.student_id = likes.student_id                          WHERE likes.liked_id NOT IN                              (SELECT friend_id                               FROM friend                               JOIN likes ON friend.
SELECT breed_code,        size_code,        street,        city,        state,        zip_code,        email_address,        home_phone,        cell_number,        date_arrived,        date_adopted,        date_departed,        date_adopted,        date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Owners.state = "Texas"   AND Professionals.state = "Texas" 
SELECT DISTINCT OWNERS.state FROM Breeds JOIN CHARGES ON Breeds.breed_code = CHARGES.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatment_Types.owner_id JOIN PROFESSIONALS ON PROFESSIONALS.professional_id = Treatment_Types.professional_id WHERE OWNERS.state = "Texas"   AND Treatment_Types.treatment_type_code = "shampoo"   AND OWNERS.state = "California"   AND Treatment_Types.treatment_type_code = "painkillers"   AND OWNERS.state = "New York"   AND Treatment_Types.treatment_type
SELECT avg(Dogs.age) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.size_description = "Small"   AND Treatment_Types.treatment_type_code = "Soft-food" GROUP BY Breeds.breed_code 
SELECT avg(Dogs.age) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.size_description = "Small"   AND Treatments.date_of_treatment >= "2015-01-01"   AND Treatments.date_of_treatment <= "2015-12-31"   AND Professionals.first_name = "Jessica"  
SELECT Professionals.professional_id,        Professionals.last_name,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Sizes.street = "Indiana"   AND Treatments.date_of_treatment > "2018-06-25 00:00:00"   AND Treatments.date_of_treatment < "2018-07-25 00:00:0
SELECT Breeds.breed_name,        Breeds.breed_name,        Professionals.last_name,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Sizes.size_description = "Small"   AND Treatments.treatment_type_code = "Soft-top"   AND Treatments.date_of_treatment > "2015-01-01"   AND Treatments.date_of_treatment < "2015-02-01"   AND Professionals
;
SELECT Dogs.name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Owners.owner_id = Treatment_Types.owner_id JOIN Professionals ON Professionals.professional_id = Treatment_Types.professional_id WHERE Owners.first_name = "Jane"   AND Owners.last_name = "Doe"   AND Owners.street = "Main St."   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = "94107"   AND Treatment_Types.cost_of_treatment > 1000 
SELECT Breeds.breed_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Breeds.breed_name NOT IN     (SELECT Breeds.breed_name      FROM Breeds      JOIN Charges ON Breeds.breed_code = Charges.charge_code      JOIN Sizes ON Charges.size_code = Sizes.size_code      JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code      JOIN Owners ON Treatment_
SELECT Breeds.breed_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Breeds.breed_name NOT IN     (SELECT Breeds.breed_name      FROM Breeds      JOIN Charges ON Breeds.breed_code = Charges.charge_code      JOIN Sizes ON Charges.size_code = Sizes.size_code      JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code      JOIN Owners ON Treatment_
SELECT DISTINCT Professionals.professional_id,                 Professionals.role,                 Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount = 0   AND Sizes.street = "100"   AND Treatments.treatment_type_code = "Shampoo"   AND Professionals.email_address = "" 
SELECT DISTINCT Professionals.professional_id,                 Professionals.role_code,                 Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Treatment_Types.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount = 0   AND Sizes.street = "1000"   AND Treatment_Types.treatment_type_code = "none"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND
SELECT Owners.owner_id,        Owners.first_name,        Owners.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Owners ON Professionals.professional_id = Owners.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_type = "Cleaning"   AND Sizes.size_description = "Small"   AND Treatments.treatment_type_code = "Cleaning" GROUP BY Owners.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT OWNERS.owner_id,        OWNERS.first_name,        OWNERS.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN OWNERS ON Treatments.owner_id = OWNERS.owner_id WHERE Breeds.breed_name = "Shar-Pei" GROUP BY OWNERS.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT Treatment_Types.treatment_type_code,        Treatment_Types.first_name,        Professionals.first_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Owners.owner_id = Treatment_Types.owner_id JOIN Professionals ON Professionals.professional_id = Owners.owner_id GROUP BY Treatment_Types.treatment_type_code HAVING count(*) >= 2 
SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name,        Professionals.street,        Professionals.city,        Professionals.state,        Professionals.zip_code,        Professionals.last_name,        Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Owners.owner_id = Treatment_Types.owner_id JOIN Professionals ON Professionals.professional_id = Owners.owner_id WHERE Breeds.breed_code = "Shar-Pei"   AND
SELECT breeds.breed_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatments ON treatments.dog_id = charges.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id JOIN charges ON dogs.dog_id = charges.dog_id JOIN sizes ON charges.size_code = sizes.size_code JOIN treatments ON treatments.treatment_type_code = treatments.treatment_type_code WHERE breeds.breed_name =     (SELECT breeds.breed_name      FROM breeds      JOIN charges ON breeds.breed_code = charges.charge_code      JOIN sizes ON breeds.size_code = sizes.size_code      JOIN treatments ON treatments.dog_id = charges.dog_id      JOIN professionals ON treatments.
SELECT Breeds.breed_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Treatment_Types.treatment_type_code = "Shampoo" GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
SELECT Owners.owner_id,        Owners.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id WHERE Treatment_Types.treatment_type_code = "Treatment" GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1 
SELECT OWNERS.owner_id,        OWNERS.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatment_Types.owner_id WHERE Breeds.breed_name = "Shih Tzu" GROUP BY OWNERS.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1 
SELECT Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount =     (SELECT min(charges.charge_amount)      FROM charges      JOIN sizes ON charges.size_code = sizes.size_code      JOIN treatments ON treatments.treatment_type_code = charges.treatment_type_code      JOIN owners ON treatments.owner_id = owners.owner_id      JOIN professionals ON treatments
SELECT Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount =     (SELECT min(charges.charge_amount)      FROM charges      JOIN sizes ON charges.size_code = sizes.size_code      JOIN treatments ON treatments.treatment_type_code = charges.treatment_type_code      JOIN owners ON treatments.owner_id = owners.owner_id      JOIN professionals ON treatments
SELECT OWNERS.owner_id,        OWNERS.zip_code FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN OWNERS ON Professionals.professional_id = OWNERS.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_type = "food"   AND Sizes.size_description = "small"   AND Treatments.treatment_type_code = "food"   AND Professionals.first_name = "Jessica"   AND Professionals.last_name = "Hoover"   AND Professionals.city = "San Jose"   AND
SELECT OWNERS.owner_id,        OWNERS.zip_code FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatment_Types.owner_id JOIN Dogs ON OWNERS.owner_id = Dogs.owner_id WHERE Treatment_Types.treatment_type_code = "Treatment" GROUP BY OWNERS.owner_id ORDER BY sum(Treatment_Types.cost_of_treatment) LIMIT 1 
SELECT Professionals.professional_id,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
SELECT Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.email_address,          Professionals.home_phone,          Professionals.cell_number HAVING count(*) >= 2 
SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment <     (SELECT avg(cost_of_treatment)      FROM Treatments) 
SELECT Treatments.date_of_treatment,        Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_code = "Soft-top"   AND Owners.city = "Seattle"   AND Professionals.state = "WA
SELECT Treatments.date_of_treatment,        Professionals.first_name,        Treatments.treatment_type_code FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_code = "Soft-top"   AND Owners.city = "Seattle"   AND Professionals.
SELECT Treatments.treatment_type_code,        Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.charge_type = Sizes.charge_type JOIN Treatments ON Treatments.treatment_type_code = Charges.charge_type JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Sizes.size_description = "Small"   AND Treatments.date_of_birth = "1999-01-01"   AND Treatments.date_arrived = "2000-01-01"   AND Treatments.date
SELECT Treatments.treatment_type_code,        Treatments.cost_of_treatment,        Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.city = "Seattle"   AND Treatment_Types.state = "WA"   AND Treatment_Types
SELECT Breeds.breed_name,        Breeds.breed_name,        Sizes.size_description,        Owners.first_name,        Owners.last_name,        Dogs.age,        Dogs.date_arrived,        Dogs.date_adopted,        Dogs.date_departed,        Professionals.first_name,        Professionals.last_name,        Treatments.treatment_type_code,        Treatments.date_of_treatment,        Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id AND Treatments.professional_id = Professionals.professional_id AND Treatments.treatment_type_code = Treat
SELECT Breeds.breed_name,        Breeds.breed_name,        Sizes.size_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.charge_code = Sizes.charge_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Owners ON Professionals.professional_id = Owners.owner_id WHERE Breeds.breed_name = "Labrador"   AND Sizes.size_description = "Small"   AND Treatments.treatment_type_code = "Soft-food"   AND Owners.first_name = "Jenny"   AND Owners.last_name = "Hansen"   AND Owners.street = "1234 Main St."   AND Owners.city = "
SELECT OWNERS.first_name,        DOGS.name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = DOGS.dog_id JOIN OWNERS ON DOGS.owner_id = OWNERS.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatments ON Treatments.treatment_id = Treatments.treatment_id WHERE Breeds.breed_name = "Shar-Pei"   AND Sizes.size_description = "Small"   AND Treatments.treatment_type_code = "Soft-top"   AND OWNERS.first_name = "Jane"   AND OWNERS.last_name = "Doe"   AND Professionals.first_name
SELECT OWNERS.first_name,        DOGS.name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatment_Types.owner_id JOIN DOGS ON DOGS.dog_id = Treatment_Types.dog_id WHERE Treatment_Types.treatment_type_code = "Abandoned"   AND Treatment_Types.date_arrived > "2015-01-01"   AND Treatment_Types.date_departed < "2015-01-01"   AND Treatment_Types.date_of_treatment > "2015-01-01"  
SELECT Dogs.name,        Treatments.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Rare" GROUP BY Treatments.date_of_treatment ORDER BY Treatments.date_of_treatment 
SELECT Dogs.name,        Treatments.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Rare" GROUP BY Treatments.dog_id ORDER BY Treatments.date_of_treatment 
SELECT Breeds.breed_name,        Dogs.name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Owners.city = "Virginia"   AND Owners.state = "VA"   AND Owners.zip_code = 222   AND Treatments.date_of_treatment >= "2018-01-01"   AND Treatments.date_of_treatment <= "2018-12-31"   AND Treatments.cost_of_treatment >= 10
SELECT OWNERS.first_name,        DOGS.name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatments.owner_id JOIN DOGS ON DOGS.dog_id = Treatments.dog_id WHERE OWNERS.state = "Virginia"   AND Sizes.city = "Virginia Beach"   AND Treatments.date_of_birth > "2000-01-01"   AND Treatments.date_arrived > "2000-01-01"   AND Treatments.date_departed > "2000-01-01"   AND Treatments.cost
SELECT Dogs.date_arrived,        Dogs.date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Sharpey"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.date_of_treatment > "2015-01-01"   AND Treatments.date_of_treatment < "2015-02-01"   AND Professionals.first_name
SELECT Dogs.date_arrived,        Dogs.date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Sharpey"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.treatment_type_code = "Soft-core"   AND Owners.first_name = "Kathy"   AND Owners.last_name = "Homenick"   AND Professionals.first_name =
SELECT OWNERS.first_name,        OWNERS.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = OWNERS.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Breeds.breed_name = "Shih Tzu"   AND Charges.charge_amount = 100   AND Sizes.size_description = "Small"   AND Treatments.date_of_treatment =     (SELECT min(date_of_treatment)      FROM Treatments      WHERE treatments.treatment_type_code = Treatment_Types.treatment_type_code        AND treat
SELECT Owners.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id WHERE Treatment_Types.treatment_type_code = "Treatment"   AND Charges.charge_amount = 0   AND Charges.charge_description = "Treatment"   AND Treatment_Types.date_arrived > "2016-01-01"   AND Treatment_Types.date_departed < "2016-01-01"   AND Owners.state = "CA"   AND Owners.city = "San Francisco"   AND Owners.
SELECT Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id WHERE Breeds.breed_name = "Hawaiian Dog"   OR Breeds.breed_name = "Wisconsin Dog"   OR Sizes.size_description = "Small"   OR Treatments.treatment_type_code = "Soft-food"   OR Treatments.treatment_type_code = "Hydration"   OR Professionals.state = "Hawaii"   OR Professionals.state = "Wisconsin"  
SELECT Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id WHERE Breeds.breed_name = "Hawaiian Dog"   OR Breeds.breed_name = "Wisconsin Dog"   OR Sizes.size_description = "Small"   OR Treatment_Types.treatment_type_description = "Soft-food"   OR Owners.state = "Hawaii"   OR Owners.state = "Wisconsin"   OR Professionals.professional_id = 1 
SELECT DISTINCT Breeds.breed_name,                 Breeds.breed_name,                 Treatments.date_of_treatment,                 Treatments.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Labrador"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_
SELECT Dogs.date_arrived,        Dogs.date_departed FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Sharpey"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.date_of_birth > "2000-01-01"   AND Treatments.date_of_treatment < "2000-01-01"   AND Professionals.first_name =
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_code = "Soft-Ped"   AND Owners.city = "Seattle"   AND Professionals.city = "Seattle"   AND Professionals.state = "WA"   AND Professionals.zip_code
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Labrador"   AND Charges.charge_amount > 0   AND Sizes.size_description = "Small"   AND Treatment_Types.treatment_type_description = "Soft-food"   AND Owners.first_name = "Jenny"   AND Owners.last_name = "Hansen"  
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_code = "Soft-Ped"   AND Owners.city = "Seattle"   AND Professionals.city = "Seattle"   AND Professionals.state = "WA"   AND Professionals.zip_code = "
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_code = "Soft-Ped"   AND Owners.street = "10th Ave"   AND Professionals.first_name = "Jenny"   AND Professionals.last_name = "Hansen" 
SELECT Breeds.breed_name,        Breeds.breed_name,        Breeds.street,        Breeds.city,        Breeds.state,        Breeds.zip_code,        Breeds.email_address,        Breeds.home_phone,        Breeds.cell_number,        Professionals.role_code,        Professionals.first_name,        Professionals.street,        Professionals.city,        Professionals.state,        Professionals.zip_code,        Professionals.last_name,        Treatments.date_of_treatment,        Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Charges.treatment_type_code JOIN Professionals ON Tre
SELECT professionals.role,        professionals.street,        professionals.city,        professionals.state,        professionals.zip_code,        professionals.email_address,        professionals.home_phone,        professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name LIKE "%West%"   AND Sizes.street LIKE "%West%"   AND Treatments.treatment_type_code = "Treatment"   AND Professionals.zip_code LIKE "%West%"   AND Professionals.city = "San Francisco"   AND Professionals.state = "CA"   AND Professionals.email_address = "professional
SELECT Breeds.breed_name,        Breeds.breed_name,        Professionals.email_address,        Professionals.first_name,        Professionals.last_name,        Treatments.date_of_treatment,        Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id WHERE Breeds.breed_name LIKE '%North%'   AND Owners.state LIKE '%North%'; 
SELECT OWNERS.first_name,        OWNERS.last_name,        OWNERS.email_address,        OWNERS.home_phone,        OWNERS.cell_number,        Dogs.date_arrived,        Dogs.date_departed,        Dogs.date_adopted,        Dogs.date_birth FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code JOIN OWNERS ON OWNERS.owner_id = Treatment_Types.owner_id WHERE Sizes.street LIKE "%North%"   AND Treatment_Types.city = "San Francisco"   AND Treatment_Types.state = "CA"   AND Treatment_Types
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age < 10 GROUP BY Breeds.breed_name HAVING count(*) = 0 
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age < 10 GROUP BY Breeds.breed_name HAVING count(*) 
SELECT Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount >     (SELECT min(charges.charge_amount)      FROM Breeds      JOIN Charges ON Breeds.breed_code = Charges.charge_code      JOIN Sizes ON Charges.size_code = Sizes.size_code      JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment
SELECT Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatment_Types.treatment_type_description = "Hydrotherapy" ORDER BY Treatments.date_of_treatment DESC LIMIT 1 
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Treatment_Types.treatment_type_code = "No Treatment"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Treatment_Types.date_arrived > "2015-01-01"   AND Treatment_Types.date_departed < "2015-01-01"   AND Treatment_Types.cost_of_treatment > 0 
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Treatment_Types.treatment_type_code = "No Treatment"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Treatment_Types.date_arrived > "2018-01-01"   AND Treatment_Types.date_departed < "2018-01-01"   AND Treatment_Types.cost_of_treatment > 0 
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id WHERE Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = "94110"   AND Treatment_Types.treatment_type_code = "Abandoned"   AND Treatment_Types.treatment_type_code = "Size"   AND Treatment_Types.treatment_type_code = "Weight"   AND Treatment_Types.treatment_type_code = "Date of Birth"   AND Treatment_Types.treatment_type
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id WHERE Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = "94110"   AND Treatment_Types.treatment_type_code = "Shampoo"   AND Treatment_Types.treatment_type_code = "Pet Groom"   AND Treatment_Types.treatment_type_code = "Pet Food"   AND Treatment_Types.treatment_type_code = "Pet Vaccine"   AND Treatment_
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount = 0   AND Sizes.size_description = "Small"   AND Treatment_Types.treatment_type_description = "Hydrotherapy"   AND Owners.street = "1234 Main St."   AND Professionals.first_name = "Jane"   AND Professionals.last_name = "Doe"   AND
SELECT count(*) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount = 0   AND Sizes.size_description = "Small"   AND Treatment_Types.treatment_type_description = "Hydrotherapy"   AND Owners.street = "1234 Main St."   AND Professionals.city = "San Francisco"   AND Professionals.state = "CA"   AND Professionals.zip
SELECT Dogs.name,        Dogs.age,        Dogs.weight FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "1"   AND Charges.charge_type = "Abandoned"   AND Sizes.size_description = "1"   AND Treatments.treatment_type_code = "1"   AND Professionals.professional_id = 1 
SELECT Dogs.name,        Dogs.age,        Dogs.weight FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "1"   AND Charges.charge_amount > 0   AND Sizes.size_description = "1"   AND Treatments.treatment_type_code = "1"   AND Professionals.professional_id = 1 
SELECT avg(Dogs.age) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatment_Types.owner_id = Owners.owner_id JOIN Professionals ON Treatment_Types.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.size_description = "Small"   AND Treatment_Types.treatment_type_description = "Soft-food" GROUP BY Breeds.breed_code 
SELECT avg(Dogs.age) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.size_description = "Small"   AND Treatments.date_of_birth > "2000-01-01"   AND Treatments.date_arrived > "2000-01-01"   AND Treatments.date_departed > "2000-01
SELECT dogs.age FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id JOIN charges ON charges.charge_code = treatments.charge_type_code JOIN sizes ON charges.size_code = sizes.size_code WHERE breeds.breed_name = "Shar-Pei"   AND sizes.size_description = "Small"   AND treatments.treatment_type_code = "Soft-top"   AND treatments.date_of_treatment = "2015-01-01"   AND treatments.cost_of_treatment = 100.00 ORDER BY dogs.age DESC LIMIT 1 
SELECT dogs.age FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON dogs.dog_id = treatments.dog_id JOIN charges ON charges.charge_code = treatments.charge_type_code JOIN sizes ON charges.size_code = sizes.size_code WHERE breeds.breed_name = "Shar-Pei"   AND sizes.size_description = "Small"   AND treatments.treatment_type_code = "Soft-top"   AND treatments.date_of_treatment = "2015-08-25 19:00:00"   AND treatments.cost_of_treatment = 120.00 ORDER BY dogs.age DESC LI
SELECT Treatment_Types.treatment_type_code,        Treatment_Types.treatment_type_description,        Treatments.cost_of_treatment,        Treatments.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Treatments.owner_id JOIN Professionals ON Professionals.professional_id = Treatments.professional_id WHERE Breeds.first_name = "Kayla"   AND Breeds.last_name = "Hoover"   AND Sizes.street = "10th Ave"   AND Sizes.city = "Seattle"   AND Sizes.state = "WA
SELECT charge_type,        charge_amount FROM charges UNION SELECT treatment_types.treatment_type_code,        treatment_types.treatment_type_description FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatments ON treatments.treatment_id = treatments.id JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE professionals.first_name = "Sophie"   AND professionals.last_name = "Hall"   AND professionals.state = "NY"   AND professionals.zip_code = "10027"   AND dogs.city = "New York City" 
SELECT Treatments.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount = 1000   AND Sizes.street = "100"   AND Treatment_Types.treatment_type_description = "Hydrotherapy" ORDER BY Treatments.cost_of_treatment DESC LIMIT 1 
SELECT charge_amount FROM charges WHERE charge_type = "Treatment" ORDER BY charge_amount DESC LIMIT 1 
SELECT Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.date_of_birth = "1990-01-01"   AND Treatments.date_arrived = "2010-01-01" 
SELECT Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatments ON Treatments.treatment_type_code = Treatments.treatment_type_code JOIN Owners ON Treatments.owner_id = Owners.owner_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.date_of_birth = "1990-01-01"   AND Treatments.date_arrived = "2010-01-01"   AND Tre
SELECT Breeds.breed_name,        Breeds.breed_name,        Sizes.size_description,        Treatment_Types.treatment_type_code,        Treatment_Types.treatment_type_code,        Owners.first_name,        Owners.last_name,        Owners.street,        Owners.city,        Owners.state,        Owners.zip_code,        Owners.email_address,        Owners.home_phone,        Owners.cell_number,        Dogs.age,        Dogs.date_arrived,        Dogs.date_adopted,        Dogs.date_departed FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Breeds.breed_code JOIN Owners ON Owners.owner_
SELECT Breeds.breed_name,        Sizes.size_description,        Treatment_Types.treatment_type_code FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Charges.treatment_type_code WHERE Breeds.owner_id = 1   AND Treatment_Types.treatment_type_code = "Shampoo" GROUP BY Breeds.breed_name,          Sizes.size_description,          Treatment_Types.treatment_type_code 
SELECT Breeds.breed_name,        Treatments.treatment_type_description,        Professionals.first_name,        Professionals.last_name,        Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number,        Treatments.cost_of_treatment,        Treatments.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_type = "Cash"   AND Sizes.street = "10th Ave"   AND Treatments.treatment_type_
SELECT Breeds.breed_name,        Treatments.treatment_type_description,        Professionals.first_name,        Professionals.last_name,        Professionals.email_address,        Professionals.home_phone,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Breeds.breed_name = "Shar-Pei"   AND Charges.charge_amount > 0   AND Sizes.street = "10th Ave"   AND Treatments.treatment_type_code = "Bath"   AND Professionals.first_name = "Jenny"   AND Professionals.last
SELECT count(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
SELECT count(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions 
SELECT singer.name,        singer.citizenship FROM singer JOIN song ON singer.singer_id = song.singer_id 
SELECT singer.Birth_Year,        singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship!= "France" 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship!= 'French' 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Birth_Year = 1948   OR song.Birth_Year = 1949 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Birth_Year = 1948   OR song.Birth_Year = 1949 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions DESC LIMIT 1 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions DESC LIMIT 1 
SELECT singer.Citizenship,        COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
SELECT singer.citizenship,        COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.citizenship 
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1 
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1 
SELECT singer.Citizenship,        singer.Net_Worth_Millions,        max(singer.Net_Worth_Millions) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
SELECT singer.citizenship,        singer.name,        singer.birth_year,        max(singer.net_worth_millions) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.citizenship 
SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY song.Sales,          song.Highest_Position 
SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY song.Sales,          song.Highest_Position 
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000   AND song.Highest_Position > 100 
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000   AND song.Highest_Position > 1 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*) > 1 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*) > 1 
SELECT singer.Name,        song.Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID 
SELECT singer.Name,        SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name 
SELECT name FROM singer WHERE singer_id NOT IN     (SELECT singer_id      FROM song) 
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE singer.singer_id NOT IN     (SELECT singer_id      FROM singer      JOIN song ON singer.singer_id = song.singer_id      WHERE song.highest_position = "Top 40") 
SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year < 1945   OR singer.Birth_Year > 1955 
SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year < 1945   OR singer.Birth_Year > 1955 
SELECT count(*) FROM Ref_feature_types JOIN Ref_property_types ON Ref_property_types.property_type_code = Ref_feature_types.feature_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Ref_property_types.property_type_code JOIN Properties ON Other_Available_Features.property_id = Properties.property_id JOIN Other_Property_Features ON Other_Property_Features.property_id = Properties.property_id WHERE Ref_property_types.feature_type_description = "Available Features" 
SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.feature_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Ref_Property_Types.feature_type_code JOIN Properties ON Other_Available_Features.property_id = Properties.property_id JOIN Other_Property_Features ON Other_Property_Features.property_id = Properties.property_id WHERE Ref_Property_Types.property_type_code = "AirCon"   AND Ref_Property_Types.property_type_description = "Room"   AND Other_Available_Features.feature_feature_description = "AirConditioner"   AND Properties.date_on_market = "2015-08-25"   AND Properties.date_sold = "2015-09-01"   AND Properties.property_name = "AirCon" 
SELECT Ref_Property_Types.property_type_description FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.feature_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Ref_Property_Types.feature_type_code JOIN Properties ON Other_Available_Features.property_id = Properties.property_id WHERE Ref_Property_Types.feature_type_code = "Ref_Feature_Types.feature_type_code"   AND Ref_Property_Types.feature_type_description = "Ref_Property_Types.feature_type_description"   AND Other_Available_Features.feature_id = "Properties.property_id"   AND Properties.property_id = "Properties.property_id" 
SELECT Other_Available_Features.property_name FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.feature_type_code JOIN Other_Available_Features ON Ref_Property_Types.property_type_code = Other_Available_Features.feature_type_code WHERE Ref_Property_Types.property_type_description = "Houses"   OR Ref_Property_Types.property_type_description = "Apartments"   AND Other_Available_Features.property_feature_description = "more than 1 room" 
