 SELECT COUNT (DISTINCT singer.Name) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Is_male = "TRUE" ORDER BY singer.Name LIMIT 10; 
 SELECT COUNT (DISTINCT singer.Name) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Is_male = "FALSE" ORDER BY singer.Name LIMIT 1; 
 SELECT singer.Name,        singer.Country,        singer.Age FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID ORDER BY singer.Age DESC 
 SELECT singer.Name,        singer.Country,        singer.Age FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID ORDER BY singer.Age DESC 
 SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Country = "France"   AND singer.Is_male = "TRUE" 
 SELECT avg(singer.age),        min(singer.age),        max(singer.age) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer.Country = "France"   AND singer.Is_male = "TRUE"   AND singer.Name!= "Nina" 
 SELECT concert.concert_name,        singer.song_release_year FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id ORDER BY singer.age LIMIT 1 
 SELECT singer.song_name,        singer.song_release_year FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age =     (SELECT min(age)      FROM singer      WHERE Is_male = "true") ORDER BY singer.song_name 
 SELECT DISTINCT singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID WHERE singer.Age > 20 
 SELECT DISTINCT singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID WHERE singer.Age > 20   AND stadium.Highest > singer.Highest   AND stadium.Lowest < singer.Lowest 
 SELECT singer.Country,        COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Country 
 SELECT COUNT(*),        singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Country 
 SELECT singer.song_name FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > (SELECT avg(age)                     FROM singer) ORDER BY singer.song_name 
 SELECT concert.concert_name FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > 40 
 SELECT stadium.Location,        stadium.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE stadium.Capacity BETWEEN 5000 AND 10000 
 SELECT stadium.Location,        stadium.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE stadium.Capacity BETWEEN 5000 AND 10000 
 SELECT avg(stadium.capacity),        max(stadium.Highest) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID 
 SELECT avg(stadium.capacity),        max(stadium.Highest) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID 
 SELECT stadium.name,        stadium.capacity FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > 30   AND singer.is_male ORDER BY avg(singer.average) DESC LIMIT 1 
 SELECT stadium.name,        stadium.capacity FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer.age > 30   AND singer.is_male ORDER BY avg(singer.average) DESC LIMIT 1 
 SELECT COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.year = 2014   OR concert.year = 2015   AND stadium.Highest > singer.Highest   AND stadium.Lowest < singer.Lowest   AND stadium.Average > singer.Average 
 SELECT COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year = 2014   OR concert.Year = 2015   AND stadium.Highest > singer.Highest   AND stadium.Lowest < singer.Lowest 
 SELECT stadium.Name,        count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY stadium.Name 
 SELECT count(*),        stadium.location FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY stadium.location 
 SELECT stadium.Name,        stadium.Capacity FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT stadium.Name,        stadium.Capacity FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year > 2013 GROUP BY concert.concert_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT concert.year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.year ORDER BY count(*) DESC LIMIT 1 
 SELECT concert.year FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.year ORDER BY count(*) DESC LIMIT 1 
 SELECT name FROM stadium WHERE LOCATION NOT IN     (SELECT stadium.location      FROM concert      JOIN singer_in_concert ON concert.concert_id      JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID      WHERE singer.song_name = "Song_Name" AND singer.song_release_year = "Song_release_year")   AND capacity > 5000   AND highest > 5000   AND lowest < 5000   AND average > 5000 
 SELECT name FROM stadium WHERE capacity < 5000   AND lowest < 100   AND average < 1000 
 SELECT singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID WHERE singer.Age > 40 INTERSECT   SELECT singer.Country   FROM stadium   JOIN singer ON stadium.Stadium_ID = singer.Singer_ID WHERE singer.Age < 30 
 SELECT stadium.Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 
 SELECT name FROM stadium WHERE location!= 'London'   AND highest > 2014   AND lowest < 2014 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name 
 SELECT concert.concert_name,        concert.theme,        count(*) FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name 
 SELECT singer.Name,        COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Stadium_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name ORDER BY COUNT(*) DESC LIMIT 10; 
 SELECT singer.Name,        COUNT(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name ORDER BY COUNT(*) DESC LIMIT 10; 
 SELECT DISTINCT concert.concert_name FROM stadium JOIN singer ON stadium.stadium_id = singer.singer_id JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014   AND singer.age > 30   AND singer.is_male 
 SELECT singer.Name FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014   AND concert.Theme = "Music Festival"   AND singer.Is_male = "TRUE" 
 SELECT singer.Name,        singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE singer_in_concert.Singer_ID = singer.Singer_ID   AND concert.Theme = "Music Festival"   AND singer.Song_Name LIKE "%Hey%" 
 SELECT singer.Name,        singer.Country FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID WHERE singer.song_name LIKE "%Hey%" ORDER BY singer.song_release_year DESC 
 SELECT stadium.Name,        stadium.Location FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.year = 2014 INTERSECT   SELECT stadium.Name,          stadium.Location   FROM stadium   JOIN singer ON stadium.Stadium_ID = singer.Singer_ID   JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID   JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.year = 2015 
 SELECT stadium.Name,        stadium.Location FROM stadium JOIN singer_in_concert ON stadium.Stadium_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014 INTERSECT   SELECT stadium.Name,          stadium.Location   FROM stadium   JOIN singer_in_concert ON stadium.Stadium_ID = singer_in_concert.Singer_ID   JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2015 
 SELECT count(*) FROM stadium JOIN singer ON stadium.Stadium_ID = singer.Singer_ID JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE stadium.Highest INT =     (SELECT max(Highest)      FROM stadium) 
 SELECT count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity =     (SELECT max(capacity)      FROM stadium) ORDER BY stadium.Highest DESC LIMIT 1 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.weight > 10   AND Student.sex = "M"   AND Student.major = 1   AND Student.city_code = "LOS"   AND Student.age >= 18 
 SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10   AND student.sex = 'M'   AND student.major = 1   AND student.city_code = "LOS"   AND student.age > 20; 
 SELECT Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age =     (SELECT min(age)      FROM Student      WHERE sex = "F")   AND Pets.pet_type = "dog" ORDER BY Pets.pet_age DESC LIMIT 1; 
 SELECT pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age =     (SELECT min(age)      FROM student      WHERE sex = "F")   AND pets.pettype = "dog" ORDER BY pets.petage DESC LIMIT 1; 
 SELECT max(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype 
 SELECT max(pets.weight),        pets.pet_type FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pet_type 
 SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20   AND student.sex = 'F'   AND pets.weight > 50   AND pets.pettype = 'Pet' 
 SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20   AND student.sex = 'F'   AND student.major = 1   AND student.city_code = 'LOS'   AND pets.pettype = 'Pet'   AND pets.weight > 50 
 SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = "F"   AND pets.pettype = "dog"   AND student.major = "BIS"   AND student.city_code = "LOS"   AND student.age >= 18 
 SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Student.sex = "F"   AND Pets.pet_type = "dog"   AND Pets.weight > 20   AND Student.major = "Computer Science"   AND Student.city_code = "LOS"   AND Student.age > 20 
 SELECT count(DISTINCT Pets.pettype) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.petid = Pets.petid WHERE Student.age >= 18   AND Student.sex = "F"   AND Student.city_code = "LOS" 
 SELECT count(DISTINCT Pets.pet_type) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.sex = "M"   AND Student.age > 20   AND Student.city_code = "NYC" 
 SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "Cat"   OR Pets.pet_type = "Dog" 
 SELECT Student.Fname,        Student.Lname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.petType = "Cat"   OR Pets.petType = "Dog" 
 SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.petType = "Cat" INTERSECT   SELECT Student.Fname   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.petType = "Dog" 
 SELECT Student.fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.pet_type = "Cat" INTERSECT   SELECT Student.fname   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.pet_type = "Dog" 
 SELECT major,        age FROM Student WHERE sex = 'F'   AND city_code = 'LOS' EXCEPT SELECT major,        age FROM Student WHERE sex = 'M'   AND city_code = 'LOS'   AND Pets.pet_type = 'Cat' 
 SELECT major,        student.age FROM student WHERE sex = 'F'   AND has_pet.stuid NOT IN     (SELECT has_pet.stuid      FROM has_pet      JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat') 
 SELECT StuID FROM Student WHERE Sex = 'F'   AND Major!= 100   AND city_code!= 'LOS'   AND age > 20   AND pet_age > 10   AND pet_weight > 20 
 SELECT StuID FROM Student WHERE Sex = 'F'   AND Major!= 100   AND city_code!= 'LOS'   AND age > 20   AND NOT Has_Pet.StuID   AND Pets.pet_type!= 'Cat'   AND Pets.weight > 50 
 SELECT Student.fname,        Student.age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "Dog"   AND Pets.weight > 50   AND Student.sex = "M"   AND Student.city_code = "NYC" 
 SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "dog"   AND Pets.weight > 50   AND Student.sex = "male"   AND Student.city_code = "NYC"   AND Student.major!= "Art"   AND Student.advisor!= "null" 
 SELECT Pets.pettype,        Pets.pet_age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.petid = Pets.petid WHERE Student.age =     (SELECT min(age)      FROM Student) 
 SELECT Pets.pettype,        Pets.pet_age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age =     (SELECT min(age)      FROM Student) 
 SELECT pets.petid,        pets.pettype,        pets.weight FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 1 
 SELECT Has_Pet.StuID,        Pets.pet_age,        Pets.weight FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.age > 1 
 SELECT avg(pets.pet_age),        max(pets.weight),        pets.pettype FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pettype 
 SELECT Pets.pet_type,        avg(Pets.pet_age),        max(Pets.pet_age) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.pet_id = Pets.pet_id GROUP BY Pets.pet_type 
 SELECT Pets.pettype,        avg(Pets.weight) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.petid = Pets.petid GROUP BY Pets.pettype 
 SELECT Pets.pettype,        avg(Pets.weight) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.petid = Pets.petid GROUP BY Pets.pettype 
 SELECT Student.Fname,        Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "Pet"   AND Pets.weight > 50   AND Student.sex = "M"   AND Student.city_code = "NYC" 
 SELECT DISTINCT Student.Fname,                 Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Pets.pet_type = "Pet"   AND Pets.weight > 50   AND Student.sex = "M"   AND Student.city_code = "NYC" 
 SELECT Has_Pet.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Student.Fname = 'Smith'   AND Student.Lname = 'Smith'   AND Pets.weight > 50   AND Pets.pet_age > 10   AND Student.sex = 'M'   AND Student.city_code = 'NYC' 
 SELECT Has_Pet.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID WHERE Student.Fname = "Smith"   AND Student.Lname = "Smith"   AND Student.sex = "M"   AND Pets.weight > 50   AND Pets.pet_age > 10   AND Student.city_code = "NYC" 
 SELECT count(*),        student.Fname,        student.Lname,        student.city_code FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'M' GROUP BY student.Fname,          student.Lname,          student.city_code 
 SELECT Has_Pet.StuID,        count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id GROUP BY Student.StuID 
 SELECT Student.Fname,        Student.sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID GROUP BY Student.Fname HAVING count(*) > 1 
 SELECT Student.Fname,        Student.sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.petID = Has_Pet.PetID GROUP BY Student.Fname HAVING count(*) > 1 
 SELECT Student.Fname,        Student.Lname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "Cat"   AND Pets.pet_age = 3   AND Student.sex = "M"   AND Student.city_code = "NYC" 
 SELECT Student.Fname,        Student.Lname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.pet_id = Has_Pet.pet_id WHERE Pets.pet_type = "Cat"   AND Pets.pet_age = 3 
 SELECT avg(pets.pet_age) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = "F"   AND student.major = "BIS"   AND student.city_code = "LOS" 
 SELECT avg(age) FROM student WHERE sex = 'F'   AND major!= 100   AND city_code!= 'LOS' 
 SELECT count(*) FROM continents 
 SELECT count(*) FROM continents 
 SELECT continents.Continent,        continents.Continent,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.Continent 
 SELECT continents.Continent,        countries.CountryName,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.Continent 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower JOIN cars_data ON cars_data.Id = car_names.Make WHERE cars_data.MPG > 60   AND cars_data.Weight > 1500   AND cars_data.Year > 2010   AND countries.Continent = "North America"; 
 SELECT count(*) FROM continents WHERE continent!= 'United States' 
 SELECT car_makers.FullName,        car_makers.Country,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower GROUP BY car_makers.FullName 
 SELECT car_makers.FullName,        car_makers.Country,        count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower GROUP BY car_makers.Id 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Model ORDER BY cars_data.Horsepower ASC LIMIT 1; 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Horsepower =     (SELECT min(Horsepower)      FROM cars_data) ORDER BY cars_data.MPG LIMIT 1; 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Weight < (SELECT avg(Weight)                          FROM car_names)   AND car_makers.Horsepower > 100   AND car_makers.Year > 2010 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Weight < (SELECT avg(Weight)                         FROM continents)   AND cars_data.MPG > (SELECT avg(MPG)                         FROM continents); 
 SELECT car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year = 1970   AND cars_data.MPG > 30 
 SELECT DISTINCT car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year = 1970 
 SELECT car_makers.FullName,        cars_data.Year FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower AND car_names.Weight = cars_data.Weight AND car_makers.Maker = car_names.Make AND car_makers.Country = countries.Country ORDER BY cars_data.Year ASC LIMIT 1; 
 SELECT car_makers.FullName,        cars_data.Year FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE cars_data.MPG = 'N/A' ORDER BY cars_data.Year ASC LIMIT 1; 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year > 1980 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year > 1980 
 SELECT continents.Continent,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country GROUP BY continents.Continent 
 SELECT continents.Continent,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country GROUP BY continents.Continent 
 SELECT countries.CountryName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Maker = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY countries.CountryName ORDER BY count(*) DESC LIMIT 1; 
 SELECT countries.CountryName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY countries.CountryName ORDER BY count(*) DESC LIMIT 1; 
 SELECT car_makers.FullName,        COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower GROUP BY car_makers.FullName 
 SELECT car_makers.Maker,        car_makers.FullName,        COUNT(*),        car_makers.Country FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_makers.Maker 
 SELECT cars_data.accelerate FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Make WHERE car_makers.FullName = "amc hornet sportabout (sw)"   AND car_makers.Country = "United Kingdom"   AND car_names.Make = "amc"; 
 SELECT cars_data.accelerate FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE car_names.Make = "amc"   AND car_names.Model = "hornet"   AND car_makers.FullName = "sportabout"   AND continents.Continent = "North America"; 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE countries.CountryName = "France"   AND continents.Continent = "Europe"; 
 SELECT COUNT (DISTINCT car_makers.FullName) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE continents.Continent = "France"   AND car_makers.Make = "care"; 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE countries.Continent = "USA"   AND cars_data.Year > 0; 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE countries.Country = "United States"   AND cars_data.Year > 0 
 SELECT avg(car_names.MPG) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE car_names.Cylinders = 4 
 SELECT avg(car_names.MPG) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE car_names.Cylinders = 4 GROUP BY car_names.Make 
 SELECT min(car_names.Weight) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Cylinders = 8   AND car_names.Horsepower > 0   AND car_names.Year = 1974 
 SELECT min(car_names.Weight) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Cylinders = 8   AND car_makers.FullName = "1974" 
 SELECT car_makers.FullName,        car_makers.Maker,        car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower JOIN cars_data ON cars_data.Id = cars_data.Cylinders JOIN cars_data ON cars_data.Year = cars_data.Year JOIN cars_data ON cars_data.Edispl = cars_data.Edispl JOIN cars_data ON cars_data.Weight = cars_data.Weight JOIN cars_data ON cars_data.MPG = cars_data.MPG JOIN cars_data ON cars_data.Horsepower = cars_data.Horsepower JOIN cars_data ON cars_data.Year = cars_data.Year JOIN cars_data ON cars_data.Edispl = cars_data.Edispl JOIN cars_data ON cars_data.Weight = cars_data.Weight JOIN cars_data ON cars_data.MPG = cars_data.MPG JOIN cars_data ON cars_data.Horsepower = cars_data.Horsepower JOIN cars_data ON cars_data.Year =
 SELECT car_makers.FullName,        car_makers.Maker,        car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower JOIN cars_data ON cars_data.Id = cars_data.Cylinders JOIN cars_data ON cars_data.Year = cars_data.Year JOIN cars_data ON cars_data.Edispl = cars_data.Edispl JOIN cars_data ON cars_data.Weight = cars_data.Weight JOIN cars_data ON cars_data.MPG = cars_data.MPG WHERE cars_data.Horsepower > 100   AND cars_data.Year > 2010   AND cars_data.MPG > 60   AND cars_data.Weight > 1500   AND cars_data.Cylinders > 4; 
 SELECT countries.CountryName,        car_makers.Country FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country GROUP BY car_makers.Country HAVING COUNT(*) >= 1 
 SELECT car_names.Model,        car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN car_names ON car_makers.Id = car_names.Maker JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year > 2010   AND cars_data.MPG > 30 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Make = car_makers.Make JOIN cars_data ON cars_data.Id = car_names.Horsepower > 150 WHERE cars_data.Year > 2010   AND cars_data.MPG > 30 
 SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Make = car_makers.Make JOIN cars_data ON cars_data.Id = car_names.Horsepower > 150 WHERE cars_data.Year > 2010   AND cars_data.Weight > 1500 
 SELECT cars_data.year,        avg(cars_data.weight) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON countries.country = car_makers.country JOIN model_list ON car_makers.maker = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower GROUP BY cars_data.year 
 SELECT cars_data.year,        cars_data.weight FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower AND car_names.Make = cars_data.Make AND car_makers.Maker = cars_data.Make GROUP BY cars_data.year 
 SELECT countries.CountryName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country WHERE continents.Continent = "Europe" GROUP BY car_makers.Maker HAVING COUNT(*) >= 3; 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE countries.Country = "Europe" GROUP BY car_names.Model HAVING count(*) >= 3 
 SELECT car_names.Horsepower,        car_names.Make FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower JOIN cars_data ON cars_data.Id = cars_data.Cylinders WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY cars_data.MPG DESC LIMIT 1; 
 SELECT car_names.Horsepower,        car_makers.Make FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE model_list.Cylinders = 3 GROUP BY car_names.Horsepower ORDER BY sum(car_names.Horsepower) DESC LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Model ORDER BY cars_data.MPG DESC LIMIT 1; 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.MPG =     (SELECT max(MPG)      FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT 1; 
 SELECT avg(horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(horsepower) FROM cars_data WHERE YEAR < 1980 
 SELECT avg(car_names.edispl) FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON countries.country = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.make = car_makers.make WHERE car_names.make = "volvo"   AND car_names.model = "volvo"   AND car_makers.country = "Sweden"; 
 SELECT avg(car_names.Horsepower) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Make WHERE car_names.Model = "volvo"   AND continents.Continent = "North America"; 
 SELECT car_names.Horsepower,        car_names.Year FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Horsepower,          car_names.Year ORDER BY car_names.Year DESC LIMIT 1; 
 SELECT max(car_names.Horsepower) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Cylinders 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Model ORDER BY count(*) DESC LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Model ORDER BY count(*) DESC LIMIT 1; 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Cylinders > 4   AND cars_data.MPG > 30   AND cars_data.Weight > 1500   AND cars_data.Year > 2010   AND car_makers.FullName IN     (SELECT FullName      FROM car_makers      WHERE Country = countries.CountryName); 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Cylinders > 4   AND cars_data.MPG > 30   AND cars_data.Weight > 1500   AND cars_data.Year > 2010   AND car_makers.FullName IN     (SELECT FullName      FROM car_makers      WHERE Country = countries.CountryName); 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Maker WHERE cars_data.Year = 1980   AND cars_data.MPG > 60   AND cars_data.Horsepower > 100   AND cars_data.Weight > 1500   AND cars_data.Accelerate > 10; 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Year = 1980   AND cars_data.MPG > 60   AND car_makers.FullName = "Toyota"   AND car_makers.Make = "Toyota"; 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Maker WHERE car_makers.FullName = "American Motor Company"   AND car_makers.Country = "United States"; 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Maker WHERE car_makers.FullName = "American Motor Company"   AND cars_data.Horsepower > 200   AND cars_data.Weight < 1500   AND cars_data.Year > 2010   AND cars_data.MPG > 30; 
 SELECT car_makers.FullName,        car_makers.CountryId FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower GROUP BY car_makers.FullName HAVING count(*) > 3 
 SELECT car_makers.FullName,        car_makers.Country FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_makers.FullName HAVING count(*) > 3 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.FullName = "General Motors"   OR car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom" UNION SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "United Kingdom" 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Maker WHERE car_makers.FullName = "General Motors"   OR cars_data.Weight > 3500 
 SELECT car_names.Year FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Weight >= 3000   AND cars_data.Weight <= 4000 
 SELECT car_names.year FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Weight < 4000 INTERSECT   SELECT car_names.year   FROM continents   JOIN countries ON continents.Continent = countries.Continent   JOIN car_makers ON car_makers.Country = countries.Country   JOIN model_list ON car_makers.Id = model_list.Maker   JOIN car_names ON model_list.Model = car_names.Model   JOIN cars_data ON car_names.Make = cars_data.Horsepower   WHERE cars_data.Weight > 3000 
 SELECT cars_data.Horsepower FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Make WHERE cars_data.Accelerate =     (SELECT max(Accelerate)      FROM cars_data) 
 SELECT cars_data.Horsepower FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Make WHERE cars_data.Accelerate =     (SELECT max(Accelerate)      FROM cars_data) 
 SELECT min(cars_data.cylinders) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE car_names.Make = "volvo"   AND car_names.FullName = "volvo" ORDER BY cars_data.Accelerate LIMIT 1; 
 SELECT min(cars_data.cylinders) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = car_makers.Maker WHERE car_names.Make = "Volvo"   AND car_names.Model = "Model Name" ORDER BY cars_data.Accelerate LIMIT 1; 
 SELECT count(*) FROM car_names JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT max(Horsepower)           FROM cars_data)) UNION SELECT count(*) FROM car_names JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Accelerate <     (SELECT min(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT min(Horsepower)           FROM cars_data)) 
 SELECT count(*) FROM car_names JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Accelerate >     (SELECT max(Accelerate)      FROM cars_data      WHERE Horsepower =          (SELECT max(Horsepower)           FROM cars_data)) 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.MPG > 60 GROUP BY car_makers.Maker HAVING COUNT(*) > 2; 
 SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.MPG > 60 GROUP BY continents.Continent HAVING COUNT(*) > 2; 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Cylinders > 6   AND cars_data.MPG > 6   AND cars_data.Weight > 1500   AND cars_data.Year > 2010   AND car_makers.FullName = "Toyota"   AND car_makers.Make = "Toyota"; 
 SELECT count(*) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Cylinders > 6   AND cars_data.MPG > 6   AND cars_data.Weight > 1500   AND cars_data.Year > 2010   AND cars_data.Accelerate > 6   AND cars_data.Edispl > 6   AND continents.Continent = "North America"   AND continents.Continent = "North America"; 
 SELECT car_names.Horsepower FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Cylinders = 4 GROUP BY car_names.Horsepower ORDER BY car_names.Horsepower DESC LIMIT 1 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Cylinders = 4 GROUP BY car_names.Model ORDER BY car_names.Horsepower DESC LIMIT 1 
 SELECT car_names.Make,        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Make HAVING cars_data.Horsepower > (SELECT min(Horsepower)                             FROM cars_data) UNION SELECT car_names.Make,        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_names.Make HAVING cars_data.Horsepower > (SELECT min(Horsepower)                             FROM cars_data) WHERE cars_data.Cylinders > 3 
 SELECT car_makers.Maker,        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.Horsepower < 500   AND cars_data.MPG < 30   AND cars_data.Weight < 1500   AND cars_data.Year < 2010   AND continents.Continent!= "North America"   AND continents.Continent!= "South America"   AND continents.Continent!= "Australia"   AND continents.Continent!= "Africa" 
 SELECT cars_data.MPG FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE car_makers.FullName = "Toyota"   AND car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "Australia"   OR car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "Australia"   OR car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "Australia"   OR car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "Australia"   OR car_makers.Country = "Canada"   OR car_makers.Country = "United Kingdom"   OR car_makers.Country = "Australia"   OR car_makers.Country = "
 SELECT max(cars_data.MPG) FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Horsepower = cars_data.Horsepower WHERE car_makers.FullName = "Toyota"   OR car_makers.FullName = "Ford"   OR cars_data.Year < 1980   OR cars_data.Weight > 15000 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country WHERE car_makers.Maker!= 'Ford Motor Company'   AND car_names.MPG < 3500 
 SELECT DISTINCT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Horsepower > 200   AND car_names.Weight < 3500   AND car_makers.Maker!= "Ford" 
 SELECT countries.countryname FROM continents JOIN countries ON continents.continent = countries.continent JOIN car_makers ON car_makers.country = countries.country WHERE car_makers.maker NOT IN     (SELECT car_makers.maker      FROM car_makers      JOIN model_list ON car_makers.maker = model_list.maker      WHERE model_list.model ='single') 
 SELECT car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Country = countries.Country WHERE car_makers.Maker = '' 
 SELECT car_makers.Id,        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_makers.Id HAVING count(*) >= 2 INTERSECT SELECT car_makers.Id,        car_makers.FullName FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON model_list.Model = cars_data.Model GROUP BY car_makers.Id HAVING count(*) >= 3 
 SELECT car_makers.Id,        car_makers.FullName,        car_makers.Country FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower GROUP BY car_makers.Id HAVING count(*) >= 2   AND count(*) >= 3 
 SELECT countries.countryid,        car_makers.Maker FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON countries.Country = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.Make = cars_data.Horsepower WHERE cars_data.MPG > 30   OR car_makers.Maker = 'Fiat' GROUP BY car_makers.Maker HAVING COUNT(*) > 3 
 SELECT countries.countryid,        car_makers.Maker,        car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Id = countries.CountryId JOIN model_list ON car_makers.Maker = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.FullName = "Fiat" GROUP BY car_makers.Maker HAVING count(*) > 3 UNION SELECT car_makers.Maker,        car_names.Model FROM continents JOIN countries ON continents.Continent = countries.Continent JOIN car_makers ON car_makers.Id = countries.CountryId JOIN model_list ON car_makers.Maker = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Horsepower > 200 
 SELECT airports.CountryAbbrev FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Abbreviation = flights.Airline WHERE airlines.Airline = "JetBlue Airways" 
 SELECT airports.CountryAbbrev FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = "Jetblue Airways" 
 SELECT airports.CountryAbbrev FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = flights.Aline WHERE airlines.Airline = "JetBlue Airways" 
 SELECT airports.CountryAbbrev FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airlines.Airline = "Jetblue"   AND airlines.Abbreviation = "Jetblue" 
 SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.Country = airports.Country JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = "USA" 
 SELECT airlines.Airline,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.Country = airports.Country WHERE airports.CountryAbbrev = "USA" 
 SELECT airports.AirportName,        airports.CountryAbbrev FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = "Anthony"   AND flights.SourceAirport = "Anthony"   AND flights.DestAirport = "Anthony" 
 SELECT airports.AirportName,        airports.CountryAbbrev FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = "Anthony" 
 SELECT count(*) FROM airlines WHERE Abbreviation NOT IN     (SELECT Abbreviation      FROM airports      WHERE Country = 'USA') 
 SELECT count(*) FROM airlines WHERE country = 'USA' UNION SELECT count(*) FROM airlines WHERE country = 'Canada' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON flights.sourceairport = airports.airportcode AND flights.destairport = airports.airportname 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON flights.sourceairport = airports.airportcode AND flights.destairport = airports.airportname WHERE airports.country = 'USA'   AND airports.countryabbrev = 'USA'; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportAbbrev WHERE airports.Country = 'USA'   AND airports.CountryAbbrev = 'USA'; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON airlines.aidnumber = flights.aidnumber WHERE airports.city = 'London'   AND airports.country = 'United Kingdom'   AND flights.destairport = 'London Heathrow'   AND flights.sourceairport = 'London Gatwick' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = 'USA'   AND airlines.Abbreviation = 'UAL' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = 'USA'   AND airlines.Abbreviation = 'UAL' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation WHERE airports.country = 'USA' 
 SELECT count(*) FROM airlines WHERE country = 'USA'   AND abbreviation NOT IN     (SELECT Abbreviation      FROM airports      WHERE country = 'USA')   AND country = 'USA' 
 SELECT airports.City,        airports.CountryAbbrev FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = 'Alton' AND flights.AirportCode = 'AA' 
 SELECT airports.City,        airports.CountryAbbrev FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = 'Alton' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline WHERE airports.AirportName = 'AKO' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = airports.AirportAbbrev WHERE airports.AirportAbbrev = 'AKO' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = 'Aberdeen' 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = 'APG'   AND airports.CountryAbbrev = 'US' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = 'APG'   AND airports.CountryAbbrev = 'US' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = "AT"   AND airports.AirportName = "ATO" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = "AT"   AND airports.City = "AT"   AND airports.AirportName = "ATO" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   AND airports.CountryAbbrev = "GB"   AND airports.AirportName = "Aberdeen Airport"   AND flights.destairport = "Aberdeen Airport"   AND flights.sourceairport = "Aberdeen Airport"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   AND airports.CountryAbbrev = "GB"   AND flights.AirportName = "Aberdeen"   AND flights.AirportCode = "ABD"   AND flights.SourceAirport = "Aberdeen"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   AND airports.CountryAbbrev = "GB"   AND airports.AirportName = "Aberdeen Airport" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   AND airports.CountryAbbrev = "GB"   AND airports.AirportName = "Aberdeen Airport"   AND flights.destairport = "Aberdeen Airport"   AND flights.sourceairport = "Aberdeen Airport"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airports.City = 'Aberdeen'   AND airports.CountryAbbrev = 'GB'   AND airports.AirportName = 'Ashley'   AND airlines.Airline = 'United' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airports.City = "Aberdeen"   AND airports.Country = "United Kingdom"   AND airports.AirportName = "Ashley"   AND airports.CountryAbbrev = "UK"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON airlines.aidnumber = flights.aidnumber WHERE airlines.abbreviation = 'JetBlue'   AND airports.city = 'London'   AND airports.country = 'United Kingdom'   AND airports.countryabbrev = 'GB'; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportAbbrev WHERE airlines.Airline = "Jetblue Airways"   AND airports.Country = "United States" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Airline = flights.Airline WHERE airports.City = 'ASY'   AND airlines.Airline = 'United Airlines' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Abbreviation = flights.Alineair WHERE airports.Country = "ASY"   AND airlines.Abbreviation = "United"   AND flights.Sourceairport = airports.Airportname   AND flights.Destairport = airports.Airportname   AND airlines.Country = "ASY"; 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Airline = flights.Airline WHERE airports.Country = 'Austria'   AND airports.CountryAbbrev = 'AT'   AND airlines.Airline = 'United Airlines'   AND airports.AirportName = 'AHD'   AND flights.AirportCode = 'AHD'   AND flights.FlightNo = 1 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON airlines.aidnumber = flights.aidnumber WHERE airports.city = "AHD"   AND airlines.abbreviation = "United" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Abbreviation = flights.Alineair WHERE airports.City = 'Aberdeen'   AND airlines.Airline = 'United'   AND airports.CountryAbbrev = 'GB' 
 SELECT count(*) FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Abbreviation = flights.Aline WHERE airports.Country = "United Kingdom"   AND airports.CountryAbbrev = "UK"   AND flights.destairport = "Aberdeen"   AND airlines.airline = "United Airlines"   AND flights.sourceairport = "Aberdeen"   AND airports.airportname = "Aberdeen Airport"   AND airports.airrbcode = "AER" 
 SELECT airports.City FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.City FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Airline = flights.Airline GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.City FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = flights.Airline GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.City FROM airlines JOIN airports ON airlines.Abbreviation = airports.Abbreviation JOIN flights ON airlines.Airline = flights.Airline GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airports.AirportName ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline GROUP BY airports.AirportName ORDER BY count(*) DESC LIMIT 1 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline GROUP BY airports.AirportName ORDER BY count(*) ASC LIMIT 1 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Airline = flights.Airline AND flights.AirportName = airports.AirportName GROUP BY airports.AirportName ORDER BY count(*) ASC LIMIT 1 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
 SELECT airlines.abbreviation,        airports.country FROM airlines JOIN airports ON airlines.sourceairport = airports.airportcode JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.abbreviation ORDER BY count(*) ASC LIMIT 1 
 SELECT airports.CountryAbbrev,        airlines.Abbreviation FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airlines.Abbreviation ORDER BY count(*) ASC LIMIT 1 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.AirportName = 'AHD' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = "AHD" 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.CountryAbbrev = 'AHD' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airports.CountryAbbrev = "AHD" 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airports.AirportName = 'APG'   AND airports.AirportName = 'CVO' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName AND flights.AirportCode = airports.AirportCode WHERE airports.City = "APG"   AND airports.City = "CVO" 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportName = airports.AirportName WHERE airports.CountryAbbrev = 'CVO' EXCEPT SELECT airlines.Airline FROM airlines JOIN airports ON airlines.AirportName = airports.AirportName WHERE airports.CountryAbbrev = 'APG' 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev WHERE airports.Country = "CVO" EXCEPT SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev WHERE airports.Country = "APG" 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Airline HAVING count(*) >= 10 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Airline HAVING count(*) >= 10 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airlines.Airline HAVING count(*) < 200 
 SELECT airlines.Airline FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName GROUP BY airlines.Airline HAVING count(*) < 200 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = airports.CountryAbbrev WHERE airlines.Airline = "United Airlines" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = airports.Abbreviation WHERE airlines.Airline = "United" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.Country = "APG" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "APG" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.Country = "Australia"   AND airports.CountryAbbrev = "APG" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Abbreviation = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.Country = "APG" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen" 
 SELECT flights.FlightNo FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   AND airports.CountryAbbrev = "GB" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev JOIN flights ON flights.Airline = airlines.Airline AND flights.AirportName = airports.AirportName WHERE airports.City = "Aberdeen"   OR airports.City = "Abilene" 
 SELECT count(*) FROM airlines JOIN airports ON airlines.abbreviation = airports.abbreviation JOIN flights ON flights.sourceairport = airports.airportcode AND flights.destairport = airports.airportname WHERE airports.city = "Aberdeen"   OR airports.city = "Abilene"   AND airports.country = "United States" 
 SELECT airportname FROM airports WHERE airportcode NOT IN     (SELECT destairport      FROM flights      INTERSECT      SELECT airports.airportcode      FROM flights      JOIN airports ON flights.sourceairport = airports.airportcode      AND flights.destairport = airports.airportname) 
 SELECT airports.AirportName FROM airlines JOIN airports ON airlines.Country = airports.CountryAbbrev JOIN flights ON airlines.Abbreviation = airports.AirportAbbrev WHERE airports.AirportName NOT IN     (SELECT DestAirport      FROM flights INTERSECT      SELECT SourceAirport      FROM flights) 
 SELECT COUNT(*) FROM (employee) JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.Location = "District 1"   AND shop.District = "District 1"   AND employee.Name = "Sofia"   AND employee.Age > 30   AND evaluation.Bonus > 1000   AND evaluation.Year_awarded = 2015   AND employee.Is_full_time = 1; 
 SELECT COUNT(*) FROM (employee) JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.Location = "District 1"   AND shop.District = "District 1"   AND employee.Name = "Sharon"   AND employee.Age > 30   AND evaluation.Bonus > 1000   AND evaluation.Year_awarded = 2015   AND employee.Is_full_time = 1; 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID ORDER BY employee.Age ASC 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.Location = "District 1" ORDER BY employee.Age ASC 
 SELECT city,        COUNT(*) FROM employee GROUP BY city 
 SELECT count(*),        city FROM employee GROUP BY city 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1 
 SELECT count(*),        shop.Location FROM employee JOIN shop ON employee.City = shop.City JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID GROUP BY shop.Location 
 SELECT count(*),        shop.location FROM employee JOIN shop ON employee.city = shop.city JOIN hiring ON hiring.shop_id = shop.shop_id JOIN evaluation ON evaluation.employee_id = employee.employee_id GROUP BY shop.location 
 SELECT shop.Location,        shop.District,        employee.Manager_name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Number_products =     (SELECT max(Number_products)      FROM shop) 
 SELECT shop.Location,        shop.District,        employee.Manager_name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.Number_products =     (SELECT max(Number_products)      FROM shop) 
 SELECT min(shop.Number_products),        max(shop.Number_products) FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Location = employee.City   AND shop.District = employee.City   AND employee.Name!= "Manager"   AND employee.Age >= 30   AND employee.Is_full_time = 1   AND employee.Name!= "Hiring Manager"   AND employee.Name!= "Evaluation" 
 SELECT min(shop.Number_products),        max(shop.Number_products) FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Location = 'District'   AND shop.District = 'District'   AND employee.Name!= 'Manager'   AND employee.City = 'District'   AND employee.Age < 40   AND employee.Is_full_time = 0   AND employee.Name!= 'Manager'   AND employee.Name!= 'Shop Manager' 
 SELECT shop.Name,        shop.Location,        shop.District FROM employee JOIN shop ON employee.Shop_ID = shop.Shop_ID WHERE employee.age > 30 ORDER BY shop.Number_products DESC 
 SELECT shop.Name,        shop.Location,        shop.District FROM employee JOIN shop ON employee.Shop_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus > 0 ORDER BY shop.Number_products DESC 
 SELECT shop.Name FROM employee JOIN shop ON employee.City = shop.City WHERE shop.District = employee.City GROUP BY shop.Name HAVING avg(Number_products) > 100 
 SELECT shop.name FROM employee JOIN shop ON employee.shop_id = shop.shop_id WHERE shop.location = 'District'   AND shop.district!= 'District' GROUP BY shop.name HAVING avg(number_products) > 100 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = hiring.Employee_ID GROUP BY employee.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = hiring.Employee_ID WHERE evaluation.Bonus =     (SELECT max(evaluation.Bonus)      FROM evaluation) ORDER BY evaluation.Bonus DESC LIMIT 1; 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus =     (SELECT max(evaluation.Bonus)      FROM evaluation) 
 SELECT employee.Name FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus =     (SELECT MAX (evaluation.Bonus)      FROM evaluation) 
 SELECT Name FROM employee WHERE Age > 40   AND City!= "Hong Kong"   AND District!= "Central"   AND Number_products > 100   AND Is_full_time = 0   AND Manager_name!= "Shirley"   AND Bonus = 0 
 SELECT Name FROM employee WHERE Age > 40   AND City!= "Hong Kong"   AND District!= "Central"   AND Number_products > 100   AND Is_full_time = 0   AND Manager_name!= "Shirley"   AND evaluation = "null" 
 SELECT shop.name FROM employee JOIN shop ON employee.shop_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN employee ON employee.employee_id = hiring.employee_id WHERE employee.age > 30 GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1 
 SELECT shop.name FROM employee JOIN shop ON employee.city = shop.city JOIN hiring ON hiring.shop_id = shop.shop_id JOIN employee ON employee.employee_id = hiring.employee_id WHERE employee.age > 30 GROUP BY shop.name ORDER BY count(*) DESC LIMIT 1; 
 SELECT name FROM shop WHERE district = 'Not hiring' 
 SELECT shop.name FROM employee JOIN shop ON employee.shop_id = shop.shop_id WHERE employee.age > 30   AND shop.district = 'No employees' 
 SELECT shop.name,        shop.location FROM employee JOIN shop ON employee.shop_id = shop.shop_id JOIN hiring ON hiring.shop_id = shop.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.age > 30   AND employee.city!= shop.city UNION SELECT shop.name,        shop.location FROM employee JOIN shop ON employee.shop_id = shop.shop_id WHERE shop.city = 'Hong Kong'   AND shop.district = 'Central' ORDER BY shop.name 
 SELECT shop.name,        count(*),        shop.location FROM employee JOIN shop ON employee.employee_id = shop.shop_id WHERE employee.age > 30 GROUP BY shop.location ORDER BY count(*) DESC LIMIT 5; 
 SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON shop.Location = hiring.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.District = "North"   AND shop.Location = "North"   AND employee.Name = "John"   AND employee.City = "North"   AND employee.Age > 30 
 SELECT sum(evaluation.Bonus) FROM employee JOIN shop ON employee.Employee_ID = hiring.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE shop.Location = "District 1"   AND shop.District = "District 1"   AND employee.Name = "Manager_name"   AND employee.Age > 30 
 SELECT * FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = hiring.Employee_ID WHERE shop.Location = "District 1"   AND shop.District = "District 1"   AND evaluation.Year_awarded > 2015   AND evaluation.Bonus > 1000   AND employee.Name = "Sharon"   AND employee.Age > 40   AND employee.City = "District 1"; 
 SELECT * FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = hiring.Employee_ID WHERE shop.Location = "District 1"   AND shop.District = "District 1"   AND evaluation.Year_awarded > 2015   AND evaluation.Bonus > 1000   AND employee.Name = "Sharon"   AND employee.Age > 40   AND employee.City = "District 1"; 
 SELECT shop.District FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Number_products < 3000 INTERSECT   SELECT shop.District   FROM employee   JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Number_products > 10000 
 SELECT shop.District FROM employee JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Number_products < 3000 INTERSECT   SELECT shop.District   FROM employee   JOIN shop ON employee.Employee_ID = shop.Shop_ID WHERE shop.Number_products > 10000 
 SELECT DISTINCT shop.Location FROM employee JOIN shop ON employee.Shop_ID = shop.Shop_ID JOIN hiring ON hiring.Shop_ID = shop.Shop_ID JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus > 0   AND evaluation.Year_awarded > 2015 
 SELECT count(DISTINCT shop.Location) FROM employee JOIN shop ON employee.Shop_ID = shop.Shop_ID JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN evaluation ON employee.Employee_ID = hiring.Employee_ID WHERE evaluation.Bonus > 0 
 SELECT count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Document Name"   AND Documents.Document_Description = "Document Description"   AND Paragraphs.Other_Details = "Other Details"   AND Templates.Date_Effective_From = "Date Effective From"   AND Templates.Date_Effective_To = "Date Effective To" 
 SELECT count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Documents.document_id,        Documents.document_name,        Documents.document_description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id 
 SELECT Documents.document_id,        Documents.document_name,        Documents.document_description,        Documents.other_details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id 
 SELECT Documents.document_name,        Templates.template_type_code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Documents.document_name,        Templates.template_type_code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_description LIKE '%w%' 
 SELECT Documents.Document_ID,        Templates.Template_Type_Code,        Templates.Template_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Robbin CV"   AND Documents.Document_Description = "CV" 
 SELECT Documents.Document_ID,        Templates.Template_Type_Code,        Templates.Template_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Robbin CV"   AND Documents.Document_Description = "CV" 
 SELECT count(DISTINCT Ref_Template_Types.Template_Type_Description) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT count(DISTINCT Templates.Template_Type_Code) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT count(*) FROM   (SELECT Documents.document_name    FROM Templates    JOIN Documents ON Templates.template_id = Documents.template_id    JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id    WHERE Templates.template_type_code = "PPT") 
 SELECT count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "PPT" 
 SELECT Templates.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code 
 SELECT Templates.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code 
 SELECT Templates.Template_Type_Code,        Templates.Version_Number FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.Template_Type_Code,        Documents.Document_Name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Document_Name ORDER BY count(*) DESC LIMIT 1 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_ID HAVING COUNT(*) > 1 
 SELECT Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 1 
 SELECT template_type_code FROM Ref_Template_Types EXCEPT SELECT Templates.template_type_code FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Templates.template_id = Paragraphs.template_id 
 SELECT template_id FROM Ref_Template_Types EXCEPT SELECT Templates.template_id FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Template Details"   AND Documents.document_description = "Template Details" 
 SELECT count(*) FROM Ref_Template_Types UNION SELECT count(*) FROM Templates UNION SELECT count(*) FROM Documents UNION SELECT count(*) FROM Paragraphs 
 SELECT count(*) FROM Ref_Template_Types UNION SELECT count(*) FROM Templates UNION SELECT count(*) FROM Documents UNION SELECT count(*) FROM Paragraphs 
 SELECT Templates.Template_Type_Code,        Templates.Version_Number,        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Templates.Template_ID,        Templates.Version_Number,        Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "PP"   OR Ref_Template_Types.Template_Type_Description = "PPT" 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "PP" INTERSECT   SELECT Templates.Template_ID   FROM Ref_Template_Types   JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code   JOIN Documents ON Templates.Template_ID = Documents.Template_ID   JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "PPT" 
 SELECT count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "CV" 
 SELECT count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Ref_Template_Types.Template_Type_Description = "CV" 
 SELECT Templates.Version_Number,        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Version_Number > 5 
 SELECT Templates.Version_Number,        Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Version_Number > 5 
 SELECT Ref_Template_Types.Template_Type_Code,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Description,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code HAVING count(*) < 3 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING count(*) < 3 
 SELECT min(Templates.Version_Number),        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Description 
 SELECT Templates.Version_Number,        Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID ORDER BY Templates.Version_Number ASC LIMIT 1 
 SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Data base"   AND Documents.Document_Description = "Data base"   AND Paragraphs.Paragraph_Text = "Data base"   AND Templates.Template_Type_Code = "Data base" 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Data base"   AND Documents.Document_Description = "Data base"   AND Paragraphs.Other_Details = "Data base" 
 SELECT Documents.document_name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_Template_Types.template_type_description = "BK" 
 SELECT Documents.document_name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Ref_Template_Types.template_type_description = "BK" 
 SELECT Ref_Template_Types.Template_Type_Description,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Description,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY count(*) DESC LIMIT 1 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = ""   AND Documents.Document_Description = ""   AND Paragraphs.Other_Details = "" 
 SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Templates.Template_Type_Code = "AD" 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Templates.Date_Effective_From = "2000-01-01"   AND Templates.Date_Effective_To = "2000-12-31"   AND Templates.Template_Type_Code = "AD" 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Book"   AND Templates.Template_Type_Description = "Book" 
 SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Templates.Template_Type_Description = "Book" 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID 
 SELECT Templates.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation" 
 SELECT Templates.Template_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation" 
 SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Templates.Template_ID = Paragraphs.Document_ID WHERE Templates.Template_Type_Code = "Ref_Template_Types Template_Type_Description"   AND Templates.Date_Effective_From <= Templates.Date_Effective_To   AND Templates.Date_Effective_To >= Templates.Date_Effective_From   AND Documents.Document_Name = "Document Name"   AND Documents.Document_Description = "Document Description"   AND Documents.Other_Details = "Other Details" 
 SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Templates.Template_ID = Paragraphs.Document_ID WHERE Templates.Template_Type_Code = "Ref_Template_Types Template_Type_Description"   AND Templates.Date_Effective_From <= Templates.Date_Effective_To   AND Templates.Date_Effective_To >= Templates.Date_Effective_From   AND Documents.Document_Name = "Document Name"   AND Documents.Document_Description = "Document Description"   AND Paragraphs.Other_Details = "Other Details" 
 SELECT count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Summer Show"   AND Paragraphs.Other_Details = "Show" 
 SELECT count(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Summer Show"   AND Documents.Document_Description = "Show" 
 SELECT Paragraphs.Other_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Korea "   AND Paragraphs.Paragraph_Text = "Korea "   AND Templates.Template_Type_Description = "Templates" 
 SELECT Paragraphs.other_details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = "Korea "   AND Templates.Template_Type_Description = "paragraphs"   AND Paragraphs.Paragraph_Text = "Korea " 
 SELECT Paragraphs.paragraph_id,        Paragraphs.paragraph_text FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_name = "Welcome to NY"   AND Templates.template_type_code = "Document Template" 
 SELECT Paragraphs.paragraph_id,        Paragraphs.paragraph_text FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id WHERE Documents.document_name = "Welcome to NY" 
 SELECT Paragraphs.paragraph_text FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Customer reviews"   AND Templates.template_type_code = "Customer" 
 SELECT Paragraphs.paragraph_text FROM Templates JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Documents.document_name = "Customer reviews" 
 SELECT Documents.Document_ID,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID 
 SELECT Documents.Document_ID,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) 
 SELECT Documents.document_id,        Documents.document_name,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id 
 SELECT Documents.Document_ID,        Documents.Document_Name,        Documents.Document_Description,        Paragraphs.Other_Details,        count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID 
 SELECT Documents.document_id FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) >= 2 
 SELECT Documents.document_id FROM Templates JOIN Documents ON Templates.template_type_code = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) >= 2 
 SELECT Documents.document_id,        Documents.document_name FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
 SELECT Documents.Document_ID,        Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Templates.Template_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Documents.document_id FROM Templates JOIN Documents ON Templates.template_type_code = Documents.template_type_code JOIN Paragraphs ON Templates.template_id = Paragraphs.template_id GROUP BY Documents.document_id ORDER BY count(*) ASC LIMIT 1 
 SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) ASC LIMIT 1 
 SELECT Documents.document_id FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code JOIN Documents ON Templates.template_id = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT Documents.document_id FROM Templates JOIN Documents ON Templates.template_type_code = Documents.template_type_code JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id GROUP BY Documents.document_id HAVING count(*) BETWEEN 1 AND 2 
 SELECT Documents.Document_ID FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = "Brazil"   AND Paragraphs.Other_Details = "Ireland" 
 SELECT Documents.document_id FROM Templates JOIN Documents ON Templates.template_type_code = Documents.template_id JOIN Paragraphs ON Documents.document_id = Paragraphs.document_id WHERE Paragraphs.paragraph_text = "Brazil"   AND Paragraphs.other_details = "Ireland" 
 SELECT count(*) FROM teacher WHERE age > 30   AND hometown!= "USA" 
 SELECT count(*) FROM teacher WHERE age > 30   AND hometown!= "USA" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Age ASC 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Age ASC 
 SELECT teacher.Name,        teacher.Age,        teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID WHERE course.staring_date = "2015-12-31"   AND course.course = "Statistics"   AND course.grade = "A" 
 SELECT teacher.Name,        teacher.Age,        teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID WHERE course.staring_date = "2015-12-31"   AND course.course = "Statistics"   AND course.grade = "A" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE teacher.Hometown!= "Little Lever Urban District" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE teacher.Hometown!= "Little Lever Urban District" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE teacher.Age = 32   OR teacher.Age = 33 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE teacher.Age = 32   OR teacher.Age = 33 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID WHERE teacher.Age =     (SELECT min(age)      FROM teacher) 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID ORDER BY teacher.Age LIMIT 1 
 SELECT teacher.Hometown,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Hometown 
 SELECT teacher.Hometown,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Hometown 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID GROUP BY teacher.Hometown ORDER BY count(*) DESC LIMIT 1 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Hometown ORDER BY count(*) DESC LIMIT 1 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Hometown HAVING COUNT(*) >= 2 
 SELECT teacher.Hometown FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Hometown HAVING COUNT(*) >= 2 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade = 1 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID WHERE teacher.Age > 30   AND teacher.Hometown = 'USA' 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID ORDER BY teacher.Name 
 SELECT teacher.Name,        course.Course FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID ORDER BY teacher.Name 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE course.Course = "Math" 
 SELECT teacher.Name FROM course JOIN teacher ON course.Staring_Date = teacher.Hometown JOIN course_arrange ON course.Course = course_arrange.Course WHERE course.Course = "Math" 
 SELECT teacher.Name,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Name 
 SELECT teacher.Name,        count(*) FROM course JOIN teacher ON course.Course_ID = teacher.Teacher_ID GROUP BY teacher.Name 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name HAVING count(*) >= 2 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name HAVING count(*) >= 2 
 SELECT teacher.Name FROM course JOIN teacher ON course.Staring_Date = teacher.Hometown WHERE course.Course NOT IN     (SELECT course.Course      FROM course      JOIN teacher ON course.teacher_id = teacher.teacher_id      WHERE teacher.Grade = 1) 
 SELECT teacher.Name FROM course JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID WHERE course.Staring_Date NOT IN     (SELECT course.Staring_Date      FROM course      JOIN teacher ON course.Teacher_ID = teacher.Teacher_ID      WHERE teacher.Grade = 1) 
 SELECT COUNT(*) FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Age < 30   AND visitor.Level_of_membership = "Free"   AND museum.Open_Year = "2000" 
 SELECT visitor.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC 
 SELECT avg(visitor.Age) FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Level_of_membership > 4 
 SELECT visitor.Name,        visitor.Level_of_membership FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age 
 SELECT museum.Museum_ID,        museum.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY museum.Museum_ID ORDER BY sum(Num_of_Staff) DESC LIMIT 1 
 SELECT avg(museum.Num_of_Staff) FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visit.visitor_ID = museum.Museum_ID WHERE visit.Total_spent > 0   AND museum.Open_Year < 2009 
 SELECT museum.open_year,        museum.num_of_staff FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visit.visitor_ID = visitor.ID WHERE visitor.Name = "Plaza Museum"   AND museum.Name = "Plaza Museum" 
 SELECT museum.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visit.visitor_ID = visitor.ID WHERE visit.Total_spent > (SELECT min(visit.Total_spent)                           FROM museum                           JOIN visitor ON museum.Museum_ID = visitor.Museum_ID                           WHERE visit.Open_Year > 2010)   AND museum.Num_of_Staff > (SELECT min(museum.Num_of_Staff)                                 FROM museum                                 JOIN visitor ON museum.Museum_ID = visitor.Museum_ID                                 WHERE visit.Open_Year > 2010) 
 SELECT visitor.ID,        museum.Name,        visitor.Age FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID GROUP BY museum.Museum_ID HAVING COUNT(*) > 1 
 SELECT visitor.ID,        museum.Name,        visitor.Level_of_membership FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visit.visitor_ID = visitor.ID WHERE visit.Total_spent =     (SELECT max(visit.Total_spent)      FROM museum      JOIN visitor ON museum.Museum_ID = visitor.Museum_ID      WHERE visitor.Level_of_membership =          (SELECT Level_of_membership           FROM visitor           WHERE Age > 18)) 
 SELECT museum.Museum_ID,        museum.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY museum.Museum_ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Name FROM museum WHERE Num_of_Staff = 0   AND Open_Year =     (SELECT min(Open_Year)      FROM museum); 
 SELECT visitor.Name,        visitor.Age FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY sum(visit.Total_spent) DESC LIMIT 1 
 SELECT avg(visit.Total_spent),        max(visit.Total_spent) FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID JOIN visit ON museum.Museum_ID = visit.Museum_ID 
 SELECT sum(visit.Total_spent) FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE visitor.Level_of_membership = 1 
 SELECT visitor.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE museum.Open_Year < 2011   AND museum.Open_Year > 2009 
 SELECT visitor.Name FROM museum JOIN visitor ON museum.Museum_ID = visitor.Museum_ID WHERE museum.Open_Year < 2010 GROUP BY visitor.Name HAVING count(*) = 0 
 SELECT count(*) FROM museum WHERE open_year > 2013   OR open_year < 2008 
 SELECT count(*) FROM players WHERE hand = "Left"   AND birth_date > "1990-01-01"   AND country_code = "USA"   AND tourney_name = "ATP Tour"   AND tourney_level = "ATP Tour"   AND tourney_id = "ATP Tour"   AND year = 2015; 
 SELECT count(*) FROM players WHERE hand = "Left"   AND birth_date > "1990-01-01"   AND country_code = "USA"   AND tourney_name = "ATP Tour"   AND tourney_level = "ATP Tour Finals"   AND tourney_id = "ATP Tour Finals 2019"   AND year = 2019; 
 SELECT sum(matches.match_num) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN players ON players.player_id = matches.winner_id WHERE players.hand = "right"   AND players.country_code = "USA"   AND players.birth_date > "1990-01-01"   AND players.birth_date < "2000-01-01"   AND players.first_name = "S"   AND players.last_name = "Ward"   AND players.score > 0   AND players.surface = "Hard"   AND players.tourney_name = "ATP Tour"   AND players.tourney_level = "Masters"   AND players.year = 2019; 
 SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.birth_date > "1990-01-01"   AND players.country_code = "USA"   AND matches.score > 0   AND matches.round = 1   AND matches.match_num > 1   AND rankings.tourney_name = "ATP Tour"   AND rankings.tourney_level = "High"   AND rankings.tourney_date > "2010-01-01"   AND rankings.year = 2015; 
 SELECT players.first_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.country_code = "USA" 
 SELECT players.first_name,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.country_code = "USA" 
 SELECT avg(matches.loser_age),        avg(matches.winner_age) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "0-0"   AND matches.surface = "hard"   AND matches.tourney_name = "ITTF World Team Championships"   AND matches.tourney_level = "World Team Championships"   AND matches.year = 2019 GROUP BY players.player_id 
 SELECT avg(matches.loser_age),        avg(matches.winner_age) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN players ON players.player_id = matches.winner_id WHERE matches.score = "0-0"   AND matches.surface = "hard"   AND matches.tourney_name = "ATP Tour"   AND matches.tourney_level = "Masters 1000" GROUP BY players.player_id 
 SELECT avg(rankings.ranking) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0   AND matches.round = 1   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0
 SELECT avg(rankings.ranking) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0   AND matches.round = 1   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0   AND matches.score > 0
 SELECT max(rankings.ranking) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_hand = "left"   AND matches.loser_ioc = "yes"   AND matches.loser_name = "left"   AND matches.loser_rank = "left"   AND matches.loser_rank_points > 0   AND matches.match_num > 0   AND matches.score > 0   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_level = "professional"   AND matches.tourney_name = "ATP Tour"   AND matches.year > 2015; 
 SELECT rankings.ranking FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 30   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 150   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 10   AND matches.match_num > 1   AND matches.score > 0   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_id > 0   AND matches.tourney_level > 1   AND matches.tourney_name = "World Cup"   AND rankings.ranking_points > 10 ORDER BY rankings.ranking DESC LIMIT 1; 
 SELECT count(DISTINCT players.country_code) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 0   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 0   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 0   AND matches.match_num > 0   AND matches.score > 0   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_id > 0   AND matches.tourney_level > 0   AND matches.tourney_name = "World Cup"   AND rankings.year > 2015 
 SELECT count(DISTINCT players.country_code) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 0   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 0   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 0   AND matches.match_num > 0   AND matches.score > 0   AND matches.surface = "yes"   AND matches.tourney_date > 0   AND matches.tourney_id > 0   AND matches.tourney_level > 0   AND matches.tourney_name > 0   AND rankings.ranking > 0   AND rankings.ranking_points > 0   AND rankings.tours > 0 
 SELECT DISTINCT players.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tourney_name = "Tennis Tour"   AND rankings.tourney_level = "International"   AND matches.score > 0   AND matches.minutes > 120   AND matches.round = 1   AND matches.surface = "Hard"   AND matches.tourney_date > "2015-01-01"   AND matches.year > 2015; 
 SELECT DISTINCT players.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 40   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.score > 2.5   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_level = "professional"   AND matches.tourney_name = "ATP Tour"   AND rankings.year = 2015   AND rankings.tourneys > 1 
 SELECT tourney_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE match_num > 10 GROUP BY tourney_name HAVING COUNT(*) > 10 
 SELECT tourney_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE match_num > 10 
 SELECT players.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2013   AND rankings.tourney_name = "ATP Masters 2013"   AND matches.score > 0 UNION SELECT players.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2016   AND rankings.tourney_name = "ATP Masters 2016"   AND matches.score > 0 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2013   AND rankings.ranking_points > 0   AND rankings.ranking > 0   AND players.winner_name = "John"   AND players.winner_hand = "Left"   AND players.winner_ioc = "ICQ"   AND players.winner_rank > 0   AND players.winner_seed > 0   AND players.score > 0   AND players.tourney_name = "ATP Tour"   AND players.tourney_level = "International"   AND players.birth_date > "1990-01-01"; 
 SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.year = 2013   OR rankings.year = 2016 
 SELECT count(*) FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.year = 2013   OR matches.year = 2016 GROUP BY matches.loser_id ORDER BY matches.score DESC LIMIT 1; 
 SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "Win"   AND matches.round = "Final"   AND matches.score = "Win"   AND rankings.tourney_name = "WTA Championships"   AND rankings.tourney_level = "Grand Slam"   AND players.first_name = "Sofia"   AND players.last_name = "Nikolova"   AND players.hand = "Left"   AND players.birth_date = "1995-04-25"   AND players.country_code = "Croatia" UNION SELECT players.country_code,        players.first_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "Win"   AND matches.round = "Final"   AND matches.score = "Win"   AND rankings.tourney_name = "Australian Open"   AND rankings.tourney_level = "Grand Slam"   AND players.first_name = "Sofia"   AND players.last_name = "Nikol
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = 0   AND matches.round = 1   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score = 0   AND matches.score
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tourney_name = "ATP Tour"   AND rankings.tourney_level = "ATP Tour Finals" ORDER BY rankings.year DESC LIMIT 1 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tourney_name = "ITF World Tour" ORDER BY rankings.year DESC LIMIT 1 
 SELECT players.first_name,        players.last_name FROM players ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_hand = "L" ORDER BY players.birth_date 
 SELECT players.first_name,        players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_hand = "left" ORDER BY players.birth_date 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = 1 GROUP BY players.first_name,          players.country_code ORDER BY count(*) DESC LIMIT 1 
 SELECT players.first_name,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = 1 ORDER BY rankings.tours DESC LIMIT 1 
 SELECT YEAR FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "win" GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1; 
 SELECT rankings.year FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0 GROUP BY rankings.year ORDER BY count(*) DESC LIMIT 1; 
 SELECT players.winner_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0 GROUP BY rankings.ranking ORDER BY count(*) DESC LIMIT 1 
 SELECT players.winner_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0 GROUP BY rankings.ranking ORDER BY count(*) DESC LIMIT 1 
 SELECT players.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0   AND matches.surface = "Australia"   AND rankings.tourney_name = "Australian Open" ORDER BY rankings.ranking_points DESC LIMIT 1; 
 SELECT players.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.surface = "Australia"   AND matches.tourney_name = "Australian Open" ORDER BY rankings.ranking_points DESC LIMIT 1; 
 SELECT players.loser_hand,        players.winner_hand FROM players JOIN matches ON players.player_id = matches.loser_id JOIN players ON players.player_id = matches.winner_id WHERE matches.minutes =     (SELECT max(minutes)      FROM matches) 
 SELECT players.winner_name,        players.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.round = 1 ORDER BY matches.minutes DESC LIMIT 1 
 SELECT players.first_name,        players.last_name,        rankings.ranking FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 18   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 150   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 10   AND matches.match_num > 1   AND matches.score > 0   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_id > 0   AND matches.tourney_level > 1   AND matches.tourney_name = "World Cup"   AND rankings.year > 2010 GROUP BY players.first_name,          players.last_name 
 SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 18   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.score > 0 UNION SELECT players.first_name,        players.last_name,        players.hand,        players.birth_date,        players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 18   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.score < 0 
 SELECT players.first_name,        players.last_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 18   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 150   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 10   AND matches.match_num > 1   AND matches.score > 0   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_id > 0   AND matches.tourney_level > 1   AND matches.tourney_name = "World Cup"   AND rankings.year > 2015 GROUP BY players.first_name,          players.last_name 
 SELECT players.first_name,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 18   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.loser_ht > 1.8   AND matches.loser_ioc = "yes"   AND matches.loser_name = "yes"   AND matches.loser_rank > 10   AND matches.match_num > 1   AND matches.score > 2.5   AND matches.surface = "hard"   AND matches.tourney_date > "2015-01-01"   AND matches.tourney_id > 1   AND matches.tourney_level = "Pro"   AND matches.tourney_name = "ATP Tour"   AND rankings.year > 2015 GROUP BY players.first_name ORDER BY rankings.ranking_points DESC 
 SELECT players.country_code,        COUNT(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 30   AND matches.loser_entry = "yes" GROUP BY players.country_code 
 SELECT players.country_code,        count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 30 GROUP BY players.country_code 
 SELECT players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 30   AND matches.loser_entry = "yes"   AND matches.loser_hand = "yes"   AND matches.score > 0 GROUP BY players.country_code ORDER BY count(*) DESC LIMIT 1; 
 SELECT players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.loser_age > 0 GROUP BY players.country_code ORDER BY count(*) DESC LIMIT 1; 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50 
 SELECT rankings.ranking_date,        rankings.ranking,        COUNT(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right" GROUP BY rankings.ranking_date ORDER BY rankings.ranking DESC; 
 SELECT sum(rankings.tours),        rankings.ranking_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "right"   AND players.birth_date > "1990-01-01" GROUP BY rankings.ranking_date 
 SELECT match_num,        YEAR FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score > 0 GROUP BY YEAR ORDER BY match_num DESC; 
 SELECT match_num,        YEAR FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score!= "0" GROUP BY YEAR ORDER BY match_num DESC; 
 SELECT players.winner_name,        rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.round = 1   AND matches.score > 0 GROUP BY rankings.ranking ORDER BY rankings.ranking_points DESC LIMIT 3; 
 SELECT players.winner_name,        rankings.ranking,        rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.round = 1   AND matches.score > 0 GROUP BY rankings.ranking ORDER BY rankings.ranking_points DESC LIMIT 3; 
 SELECT count(DISTINCT players.winner_ioc) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = "left"   AND matches.score > 0   AND matches.score > 0   AND players.birth_date > 2000-01-01   AND players.country_code = "Australia"   AND rankings.tourney_name = "WTA Championships"   AND rankings.tourney_level = "Grand Slam"   AND rankings.year = 2015; 
 SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.score = "Win"   AND matches.surface = "Tennis"   AND players.hand = "Left"   AND rankings.tourney_name = "WTA Championships"   AND rankings.tourney_level = "Grand Slam"   AND rankings.year = 2019 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points =     (SELECT max(ranking_points)      FROM rankings) ORDER BY matches.score DESC LIMIT 1 
 SELECT players.first_name,        players.country_code,        players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.winner_rank_points =     (SELECT max(winner_rank_points)      FROM rankings) ORDER BY matches.score DESC LIMIT 1 
 SELECT players.hand,        count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tourney_name = "Tennis Tour" GROUP BY players.hand 
 SELECT players.hand,        count(*) FROM players JOIN matches ON players.player_id = matches.loser_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tourney_name = "Tennis Tour" GROUP BY players.hand 
 SELECT count(*) FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.ship_type = 'Captured'   AND battle.result = 'Defeat' 
 SELECT ship.name,        ship.tonnage FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON ship.id = death.caused_by_ship_id WHERE battle.result = "Win" ORDER BY ship.tonnage DESC 
 SELECT battle.name,        battle.date,        battle.result FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.ship_type = "galleon"   AND ship.location = "England"   AND death.killed > 0   AND death.injured > 0; 
 SELECT max(death.killed),        max(death.injured),        ship.ship_type FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON ship.id = death.causued_by_ship_id GROUP BY ship.ship_type 
 SELECT avg(death.injured),        ship.disposition_of_ship FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON ship.id = battle.lost_in_battle GROUP BY ship.disposition_of_ship 
 SELECT death.note,        death.injured,        death.killed FROM battle JOIN ship ON battle.lost_in_battle = ship.id WHERE ship.tonnage = 't'   AND ship.location ='sea'   AND battle.result = 'defeat' UNION SELECT death.note,        death.injured,        death.killed FROM ship JOIN death ON ship.id = death.causued_by_ship_id WHERE ship.tonnage = 't'   AND ship.location ='sea'   AND battle.result = 'defeat' 
 SELECT battle.name,        battle.result FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.cased_by_ship_id WHERE ship.bulgarian_commander!= 'Boril' 
 SELECT battle.id,        battle.name FROM battle JOIN ship ON battle.lost_in_battle = ship.id WHERE ship.ship_type = 'Brig'   AND ship.location!= 'Port'   AND ship.disposition_of_ship = 'At Sea' 
 SELECT battle.id,        battle.bulgarian_commander FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.cased_by_ship_id WHERE death.killed > 10   OR death.injured > 10 GROUP BY battle.bulgarian_commander ORDER BY count(*) DESC LIMIT 1; 
 SELECT ship.id,        ship.name FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id ORDER BY sum(injured) DESC LIMIT 1 
 SELECT DISTINCT battle.name FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.ship_id WHERE battle.bulgarian_commander = 'Kaloyan'   AND battle.latin_commander = 'Baldwin I' 
 SELECT count(DISTINCT battle.result) FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.location = "United Kingdom"   AND ship.ship_type = "Cruiser"   AND ship.disposition_of_ship = "At Sea" 
 SELECT count(*) FROM battle WHERE tonnage!= '225'   AND result!= 'Win'   AND ship.location!= 'Port'   AND ship.ship_type!= 'Privateer'   AND ship.disposition_of_ship!= 'Captured'   AND ship.name!= 'The British Man-of-War'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Royal Navy frigate'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Man-of-War'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Royal Navy frigate'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Man-of-War'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Royal Navy frigate'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Man-of-War'   AND ship.name!= 'The French Frigate'   AND ship.name!= 'The British Royal Navy frigate'   AND ship.name!= 'The French Frigate'   AND ship.name
 SELECT battle.name,        battle.date FROM battle JOIN ship ON battle.lost_in_battle = ship.id WHERE ship.name = 'Lettice'   AND ship.ship_type = 'Privateer' UNION SELECT battle.name,        battle.date FROM battle JOIN ship ON battle.lost_in_battle = ship.id WHERE ship.name = 'HMS Atalanta'   AND ship.ship_type = 'Privateer' 
 SELECT battle.name,        battle.result,        battle.bulgarian_commander FROM battle JOIN ship ON battle.lost_in_battle = ship.lost_in_battle JOIN death ON ship.id = death.cased_by_ship_id WHERE ship.location!= 'English Channel' 
 SELECT death.note FROM battle JOIN ship ON battle.lost_in_battle = ship.id JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.location = "East"   AND battle.result = "defeat"   AND ship.ship_type = "gunship" 
 SELECT Addresses.line_1,        Addresses.line_2 FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Courses.course_name = "BBA"   AND Courses.course_description = "Bachelor of Business Administration"   AND Addresses.city = "Toronto"   AND Addresses.zip_postcode = "M4H"   AND Addresses.state_province_county = "ON"   AND Addresses.country = "Canada"   AND Students.cell_mobile_number
 SELECT Addresses.line_1,        Addresses.line_2 FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Addresses.other_address_details = "Yes"   AND Addresses.line_1 = "First"   AND Addresses.line_2 = "Second"; 
 SELECT count(*) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Addresses.other_address_details = "San Francisco, CA"   AND Courses.course_description = "Data Structures"   AND Courses.course_name = "Introduction to Data Structures"   AND Courses.other_details = "This course
 SELECT count(*) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Addresses.other_address_details = "San Francisco, CA"   AND Courses.course_description = "Data Structures"   AND Courses.course_name = "Introduction to Data Structures"   AND Departments.department_name = "Computer Science
 SELECT Courses.course_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Courses.course_name = "Math"   AND Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.other_address_details = "San Francisco"   AND Courses.other_details = "The course is a statistics course."   AND Semesters.semester_description = "Fall 2015"   AND Students.date
 SELECT Courses.course_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Departments.department_name = "Math"   AND Courses.course_name = "Math Courses"   AND Transcripts.transcript_date = "2022-01-01"   AND Transcripts.other_details = "Yes" 
 SELECT Addresses.zip_postcode FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "Port Chelsea"   AND Addresses.line_1 = "Port"   AND Addresses.line_2 = "Chelsea"   AND Addresses.line_3 = "Port"   AND Addresses.state_province_county = "Nova Scotia"   AND Addresses.country = "Canada"; 
 SELECT Addresses.zip_postcode FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Courses.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Courses.course_name = "Port Chelsea"   AND Courses.course_description = "Port Chelsea"   AND Addresses.city = "Port Chelsea"   AND Addresses.state_province_county = "Nova Scotia"   AND Addresses.country = "Canada"; 
 SELECT DEPARTMENTS.department_name,        DEPARTMENTS.department_id FROM DEPARTMENTS JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN COURSES ON DEGREE_PROGRAMS.degree_program_id = COURSES.degree_program_id JOIN DEPARTMENTS ON DEPARTMENTS.department_id = COURSES.department_id JOIN Sections ON DEPARTMENTS.department_id = Sections.department_id JOIN Semesters ON DEPARTMENTS.department_id = Semesters.department_id JOIN STUDENTS ON DEPARTMENTS.department_id = STUDENTS.current_address_id JOIN STUDENTS ON DEPARTMENTS.department_id = STUDENTS.permanent_address_id JOIN Student_Enrolment ON STUDENTS.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = TRANSCRIPTS Contents.transcript_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = TRANSCRIPTS Contents.transcript_id GROUP BY DEPARTMENTS.department_id ORDER BY count(*) DESC LIMIT 1; 
 SELECT DEPARTMENTS.department_name,        DEGREE_PROGRAMS.degree_SUMMARY_NAME FROM DEPARTMENTS JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN COURSES ON DEGREE_PROGRAMS.course_id = COURSES.course_id JOIN DEPARTMENTS_sections ON DEPARTMENTS_sections.department_id = DEPARTMENTS.department_id JOIN COURSES_sections ON COURSES_sections.course_id = COURSES.course_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = COURSES_sections.transcript_id JOIN TRANSCRIPTURE_CONTENTS ON TRANSCRIPTS.transcript_id = TRANSCRIPTURE_CONTENTS.transcript_id WHERE TRANSCRIPTURE_CONTENTS.student_course_id = COURSES_sections.student_course_id GROUP BY DEPARTMENTS.department_name ORDER BY count(*) DESC LIMIT 1 
 SELECT count(*) FROM DEPARTMENTS JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN COURSES ON DEGREE_PROGRAMS.degree_program_id = COURSES.course_id JOIN SECTIONS ON COURSES.course_id = SECTIONS.course_id JOIN STUDENTS ON SECTIONS.course_id = STUDENTS.course_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = SECTIONS.section_id JOIN TRANSCRIPTURE_CONTENTS ON TRANSCRIPTS.transcript_id = TRANSCRIPTURE_CONTENTS.transcript_id WHERE DEPARTMENTS.department_name = "Computer Science"   AND DEGREE_PROGRAMS.degree_summary_name = "Master"   AND DEGREE_PROGRAMS.degree_SUMMARY_DESCRIPTION = "in Data Structures"   AND DEGREE_PROGRAMS.degree_SUMMARY_DESCRIPTION = "in Database Systems"   AND DEGREE_PROGRAMS.other_details = "in the field of Artificial Intelligence"   AND DEGREE_PROGRAMS.other_details = "in the field of Database Systems"   AND DEGREE_PROGRAMS.other_details = "in the field of Artificial Intelligence"; 
 SELECT count(DISTINCT departments.department_name) FROM addresses JOIN courses ON courses.course_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE transcripts.transcript_date > 0   AND transcript_contents.transcript_contents = "Degree" GROUP BY departments.department_name 
 SELECT count(DISTINCT degree_programs.degree_summary_name) FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_ enrolment ON student_ enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_ enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.other_details = "Yes" GROUP BY degree_programs.degree_summary_name 
 SELECT count(DISTINCT degree_programs.degree_summary_name) FROM degree_programs JOIN DEPARTMENTS ON degree_programs.department_id = DEPARTMENTS.department_id JOIN COURSES ON DEPARTMENTS.department_name = COURSES.department_name JOIN DEPARTMENTS ON COURSES.department_id = DEPARTMENTS.department_id JOIN Sections ON COURSES.course_id = Sections.course_id JOIN Semesters ON COURSES.semester_id = Semesters.semester_id JOIN Students ON Semesters.semester_description = Semesters.semester_description JOIN Students ON Students.student_id = Students.student_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN TRANSCRIPT_CONTENTS ON Transcripts.transcript_id = TRANSCRIPT_CONTENTS.transcript_id WHERE TRANSCRIPT_CONTENTS.other_details = "Yes" GROUP BY degree_programs.degree_summary_name 
 SELECT count(*) FROM DEGREE_PROGRAMS JOIN DEPARTMENTS ON DEGREE_PROGRAMS.department_id = DEPARTMENTS.department_id JOIN COURSES ON DEGREE_PROGRAMS.degree_program_id = COURSES.degree_program_id JOIN DEPARTMENTS ON COURSES.department_id = DEPARTMENTS.department_id WHERE DEPARTMENTS.department_name = "Engineering"   AND DEPARTMENTS.department_description = "Offering degrees" 
 SELECT count(*) FROM DEPARTMENTS JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN COURSES ON DEGREE_PROGRAMS.degree_program_id = COURSES.course_id JOIN DEPARTMENTS ON DEPARTMENTS.department_id = COURSES.department_id WHERE DEPARTMENTS.department_name = "Engineering"   AND DEPARTMENTS.department_description = "Department of Engineering"   AND DEPARTMENTS.other_details = "Engineering Department" 
 SELECT Courses.course_name,        Courses.course_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Addresses.current_address_id = Students.current_address_id JOIN Students ON Addresses.permanent_address_id = Students.permanent_address_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Courses.other_details = "Section"   AND Semesters.semester_name = "Fall"   AND Students.date_first_registered = "1995-12-25"   AND Students.date
 SELECT Courses.course_name,        Courses.course_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Addresses.current_address_id = Students.current_address_id JOIN Students ON Addresses.permanent_address_id = Students.permanent_address_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Courses.other_details = "Section"   AND Semesters.semester_name = "Fall"   AND Students.date_first_registered = "1995-12-25"   AND Students.date
 SELECT Courses.course_name,        Courses.course_id FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING count(*) <= 2 
 SELECT Courses.course_name,        Courses.course_id FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Sections.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Courses.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.zip_postcode = "94107"   AND Courses.course_description = "Introduction to Statistics"   AND Courses.course_name = "Statistics" GROUP BY Courses.course_id HAVING count(*) < 2 
 SELECT Sections.section_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcripts ON Courses.course_id = Transcripts.course_id JOIN Transcript_Contents ON Courses.course_id = Transcript_Contents.course_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States" ORDER BY Addresses.line_3 DESC 
 SELECT Sections.section_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States" ORDER BY Addresses.line_3 
 SELECT semesters.semester_name,        sections.section_name FROM addresses JOIN courses ON courses.course_id = sections.course_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON degree_programs.degree_program_id = courses.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN student_enrolment ON student_enrolment.student_id = courses.student_id JOIN student_Enrolment_Courses ON student_Enrolment.student_id = student_Enrolment_Courses.student_id JOIN transcripts ON student_Enrolment_Courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_Enrolment_Courses.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.transcript_date =     (SELECT max(transcript_date)      FROM transcripts) GROUP BY sections.section_name ORDER BY count(*) DESC LIMIT 1; 
 SELECT semesters.semester_name,        student_Enrolment_Courses.student_course_id FROM student_Enrolment JOIN student_Enrolment_Courses ON student_Enrolment.student_course_id = student_Enrolment_Courses.student_course_id JOIN semesters ON student_Enrolment.semester_id = semesters.semester_id GROUP BY student_Enrolment_Courses.student_course_id ORDER BY count(*) DESC LIMIT 1 
 SELECT DEPARTMENTS.department_description FROM DEPARTMENTS JOIN COURSES ON DEPARTMENTS.department_id = COURSES.department_id JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN SECTIONS ON DEGREE_PROGRAMS.degree_program_id = SECTIONS.course_id JOIN SEMESTERS ON SECTIONS.semester_id = SEMESTERS.semester_id JOIN STUDENTS ON STUDENTS.student_id = SECTIONS.student_id JOIN STUDENT_ENROLLMENT ON STUDENT_ENROLLMENT.student_id = STUDENTS.student_id JOIN STUDENT_ENROLLMENT_Courses ON STUDENT_ENROLLMENT.student_id = STUDENT_ENROLLMENT.student_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = STUDENT_ENROLLMENT.COURSE_ID JOIN TRANSCRIPT_CONTENTS ON TRANSCRIPTS.transcript_id = TRANSCRIPT_CONTENTS.transcript_id WHERE COURSES.course_name LIKE "%the computer%"   AND DEPARTMENTS.department_name LIKE "%the computer%"   AND DEGREE_PROGRAMS.degree_summary_name LIKE "%the computer%"   AND DEGREE_PROGRAMS.degree_SUMMARY_DESCRIPTION LIKE "%the computer%"   AND DEPARTMENTS.department_description LIKE "%
 SELECT DEPARTMENTS.department_description FROM DEPARTMENTS JOIN DEGREE_PROGRAMS ON DEPARTMENTS.department_id = DEGREE_PROGRAMS.department_id JOIN COURSES ON DEGREE_PROGRAMS.degree_program_id = COURSES.degree_program_id JOIN DEPARTMENTS ON DEPARTMENTS.department_id = COURSES.department_id JOIN Sections ON COURSES.course_id = Sections.course_id JOIN Semesters ON COURSES.semester_id = Semesters.semester_id JOIN STUDENTS ON STUDENTS.student_id = COURSES.student_id JOIN Student_Enrolment ON STUDENTS.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON STUDENTS.student_id = Student_Enrolment.student_id JOIN TRANSCRIPTS ON TRANSCRIPTS.transcript_id = COURSES.course_id JOIN TRANSCRIPTURE_CONTENTS ON COURSES.course_id = TRANSCRIPTS.course_id WHERE COURSES.course_name = "computer"   AND DEPARTMENTS.department_name = "Computer Science"   AND DEGREE_PROGRAMS.degree_summary_name = "B.S./M.S. in Computer Science"   AND DEPARTMENTS.department_description!= "Computer Science" 
 SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE degree_programs.degree_summary_name = "2" INTERSECT   SELECT students.first_name,      students.middle_name,      students.last_name,      students.student_id FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree
;
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE degree_programs.degree_summary_name = "Bachelor"   AND transcript_contents.transcript_date = "2022-01-01"   AND transcript_contents.other_details = "Yes"; 
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_ enrolment_courses JOIN transcripts JOIN transcript_contents WHERE degree_programs.degree_summary_name = "Bachelors"   AND degree_programs.degree_summary_description = "Programme"   AND courses.course_name = "Bachelors"   AND courses.course_description = "Programme"   AND sections.section_name = "Bachelors"   AND semesters.semester_name = "Fall"   AND students.current_address_id = addresses.address_id   AND students.permanent_address_id = addresses.address_id   AND students.student_id = student_enrolment.student_id   AND student_enrolment.student_details = "Enrolled in a Bachelors program"   AND student_ enrolment_courses.student_course_id = student_enrolment_courses.student_course_id   AND transcripts.transcript_date = "Fall"   AND transcript_contents.student_course_id = student_ enrolment_courses.student_course_id   AND transcript_contents.transcript_date = "Fall" 
 SELECT DEGREE_PROGRAMS.degree_SUMMARY_NAME FROM DEGREE_PROGRAMS JOIN SECTIONS ON DEGREE_PROGRAMS.DEPARTMENT_ID = SECTIONS.COURSE_ID JOIN STUDENTS ON DEGREE_PROGRAMS.DEPARTMENT_ID = STUDENTS.Permanent_ADDRESS_ID JOIN STUDENT_ENROLLMENT ON DEGREE_PROGRAMS.DEPARTMENT_ID = STUDENT_ENROLLMENT.Degree_program_id JOIN STUDENT_ENROLLMENT_Courses ON DEGREE_PROGRAMS.DEPARTMENT_ID = STUDENT_ENROLLMENT.COURSE_ID JOIN TRANSCRIPTS ON DEGREE_PROGRAMS.DEPARTMENT_ID = TRANSCRIPTS.DEPARTMENT_ID JOIN TRANSCRIPT_CONTENTS ON DEGREE_PROGRAMS.DEPARTMENT_ID = TRANSCRIPT_CONTENTS.DEPARTMENT_ID WHERE TRANSCRIPTS.transcript_date > "2010-01-01" GROUP BY DEGREE_PROGRAMS.degree_SUMMARY_NAME ORDER BY count(*) DESC LIMIT 1; 
 SELECT degree_programs.degree_summary_name FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.course_id = degree_programs.course_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON sections.semester_id = semesters.semester_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.other_details = "Yes" GROUP BY degree_programs.degree_summary_name ORDER BY count(*) DESC LIMIT 1; 
 SELECT DEGREE_PROGRAMS.degree_SUMMARY_NAME,        DEGREE_PROGRAMS.Degree_SUMMARY_DESCRIPTION FROM DEGREE_PROGRAMS JOIN Sections ON DEGREE_PROGRAMS.degree_PROGRAM_ID = Sections.course_id JOIN Student_Enrolment ON Sections.section_name = Sections.section_name JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Addresses ON Addresses.address_id = Addresses.address_id JOIN Courses ON Courses.course_id = Courses.course_id JOIN Departments ON Courses.department_id = Courses.department_id JOIN Students ON Students.student_id = Student_Enrolment.student_id JOIN Addresses ON Addresses.address_id = Addresses.address_id WHERE Courses.course_description = "Computer Science" GROUP BY DEGREE_PROGRAMS.degree_SUMMARY_NAME ORDER BY count(*) DESC LIMIT 1; 
 SELECT Degree_Programs.degree_summary_name,        Degree_Programs.degree_summary_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.course_id = Degree_Programs.course_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Degree_Programs.student_program_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States" GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1 
 SELECT students.student_id,        students.first_name,        students.middle_name,        students.last_name,        count(*),        students.date_first_registered FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN semesters ON courses.semester_id = semesters.semester_id JOIN students ON students.current_address_id = addresses.address_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.transcript_date =     (SELECT transcript_date      FROM transcripts      WHERE transcript_id IN          (SELECT transcript_id           FROM transcript_contents           WHERE course_id IN               (SELECT course_id                FROM courses                WHERE department_id IN                    (SELECT department_id 
 SELECT students.first_name,        students.middle_name,        students.last_name,        students.student_id,        count(*) FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_enrolment_courses JOIN transcripts JOIN transcript_contents WHERE addresses.city = "San Francisco"   AND addresses.zip_postcode = "94107"   AND courses.course_name = "Computer Science"   AND departments.department_name = "Computer Science"   AND degree_programs.degree_summary_name = "Master of Science"   AND sections.section_name = "Introduction to Programming"   AND semesters.semester_name = "Fall"   AND students.date_first_registered = "1995-09-01"   AND students.date_left = "2000-09-01"   AND students.cell_mobile_number = "123-456-7890"   AND students.email_address = "student@example.com"   AND students.ssn = "123-456-7890"   AND students.other_student_details = "has a degree in Computer Science" GROUP BY students.student_id ORDER BY count(*) DESC LIMIT 1 
; 
 SELECT semester_name FROM semesters WHERE semester_description = "No students enrolled" 
 ; 
 SELECT Courses.course_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.department_id = Degree_Programs.department_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Courses.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Courses.course_description = "Some courses have some students enrolled"   AND Transcripts.transcript_date = "2015-12-31"   AND Transcript_Contents.other_details = "Some courses have some students enrolled
 SELECT Courses.course_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Courses.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT Courses.course_name FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id GROUP BY Courses.course_name ORDER BY count(*) DESC LIMIT 1 
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses ON courses.course_id = sections.course_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON degree_programs.degree_program_id = courses.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN students ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = "North Carolina"   AND addresses.zip_postcode = "00000"   AND courses.course_description = "Not registered"   AND courses.course_name = "Not registered"   AND courses.other_details = "Not registered"   AND courses.degree_summary_name = "Not registered"   AND courses.degree_summary_description = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"   AND courses.other_details = "Not registered"  
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses ON courses.course_id = addresses.course_id JOIN departments ON departments.department_id = courses.department_id JOIN degree_programs ON degree_programs.department_id = departments.department_id JOIN sections ON sections.course_id = courses.course_id JOIN semesters ON semesters.semester_id = sections.semester_id JOIN students ON students.student_id = sections.student_id WHERE addresses.city = "North Carolina"   AND addresses.zip_postcode = "288"   AND departments.country = "USA"   AND courses.course_name NOT IN     (SELECT course_name      FROM degree_programs      WHERE degree_program_id IN          (SELECT degree_program_id           FROM student_ enrolment           WHERE semester_id IN               (SELECT semester_id                FROM semesters                WHERE semester_name = "Fall 2015")))   AND students.date_left = "null"   AND students.cell_mobile_number = "null"   AND students.email_address = "null"   AND students.ssn = "null"   AND students.other_student_details = "null"; 
 SELECT transcript_date,        student_Enrolment.student_enrolment_id FROM addresses JOIN courses ON courses.course_id = student_Enrolment_courses.course_id JOIN departments ON departments.department_id = student_Enrolment_courses.department_id JOIN degree_programs ON degree_programs.degree_program_id = student_Enrolment_courses.degree_program_id JOIN sections ON sections.course_id = student_Enrolment_courses.course_id JOIN semesters ON semesters.semester_id = student_Enrolment_courses.semester_id JOIN students ON students.student_id = student_Enrolment_courses.student_id JOIN student_enrolment ON student_enrolment.student_id = student_Enrolment_courses.student_id JOIN student_Enrolment_Courses ON student_Enrolment_Courses.student_course_id = student_Enrolment.student_Enrolment_Courses.student_course_id JOIN transcripts ON transcripts.transcript_id = student_Enrolment_Courses.transcripts.transcript_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id IN     (SELECT course_id      FROM courses      GROUP BY course_id      H
 SELECT transcript_date,        student_Enrolment.student_enrolment_id FROM addresses JOIN courses ON courses.course_id = student_Enrolment_courses.course_id JOIN departments ON departments.department_id = student_Enrolment_courses.department_id JOIN degree_programs ON degree_programs.degree_program_id = student_Enrolment_courses.degree_program_id JOIN sections ON sections.course_id = student_Enrolment_courses.course_id JOIN semesters ON semesters.semester_id = student_Enrolment_courses.semester_id JOIN students ON students.student_id = student_Enrolment_courses.student_id JOIN student_enrolment ON student_enrolment.student_id = student_Enrolment_courses.student_id JOIN student_Enrolment_Courses ON student_Enrolment.student_enrolment_id = student_Enrolment_Courses.student_enrolment_id JOIN transcripts ON transcripts.transcript_id = student_Enrolment_Courses.transcripts.transcript_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.student_course_id >= 2 
 SELECT Students.cell_mobile_number FROM Addresses JOIN Courses JOIN Departments JOIN Degree_Programs JOIN Sections JOIN Semesters JOIN Students JOIN Student_Enrolment JOIN Student_Enrolment_Courses JOIN Transcripts JOIN Transcript_Contents WHERE Addresses.line_1 = "Timmothy"   AND Addresses.line_2 = "Ward"   AND Courses.course_name = "B.A. in Computer Science"   AND Departments.department_name = "Computer Science"   AND Degree_Programs.degree_summary_name = "Bachelor of Science in Computer Science"   AND Sections.section_name = "Fall 2015"   AND Semesters.semester_name = "Fall 2015"   AND Students.first_name = "Timmothy"   AND Students.middle_name = "Ward"   AND Students.last_name = "Ward"   AND Students.cell_mobile_number = "1234567890"   AND Students.email_address = "timothy.ward@example.com"   AND Students.ssn = "1234567890123"   AND Students.date_first_registered = "1995-01-01"   AND Students.date_left = "null"   AND Students.other_student_details = "
 SELECT Students.cell_mobile_number FROM Addresses JOIN Courses JOIN Departments JOIN Degree_Programs JOIN Sections JOIN Semesters JOIN Students JOIN Student_Enrolment JOIN Student_Enrolment_Courses JOIN Transcripts JOIN Transcript_Contents WHERE Addresses.line_1 = "Timmothy"   AND Addresses.line_2 = "Ward"   AND Addresses.city = "San Jose"   AND Addresses.zip_postcode = "95051"   AND Courses.course_name = "Computer Science"   AND Courses.course_description = "Database Systems"   AND Departments.department_name = "Database Systems"   AND Degree_Programs.degree_summary_name = "Master of Science in Database Systems"   AND Sections.section_name = "Database Systems"   AND Semesters.semester_name = "Fall"   AND Students.first_name = "Timmothy"   AND Students.middle_name = "Ward"   AND Students.last_name = "Ward"   AND Students.cell_mobile_number = "415-567-8123"   AND Students.email_address = "timothy.ward@example.com"   AND Students.ssn = "5678123456"   AND Students.date_first_registered = "1998
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_ enrolment_courses JOIN transcripts JOIN transcript_contents WHERE addresses.city = "San Francisco"   AND addresses.zip_postcode = "94107"   AND courses.course_name = "Computer Science"   AND departments.department_name = "Computer Science"   AND degree_programs.degree_summary_name = "Master of Science"   AND sections.section_name = "Introduction to Programming"   AND semesters.semester_name = "Fall 2015"   AND students.date_first_registered = "2015-09-01"   AND students.date_left = "2016-08-31"   AND students.other_student_details = "John Doe"   AND students.email_address = "john.doe@example.com"   AND students.cell_mobile_number = "123-456-7890"   AND transcripts.transcript_date = "2015-09-01"   AND transcript_contents.student_course_id = student_ enrolment_courses.student_course_id   AND student_ enrolment_courses.student_enrol
 SELECT students.first_name,        students.middle_name,        students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcript_contents ON student_ enrolment_courses.student_course_id = transcript_contents.student_course_id JOIN transcripts ON transcripts.transcript_id = transcript_contents.transcript_id WHERE transcripts.transcript_date = "2015-01-01" ORDER BY transcript_contents.transcript_date LIMIT 1; 
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_ enrolment_courses JOIN transcripts JOIN transcript_contents WHERE addresses.city = "San Francisco"   AND addresses.zip_postcode = "94107"   AND departments.department_name = "Computer Science"   AND degree_programs.degree_summary_name = "Master of Science"   AND sections.section_name = "Database Systems"   AND semesters.semester_name = "Fall"   AND students.date_first_registered = "1985-09-24 14:47:58"   AND students.date_left = "1989-09-24 14:47:58"   AND students.other_student_details = "John Smith"   AND students.cell_mobile_number = "415-123-4567"   AND students.email_address = "john.smith@example.com"   AND students.ssn = "123-456-7890"   AND transcripts.transcript_date = "1989-09-24 14:47:58"   AND transcript_contents.student_course_id = "
 SELECT students.first_name,        students.middle_name,        students.last_name FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_ enrolment_courses JOIN transcripts JOIN transcript_contents WHERE addresses.city = "San Francisco"   AND addresses.zip_postcode = "94107"   AND courses.course_name = "School Graduation"   AND degree_programs.degree_summary_name = "School Graduation"   AND sections.section_name = "School Graduation"   AND semesters.semester_name = "Fall"   AND students.date_first_registered = "1995-12-31"   AND students.date_left = "2000-09-24"   AND students.other_student_details = "San Francisco State University"   AND students.cell_mobile_number = "415-123-4567"   AND students.email_address = "sfsu@example.com"   AND students.ssn = "123-456-7890"   AND transcript_contents.transcript_date = "1995-12-31"   AND transcript_contents.other_details = "San Francisco State University"   AND transcript_contents.transcript_date = "
 SELECT students.first_name,        students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.city!= students.current_address_id   AND addresses.zip_postcode!= students.current_address_id   AND addresses.state_province_county!= students.current_address_id   AND addresses.country!= students.current_address_id 
 SELECT students.first_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.line_2!= students.current_address_id 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2,        Addresses.line_3,        Addresses.city,        Addresses.zip_postcode,        Addresses.state_province_county,        Addresses.country,        Addresses.other_address_details FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcripts ON Courses.course_id = Transcripts.course_id JOIN Transcript_Contents ON Courses.course_id = Transcript_Contents.course_id WHERE Courses.course_name = "BBA" GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1; 
 SELECT Addresses.address_id,        Addresses.line_1,        Addresses.line_2 FROM Addresses JOIN Courses ON Addresses.course_id = Courses.course_id JOIN Departments ON Addresses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Degree_Programs.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Student_Enrolment.student_id = Courses.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.transcript_id = Transcript_Contents.transcript_id WHERE Transcript_Contents.student_course_id = Courses.course_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1 
 SELECT avg(transcript_date) FROM transcripts WHERE transcript_contents IS NOT NULL GROUP BY transcript_contents ORDER BY avg(transcript_date) DESC LIMIT 1; 
 SELECT avg(Transcripts.transcript_date) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcripts ON Student_Enrolment.student_id = Transcripts.student_id JOIN Transcript_Contents ON Student_Enrolment.student_course_id = Transcript_Contents.student_course_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Addresses.other_address_details = "San Francisco, CA"   AND Addresses.line_1 = "San Francisco"   AND Addresses.line_2 = "California"   AND Addresses.line_3 = "United States"   AND Courses.course_description =
 SELECT DEGREE_PROGRAMS.degree_SUMMARY_NAME,        DEGREE_PROGRAMS.degree_SUMMARY_DESCRIPTION,        TRANSCRIPTS.transcript_date FROM DEGREE_PROGRAMS JOIN TRANSCRIPTS ON DEGREE_PROGRAMS.degree_PROGRAM_ID = TRANSCRIPTS.transcript_id WHERE DEGREE_PROGRAMS.degree_SUMMARY_NAME = "First" ORDER BY TRANSCRIPTS.transcript_date LIMIT 1 
 SELECT min(transcript_date),        transcript_contents FROM (departments) JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN sections ON degree_programs.degree_program_id = sections.course_id JOIN students ON students.current_address_id = sections.current_section_id JOIN student_enrolment ON student_enrolment.semester_id = sections.semester_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE transcript_contents.other_details = "Yes" GROUP BY transcript_contents.transcript_id 
 SELECT count(*) FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.transcript_id JOIN Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Addresses ON Courses.course_id = Courses.course_id JOIN Students ON Students.student_id = Courses.student_id WHERE Courses.course_description = "Transcripts"   AND Courses.course_name = "Released"   AND Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States"   AND Addresses.other_address_details = "Yes"   AND Students.date_first_registered = "1990-01-01"   AND Students.date_left = "2000-12-31"; 
 SELECT count(*) FROM (departments) JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN sections ON degree_programs.degree_program_id = sections.course_id JOIN students ON students.current_address_id = sections.current_address_id JOIN student_enrolment ON student_enrolment.semester_id = sections.semester_id JOIN student_Enrolment_Courses ON student_Enrolment.student_id = student_Enrolment_Courses.student_id JOIN Transcripts ON student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE departments.department_name = "Computer Science"   AND sections.section_name = "Fall 2015"   AND Transcripts.transcript_date = "2015-12-31"   AND Transcript_Contents.course_description = "Introduction to Database Systems"   AND Transcript_Contents.course_summary_name = "Introduction to Database Systems"; 
 SELECT transcript_date FROM DEGREE_PROGRAMS JOIN SECTIONS ON DEGREE_PROGRAMS.degree_PROGRAM_ID = SECTIONS.course_id JOIN STUDENTS ON DEGREE_PROGRAMS.degree_PROGRAM_ID = STUDENTS.degree_PROGRAM_ID JOIN TRANSCRIPTS ON DEGREE_PROGRAMS.degree_PROGRAM_ID = TRANSCRIPTS.degree_PROGRAM_ID JOIN TRANSCRIPT_CONTENTS ON DEGREE_PROGRAMS.degree_PROGRAM_ID = TRANSCRIPT_CONTENTS.student_course_id WHERE TRANSCRIPTS.other_details = "Last" ORDER BY TRANSCRIPTS.transcript_date DESC LIMIT 1; 
 SELECT transcript_date FROM DEGREE_PROGRAMS JOIN Sections ON DEGREE_PROGRAMS.department_id = Sections.department_id JOIN Students ON Students.student_id = DEGREE_PROGRAMS.student_program_id JOIN Transcripts ON DEGREE_PROGRAMS.degree_program_id = Transcripts.degree_program_id JOIN Transcript_Contents ON DEGREE_PROGRAMS.degree_program_id = Transcript_Contents.degree_program_id WHERE Students.date_left = "2015-12-31"   AND Students.first_name = "SARAH"   AND Students.middle_name = "AUGUST"   AND Students.last_name = "MAYNARD"   AND Transcript_Contents.student_course_id = "CSE-211"   AND DEGREE_PROGRAMS.course_description = "Data Structures and Algorithms"   AND DEGREE_PROGRAMS.course_name = "Introduction to Programming"   AND DEGREE_PROGRAMS.other_details = "University of Michigan"   AND DEGREE_PROGRAMS.state_province_county = "MI"   AND DEGREE_PROGRAMS.country = "USA"; 
 SELECT count(*),        student_Enrolment_Courses.course_id FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Degree_Programs ON Courses.degree_program_id = Degree_Programs.degree_program_id JOIN Sections ON Courses.course_id = Sections.course_id JOIN Semesters ON Courses.semester_id = Semesters.semester_id JOIN Students ON Students.student_id = Courses.student_id JOIN Student_Enrolment ON Courses.course_id = Student_Enrolment.course_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_id = Student_Enrolment_Courses.student_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States" GROUP BY student_Enrolment_Courses.course_id ORDER BY count(*) DESC LIMIT 5; 
 SELECT max(course_id),        max(student_course_id) FROM (departments JOIN degree_programs ON departments.department_id = degree_programs.department_id JOIN sections ON degree_programs.degree_program_id = sections.course_id JOIN transcripts ON transcripts.transcript_id = sections.section_id JOIN student_ enrolment_courses ON student_ enrolment_courses.student_course_id = degree_programs.course_id JOIN student_ enrolment ON student_ enrolment.student_id = student_ enrolment_courses.student_id WHERE departments.department_name = "Computer Science"   AND sections.section_name = "Introduction to Programming" GROUP BY course_id 
 SELECT transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_ enrolment_courses ON student_ enrolment_courses.student_course_id = transcript_contents.student_course_id WHERE transcript_contents.other_details = "result" GROUP BY transcript_date ORDER BY count(*) ASC LIMIT 1 
 SELECT transcript_date,        student_enrolment.student_id FROM student_enrolment JOIN transcript_contents ON student_enrolment.student_course_id = transcript_contents.student_course_id JOIN transcripts ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_contents.student_course_id ORDER BY count(*) ASC LIMIT 1 
 SELECT semesters.semester_name FROM addresses JOIN courses JOIN departments JOIN degree_programs JOIN sections JOIN semesters JOIN students JOIN student_enrolment JOIN student_ enrolment_courses JOIN transcripts JOIN transcript_contents WHERE addresses.city = "San Francisco"   AND addresses.state_province_county = "California"   AND courses.course_name = "Master"   AND courses.course_description = "Bachelor"   AND students.first_name = "Emily"   AND students.middle_name = "Ava"   AND students.last_name = "Lena"   AND students.cell_mobile_number = "1234567890"   AND students.email_address = "aeva@university.edu"   AND students.ssn = "1234567890123"   AND students.date_first_registered = "1995-01-01"   AND students.date_left = "2000-01-01"   AND courses.course_name = "Master"   AND courses.course_description = "Bachelor"   AND departments.department_name = "Computer Science"   AND departments.department_description = "Bachelor"   AND degree_programs.degree_summary_name = "Master"   AND degree_programs.degree_summary_description = "Bachelor" 
 SELECT semesters.semester_name FROM addresses JOIN courses ON addresses.address_id = courses.course_id JOIN departments ON courses.department_id = departments.department_id JOIN degree_programs ON courses.degree_program_id = degree_programs.degree_program_id JOIN sections ON courses.course_id = sections.course_id JOIN students ON students.student_id = sections.student_id JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN student_ enrolment_courses ON student_enrolment.student_id = student_ enrolment_courses.student_id JOIN transcripts ON student_ enrolment_courses.transcript_id = transcripts.transcript_id JOIN transcript_contents ON student_ enrolment_courses.transcript_id = transcript_contents.transcript_id WHERE departments.department_name = "Masters"   AND departments.department_description = "Bachelors"   AND transcripts.transcript_date = "2022-01-01"   AND transcript_contents.student_course_id = courses.course_id   AND courses.course_name = "Masters"   AND courses.course_name = "Bachelors" 
 SELECT count(DISTINCT Addresses.line_1) FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Addresses ON Addresses.address_id = Courses.department_address_id WHERE Courses.course_description = "Bachelor of Science in Computer Science"   AND Courses.course_name = "Computer Science"   AND Addresses.city = "San Jose"   AND Addresses.zip_postcode = "95051"   AND Addresses.state_province_county = "Santa Clara"   AND Addresses.country = "USA"; 
 SELECT DISTINCT Addresses.line_1,                 Addresses.line_2,                 Addresses.line_3 FROM Addresses JOIN Students ON Addresses.current_address_id = Students.current_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcripts ON Student_Enrolment_Courses.transcript_id = Transcripts.transcript_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id WHERE Transcripts.transcript_date > "2010-01-01"   AND Transcripts.other_details = "yes"   AND Addresses.city = "San Francisco"   AND Addresses.state_province_county = "California"   AND Addresses.country = "United States" 
 ; 
;
 ;
 SELECT Courses.course_description FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id JOIN Departments ON Courses.department_id = Departments.department_id JOIN Sections ON Courses.course_id = Sections.course_id AND Courses.section_id = Sections.section_id WHERE Addresses.line_3 = "h" 
 ; 
 ; 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.Channel = Cartoon.Channel ORDER BY Cartoon.Title 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.Channel = Cartoon.Channel ORDER BY Cartoon.Title 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones"   AND TV_series.18_49_Rating_Share > 0.5   AND TV_series.Viewers_m > 1000   AND TV_Channel.Country = "United Kingdom"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Cartoon"; 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones"   AND TV_series.18_49_Rating_Share > 0.5   AND TV_series.Viewers_m > 1000   AND TV_Channel.Country = "United Kingdom"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Cartoon" 
 SELECT COUNT (DISTINCT CARTOON.Title) FROM TV_CHANNEL JOIN TV_series ON TV_CHANNEL.id = TV_series.Channel JOIN CARTOON ON TV_CHANNEL.id = CARTOON.id WHERE CARTOON.Written_by = "Joseph Kuhr"   AND TV_CHANNEL.Country = "Canada"   AND TV_CHANNEL.Language = "English"   AND TV_series.Air_Date = "1985-01-01"   AND TV_series.18_49_Rating_Share > 0.5   AND TV_series.Viewers_m > 1000   AND TV_CHANNEL.Content = "Cartoon"; 
 SELECT COUNT (DISTINCT TV_Channel CHANNEL) FROM TV_CHANNEL JOIN TV_series ON TV_CHANNEL.id = TV_series.channel JOIN CARTOON ON TV_CHANNEL.id = CARTOON.id WHERE CARTOON.Written_by = "Joseph Kuhr"   AND TV_series.18_49_Rating_Share > 0.5   AND TV_series.Viewers_m > 1000   AND TV_CHANNEL.Country = "United States"   AND TV_CHANNEL.Language = "English"   AND TV_CHANNEL.Content = "Cartoon"; 
 SELECT Cartoon.Title,        Cartoon.Directed_by FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id ORDER BY TV_series.Air_Date 
 SELECT Cartoon.Title,        Cartoon.Directed_by FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id ORDER BY TV_series.Original_air_date 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code WHERE Cartoon.Directed_by = "Ben Jones"   OR Cartoon.Directed_by = "Brandon Vietti" 
 SELECT Cartoon.Title FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code WHERE Cartoon.Directed_by = "Ben Jones"   OR Cartoon.Directed_by = "Brandon Vietti" 
 SELECT TV_Channel.Country,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_Channel.id GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1; 
 SELECT TV_Channel.Country,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1; 
 SELECT count(DISTINCT TV_channel_series_name),        TV_channel_content FROM TV_channel JOIN TV_series ON TV_channel_id = TV_series.channel_id JOIN TV_channel ON TV_channel_id = TV_series.channel_id JOIN cartoon ON TV_channel_id = cartoon.channel_id GROUP BY TV_channel_series_name 
 SELECT count(DISTINCT TV_channel_series.title),        count(DISTINCT TV_channel_series.content) FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel_id JOIN TV_channel ON TV_channel.id = TV_series.channel_id JOIN cartoon ON TV_channel.channel = cartoon.channel GROUP BY TV_channel_series.title GROUP BY TV_channel_series.content 
 SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_Channel.id WHERE Cartoon.Title = "Sky Radio"   AND Cartoon.Directed_by = "David Attenborough"   AND Cartoon.Written_by = "David Attenborough"   AND TV_Channel.Country = "United Kingdom"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Radio"   AND TV_Channel.Hight_definition_TV = "HD"   AND TV_Channel.Pay_per_view_PPV = "Yes"   AND TV_Channel.Package_Option = "Yes"; 
 SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Written_by WHERE Cartoon.Title = "Sky Radio"   AND Cartoon.Directed_by = "David Mirkin"   AND TV_Channel.Country = "United Kingdom"   AND TV_Channel.Language = "English"   AND TV_Channel.Content = "Radio"; 
 SELECT TV_Channel.package_option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.title = "Sky Radio" 
 SELECT TV_Channel.package_option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.title = "Sky Radio" 
 SELECT count(*) FROM TV_channel WHERE language = "English"   AND content = "TV Series"   AND channel = "Cartoon" 
 SELECT count(*) FROM TV_channel WHERE language = "English"   AND country = "United States"   OR country = "United Kingdom"   OR country = "Canada"   OR country = "Australia"   OR country = "Germany"   OR country = "France"   OR country = "Italy"   OR country = "Spain"   OR country = "Sweden"   OR country = "Switzerland"   OR country = "Netherlands"   OR country = "Belgium"   OR country = "Denmark"   OR country = "Norway"   OR country = "Austria"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland"   OR country = "Switzerland" 
 SELECT TV_Channel.Language,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code GROUP BY TV_Channel.Language ORDER BY COUNT(*) ASC LIMIT 1; 
 SELECT TV_Channel.Language,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code GROUP BY TV_Channel.Language ORDER BY COUNT(*) ASC LIMIT 1; 
 SELECT TV_Channel.Language,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_Channel.id GROUP BY TV_Channel.Language 
 SELECT TV_Channel.Country,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_Channel.id WHERE TV_series.18_49_Rating_Share > 0.5 GROUP BY TV_Channel.Country 
 SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.id = TV_series.production_code WHERE Cartoon.Title = "The Rise of the Blue Beetle!" 
 SELECT TV_channel.series_name FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.title = "The Rise of the Blue Beetle"   AND cartoon.directed_by = "Robert Rodriguez"   AND cartoon.written_by = "Robert Rodriguez"   AND TV_series.air_date = "2005-11-18"   AND TV_series.rating = "TV-14"   AND TV_series.share = "TV-14"   AND TV_series.viewers_m = "TV-14"   AND TV_channel.country = "Canada"   AND TV_channel.language = "English"   AND TV_channel.pixel_aspect_ratio_par = "16:9"   AND TV_channel.hight_definition_tv = "HD"   AND TV_channel.pay_per_view_ppv = "TV-14"   AND TV_channel.package_option = "TV-14"; 
 SELECT CARTOON.Title FROM TV_CHANNEL JOIN TV_series ON TV_CHANNEL.id = TV_series.Channel JOIN CARTOON ON TV_CHANNEL.Channel = CARTOON.Channel WHERE TV_series.Series_name = "Sky Radio" 
 SELECT CARTOON.Title FROM TV_CHANNEL JOIN TV_series ON TV_CHANNEL.id = TV_series.Channel JOIN CARTOON ON TV_CHANNEL.Channel = CARTOON.Channel WHERE TV_CHANNEL.Series_name = "Sky Radio" 
 SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN TV_series ON TV_series.Episode = TV_series.Episode JOIN TV_Channel ON TV_channel.id = TV_series.Channel WHERE TV_series.Rating > 0.5 ORDER BY TV_series.Rating DESC 
 SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_Channel.id ORDER BY Cartoon.18_49_Rating_Share DESC 
 SELECT TV_series.episode,        TV_series.rating FROM TV_series JOIN TV_channel ON TV_series.channel = TV_channel.id JOIN TV_series ON TV_series.channel = TV_series.channel JOIN TV_series ON TV_series.channel = TV_series.channel JOIN TV_channel ON TV_channel.id = TV_series.channel WHERE TV_series.18_49_Rating_Share > 0.5 ORDER BY TV_series.18_49_Rating_Share DESC LIMIT 3; 
 SELECT TV_series.episode,        TV_series.rating FROM TV_series JOIN channel ON channel.id = TV_series.channel JOIN TV_channel ON channel.id = TV_channel.id JOIN TV_series ON channel.id = TV_series.channel WHERE channel.country = "United States" ORDER BY TV_series.rating DESC LIMIT 3; 
 SELECT min(18_49_Rating_Share),        max(18_49_Rating_Share) FROM TV_series WHERE Channel IN     (SELECT Channel      FROM TV_Channel      WHERE Language = "English"        OR Language = "French"        OR Language = "Spanish"        OR Language = "German"        OR Language = "Italian"        OR Language = "Portuguese"        OR Language = "Dutch"        OR Language = "Swedish"        OR Language = "Danish"        OR Language = "Norwegian"        OR Language = "Finnish"        OR Language = "Swedish"        OR Language = "Dutch"        OR Language = "Swedish"        OR Language = "Danish"        OR Language = "Norwegian"        OR Language = "Finnish"        OR Language = "Swedish"        OR Language = "Dutch"        OR Language = "Swedish"        OR Language = "Danish"        OR Language = "Norwegian"        OR Language = "Finnish"        OR Language = "Swedish"        OR Language = "Dutch"        OR Language = "Swedish" 
 SELECT max(18_49_Rating_Share),        min(18_49_Rating_Share) FROM TV_series WHERE Channel IN     (SELECT Channel      FROM TV_Channel      WHERE series_name = "Cartoon") 
 SELECT TV_series.air_date FROM TV_series JOIN TV_channel ON TV_series.channel = TV_channel.id WHERE TV_series.episode = "A Love of a Lifetime" 
 SELECT TV_series.Air_Date FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Written_by WHERE Cartoon.Title = "A Love of a Lifetime"   AND TV_series.Rating = "8.8"   AND TV_series.Share = "0.5"; 
 SELECT TV_series.Weekly_Rank FROM TV_series JOIN Cartoon ON Cartoon.id = TV_series.Written_by JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "A Love of a Lifetime"   AND TV_series.Episode = "A Love of a Lifetime"; 
 SELECT TV_series.Weekly_Rank FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Written_by WHERE Cartoon.Title = "A Love of a Lifetime"   AND TV_series.Episode = "A Love of a Lifetime"; 
 SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.Original_air_date = "A Love of a Lifetime"   AND TV_series.episode = "A Love of a Lifetime"; 
 SELECT TV_series.episode FROM TV_series JOIN TV_channel ON TV_series.channel = TV_channel.id WHERE TV_series.title = "A Love of a Lifetime"; 
 SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Country = "United Kingdom"   AND TV_Channel.Language = "English"   AND TV_series.Series_name = "Sky Radio"; 
 SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Country = "Australia"   AND TV_series.Title = "Sky Radio"; 
 SELECT Cartoon.directed_by,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_Channel.id = Cartoon.id GROUP BY Cartoon.directed_by 
 SELECT Cartoon.directed_by,        COUNT(*) FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_Channel.id = Cartoon.id GROUP BY Cartoon.directed_by ORDER BY COUNT(*) DESC; 
 SELECT TV_Channel.production_code,        TV_Channel.channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.id = TV_series.production_code WHERE TV_series.air_date = (SELECT max(Air_Date)                             FROM TV_series) ORDER BY Cartoon.18_49_Rating_Share DESC LIMIT 1; 
 SELECT TV_Channel.production_code,        TV_Channel.channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.id = TV_series.production_code ORDER BY TV_series.air_date DESC LIMIT 1; 
 SELECT TV_Channel.package_option,        TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.channel = TVChannel.id WHERE TV_series.18_49_Rating_Share > 0.5   AND TV_series.Viewers_m > 1000 ORDER BY TVChannel.pixel_aspect_ratio_PAR DESC LIMIT 1; 
 SELECT TV_Channel.package_option,        TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel WHERE TV_series.hight_definition_tv = "Yes" UNION SELECT TV_Channel.package_option,        TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TVChannel.id = TV_series.channel WHERE TV_series.18_49_rating_share > 0.5 UNION SELECT TVChannel.package_option,        TVChannel.series_name FROM TVChannel JOIN Cartoon ON TVChannel.channel = Cartoon.channel WHERE Cartoon.directed_by = "John Woo"   AND Cartoon.written_by = "John Woo"   AND Cartoon.original_air_date = "2000-01-01"   AND Cartoon.production_code = 1   AND Cartoon.title = "The Matrix"   AND Cartoon.title = "The Matrix"   AND Cartoon.title = "The Matrix"   AND Cartoon.title = "The Matrix" 
 SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code WHERE Cartoon.Written_by = "Todd Casey"   AND Cartoon.Title = "The Adventures of Tom and Jerry"; 
 SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon CHANNEL WHERE Cartoon.Written_by = "Todd Casey" 
 SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Production_code WHERE Cartoon.Written_by!= "Todd Casey" 
 SELECT Country FROM TV_Channel WHERE Channel NOT IN     (SELECT Channel      FROM Cartoon      WHERE Written_by = "Todd Casey") 
 SELECT TV_channel.series_name,        TV_channel.country FROM TV_channel JOIN TV_series ON TV_channel.id = TV_series.channel JOIN cartoon ON TV_channel.id = cartoon.channel WHERE cartoon.directed_by = "Ben Jones"   AND cartoon.written_by = "Michael Chang" 
 SELECT TV_Channel.series_name,        TV_Channel.country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.id = TV_series.production_code WHERE Cartoon.directed_by = "Ben Jones"   AND Cartoon.written_by = "Michael Chang" 
 SELECT TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE TV_series.18_49_Rating_Share > 0.5   AND TV_series.Watchers_m > 1000   AND TV_Channel.Language!= "English" 
 SELECT TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.pixel_aspect_ratio_PAR,        TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.id = TV_series.Written_by WHERE Cartoon.Original_air_date = "1989-12-25"   AND Cartoon.Directed_by = "John Woo"   AND TV_series.Rating = "TV-14"   AND TV_series.Share = "TV-14"   AND TV_series.Viewers_m = "TV-14"   AND TV_series.Weekly_Rank = "TV-14"   AND TV_Channel.Language = "not English" 
 SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN tv_channel ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_channel.id = cartoon.channel GROUP BY tv_channel.id HAVING count(*) > 2 
 SELECT tv_channel.id FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_channel.id = cartoon.channel GROUP BY tv_channel.id HAVING count(*) > 2 
 SELECT id FROM TV_channel WHERE channel NOT IN     (SELECT channel      FROM cartoon      WHERE directed_by = "Ben Jones") 
 SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT TV_Channel.id FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.directed_by = "Ben Jones"   AND Cartoon.written_by = "Ben Jones"   AND TV_Channel.country = "United Kingdom"   AND TV_Channel.language = "English"   AND TV_Channel.content = "Cartoon"   AND TV_Channel.pixel_aspect_ratio_PAR = "16:9"   AND TV_Channel.hight_definition_TV = "HD"   AND TV_Channel.pay_per_view_PPV = "Yes"   AND TV_Channel.package_option = "Yes" 
 SELECT TV_Channel.package_option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.channel JOIN Cartoon ON TV_Channel.id = Cartoon.channel WHERE Cartoon.directed_by!= "Ben Jones" 
 SELECT TV_Channel.package_option FROM TV_Channel EXCEPT SELECT TV_Channel.package_option FROM TV_Channel JOIN Cartoon ON TV_Channel.channel = Cartoon.channel WHERE Cartoon.directed_by = "Ben Jones" 
 SELECT count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date >= '1990-01-01'   AND people.Name!= 'David Williams' 
 SELECT count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date >= '1990-01-01'   AND people.Name!= 'David Williams' 
 SELECT poker_player.Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Birth_Date DESC 
 SELECT poker_player.Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC 
 SELECT poker_player.Best_Finish,        poker_player.Final_Table_Made FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT poker_player.final_table_made,        poker_player.best_finish FROM poker_player JOIN people ON poker_player.people_id = people.people_id 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Birth_Date >= people.Birth_Date   AND people.Name!= "Unknown" 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1 
 SELECT max(poker_player.final_table_made) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.Earnings < 200000 
 SELECT max(poker_player.final_table_made) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.Earnings < 200000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player_Final_Table_Made ASC 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC 
 SELECT people.birth_date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1 
 SELECT people.birth_date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
 SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC 
 SELECT people.Name,        count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name 
 SELECT people.Name,        people.Nationality,        count(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality ORDER BY count(*) DESC LIMIT 1 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING COUNT(*) >= 2 
 SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Nationality HAVING COUNT(*) >= 2 
 SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Name ASC 
 SELECT people.Name,        people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Name 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= "Russia" 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality!= 'Russia' 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Best_Finish = 0   OR poker_player.Money_Rank = 0 
 SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Best_Finish = 1   AND poker_player.Money_Rank = 1   AND poker_player.Earnings = 0 
 SELECT DISTINCT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT count(DISTINCT people.Nationality) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID 
 SELECT count(DISTINCT area_code_state.state) FROM area_code_state JOIN contestants ON area_code_state.area_code = contestants.contestant_number JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE votes.phone_number NOT IN     (SELECT phone_number      FROM contestants      WHERE contestant_number IN          (SELECT contestant_number           FROM contestants           WHERE contestant_name = "John")) 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number ORDER BY CONTESTANTS.contestant_name DESC 
 SELECT DISTINCT votes.vote_id,                 votes.phone_number,                 area_code_state.state FROM area_code_state_state JOIN contestants ON area_code_state_state.area_code_state = contestants.area_code_state JOIN votes ON area_code_state_state.area_code_state = votes.state AND contestants.contestant_number = votes.contestant_number 
 SELECT max(area_code),        min(area_code) FROM area_code_state 
 SELECT votes.created FROM area_code_state JOIN contestants ON area_code_state.area_code = contestants.area_code JOIN votes ON area_code_state.state = votes.state WHERE area_code_state.state = "CA" ORDER BY votes.created DESC LIMIT 1 
 SELECT DISTINCT CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name!= 'Jessie Alloway' 
 SELECT DISTINCT AREA_CODE_STATE.state,                 votes.created FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.area_code JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number GROUP BY CONTESTANTS.contestant_number HAVING COUNT(*) >= 2 
 SELECT CONTESTANTS.contestant_number,        CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number GROUP BY CONTESTANTS.contestant_number ORDER BY count(*) ASC LIMIT 1 
 SELECT COUNT(*) FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number WHERE AREA_CODE_STATE.state = 'NY'   OR AREA_CODE_STATE.state = 'CA' 
 SELECT COUNT(*) FROM AREA_CODE_STATE WHERE state NOT IN     (SELECT state      FROM CONTESTANTS      JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number      WHERE VOTES.phone_number = "null") 
 SELECT area_code_state.state FROM area_code_state JOIN contestants ON area_code_state.area_code = contestants.contestant_number JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY area_code_state.state ORDER BY count(*) DESC LIMIT 1 
 SELECT votes.created,        area_code_state.state,        votes.phone_number FROM area_code_state_state JOIN contestants ON area_code_state_state.area_code = contestants.area_code JOIN votes ON area_code_state_state.area_code = votes.contestant_number WHERE contestants.contestant_name = "Tabatha Gehling" 
 SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = "Tabatha Gehling"   AND CONTESTANTS.contestant_name = "Kelly Clauss" 
 SELECT CONTESTANTS.contestant_name FROM AREA_CODE_STATE JOIN CONTESTANTS ON AREA_CODE_STATE.area_code = CONTESTANTS.contestant_number JOIN VOTES ON VOTES.phone_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name LIKE '%Al%' 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.IndepYear > 1950 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = "New York City"   AND city.Name > 1950 
 SELECT COUNT(*) FROM country WHERE GovernmentForm = "Republic"   AND countrylanguage.IsOfficial = "Yes"; 
 SELECT COUNT(*) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.GovernmentForm = "Republic"   AND country.LifeExpectancy > 25   AND country.GNP > 100000   AND country.GNPOld > 100000   AND country.LocalName!= "United Kingdom"   AND country.Capital!= "London"   AND country.Name!= "United States"   AND country.Name!= "Canada"   AND country.Name!= "Australia"   AND country.Name!= "United Kingdom"; 
 SELECT sum(country.region) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "Caribbean"   AND country.surfacearea > 500; 
 SELECT SUM (country.region) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "Caribbean" GROUP BY city.countrycode ORDER BY SUM (country.region) DESC; 
 SELECT country.continent FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Anguilla"   AND city.district = "Westerly"   AND countrylanguage.isofficial = "yes"   AND countrylanguage.percentage > 0.5; 
 SELECT country.continent FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.name = "Anguilla"   AND city.district = "Shelter Island"   AND countrylanguage.isofficial = "yes"   AND countrylanguage.percentage > 0.1; 
 SELECT country.region FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE city.capital = "Kabul"   AND countrylanguage.percentage > 0.5 
 SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.capital = "Kabul"   AND country.localname = "Afghanistan"; 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.code2 WHERE country.Name = "Aruba"   AND countrycontinent = "North America"   AND country.region = "Caribbean" GROUP BY countrylanguage.language ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Caribbean"   AND country.localname = "Aruba"   AND country.population > 150000 GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1; 
 SELECT country.lifeexpectancy,        country.gnp FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "South America"   AND country.name = "Brazil"   AND country.countrycode = "BR" 
 SELECT country.lifeexpectancy,        country.gnp FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "South America"   AND country.name = "Brazil"; 
 SELECT country.region,        country.population FROM city JOIN country ON city.countrycode = country.code WHERE country.Name = "Angola"   AND country.Code = "AG" 
 SELECT country.region,        country.population FROM city JOIN country ON city.countrycode = country.code WHERE country.Name = "Angola"   AND country.Name = "Angola"   AND country.CountryCode = "AO" 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Central Africa" 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Central Africa"   AND country.continent = "Africa"; 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrycontinent = "Asia"   AND countryregion = "Asia" ORDER BY country.lifeexpectancy LIMIT 1; 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Asia"   AND country.lifeexpectancy =     (SELECT min(lifeexpectancy)      FROM country      WHERE region = "Asia") 
 SELECT sum(city.population),        max(country.gnp) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Asia" 
 SELECT countrylanguage.Percentage,        country.LifeExpectancy,        country.GNP FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrycontinent = "Asia" ORDER BY countrylanguage.Percentage DESC LIMIT 1; 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Africa"   AND country.governmentform = "Republic" 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Africa"   AND country.governmentform = "Republic" 
 SELECT SUM (country.SurfaceArea) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia"   AND country.Continent = "Europe"; 
 SELECT sum(country.region) FROM city JOIN country ON city.countrycode = country.code WHERE countrycontinent = "Asia"   OR countrycontinent = "Europe" 
 SELECT city.population FROM city JOIN country ON city.countrycode = country.code WHERE city.district = "Gelderland"   AND country.region = "Europe"   AND country.continent = "Europe"   AND country.localname = "Gelderland"; 
 SELECT sum(city.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = "Gelderland"   AND country.Name = "Netherlands"; 
 SELECT avg(country.gnp),        sum(country.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.governmentform = 'US' 
 SELECT avg(country.gnp),        sum(country.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "US"   AND country.localname = "US" 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.language.code WHERE countryregion = "Asia"   AND country.lifeexpectancy > 25   AND country.gnp > 100000   AND country.gnpoold > 100000   AND country.localname!= "China"   AND country.headofstate!= "China"   AND country.capital!= "Beijing"   AND country.countrycode!= "China"; 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.language.code WHERE countryregion = "Asia"   AND countrycontinent = "Asia"   AND country.surfacearea > 5000 GROUP BY countrylanguage.language ORDER BY count(*) DESC; 
 SELECT count(*) FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Africa"   AND country.Region = "North"   AND country.GovernmentForm = "Type of government" 
 SELECT count(DISTINCT countrygovernmentform) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.language = countrylanguage.language WHERE countrycontinent = "Africa"   AND countryregion = "Africa"   AND country.headofstate!= "null"   AND countrycapital!= "null"   AND country.population > 0   AND country.gnp > 0   AND country.gnpoold > 0   AND country.localname!= "null"; 
 SELECT SUM (countrylanguage.Percentage) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Aruba"   AND countrylanguage.IsOfficial = "Yes"; 
 SELECT countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Aruba"   AND countrylanguage.IsOfficial = "Yes"; 
 SELECT countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"   AND countrylanguage.IsOfficial = "Yes"   AND country.Name = "Afghanistan" UNION SELECT countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"   AND countrylanguage.IsOfficial = "No" 
 SELECT countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"   AND countrylanguage.IsOfficial = "yes"   AND country.Name = "Afghanistan"   AND country.Name = "Afghanistan"; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code GROUP BY city.District ORDER BY count(*) DESC LIMIT 1; 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrycode WHERE countrylanguage.percentage =     (SELECT max(percentage)      FROM countrylanguage) 
 SELECT country.continent FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.code2 GROUP BY country.continent ORDER BY SUM (countrylanguage.percentage) DESC LIMIT 1; 
 SELECT countrycontinent FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.code2 GROUP BY countrycontinent ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1; 
 SELECT COUNT(*) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "Dutch"   AND countrylanguage.IsOfficial = "Yes"   AND country.Name = "English" 
 SELECT count(*) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "English"   AND countrylanguage.Percentage > 50   AND country.Name = "Netherlands"   AND country.GovernmentForm = "Official"   AND country.HeadOfState = "King Willem-Alexander"   AND country.Capital = "Amsterdam"   AND city.District = "Amsterdam"   AND city.Name = "Amsterdam"   AND city.Population > 150000; 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English"   AND countrylanguage.language = "French" 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   AND countrylanguage.language = 'French' 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   AND countrylanguage.language = 'French' 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Language = "English"   AND countrylanguage.Language = "French" 
 SELECT DISTINCT country.continent FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Chinese"   AND countrylanguage.percentage > 0.1; 
 SELECT COUNT(*) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "Chinese"   AND countrycontinent = "Asia"   AND countryregion = "Asia"; 
 SELECT country.region FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   OR countrylanguage.language = 'Dutch' 
 SELECT country.region FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch'   OR countrylanguage.language = 'English' 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Language = "English"   OR countrylanguage.Language = "Dutch" 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Language = "English"   OR countrylanguage.Language = "Dutch" 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code WHERE countrycontinent = "Asia" ORDER BY countrylanguage.percentage DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.language.code WHERE countrycontinent = "Asia" GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1; 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.language.code WHERE countrygovernmentform ='republic' GROUP BY countrylanguage.language HAVING count(*) = 1 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code WHERE countrygovernmentform = "Republic" GROUP BY city.cityname HAVING count(*) = 1 
 SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Percentage > 50   AND city.Population =     (SELECT MAX (city.Population)      FROM city      JOIN country ON city.CountryCode = country.Code      JOIN countrylanguage ON countrylanguage.CountryCode = country.Code      WHERE countrylanguage.IsOfficial = "Yes"        AND countrylanguage.Percentage > 50)   AND city.District = "City"   AND country.Continent = "Asia"   AND country.Region = "Asia-Pacific"   AND country.LocalName = "Tokyo"; 
 SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Language = "English"   AND city.Population =     (SELECT MAX (city.Population)      FROM city      JOIN country ON city.CountryCode = country.Code      WHERE country.Language = "English")   AND city.District = "City"   AND country.Region = "North America"   AND country.SurfaceArea > 500; 
 SELECT country.Name,        country.population,        country.lifeexpectancy FROM city JOIN country ON city.CountryCode = country.Code WHERE country.region = "Asia" ORDER BY country.area DESC LIMIT 1; 
 SELECT country.Name,        city.Population,        country.LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia" ORDER BY city.Population DESC LIMIT 1; 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.language!= 'English' 
 SELECT avg(country.lifeexpectancy) FROM city JOIN country ON city.countrycode = country.code WHERE country.language!= 'English' 
 SELECT sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE countrylanguage.isofficial = 'no'   AND countrylanguage.percentage > 0.05; 
 SELECT count(*) FROM city WHERE countrycode NOT IN     (SELECT countrycode      FROM countrylanguage      WHERE language = "english")   AND district!= "Capitol"   AND countrycode NOT IN     (SELECT countrycode      FROM country      WHERE region = "North America")   AND countrycode NOT IN     (SELECT countrycode      FROM country      WHERE continent = "North America"); 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code WHERE country.headofstate = "Beatrix"   AND country.language = "official"; 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code WHERE city.headofstate = "Beatrix"   AND country.localname = "United Kingdom" 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN country ON city.countrycode = country.code WHERE country.countrycode IN     (SELECT countrycode      FROM country      WHERE indepyear < 1930) 
 SELECT count(DISTINCT countrylanguage.language) FROM city JOIN country ON city.countrycode = country.code WHERE country.founded < 1930 GROUP BY country.language 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Europe"   AND country.SurfaceArea >     (SELECT max(SurfaceArea)      FROM country      WHERE Continent = "Europe") 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Europe"   AND city.District IN     (SELECT district      FROM city      WHERE country.Continent = "Europe") GROUP BY city.District HAVING city.SurfaceArea >     (SELECT max(surfaceArea)      FROM country      WHERE continent = "Europe") 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Africa"   AND city.Population <     (SELECT min(population)      FROM city      JOIN country ON city.CountryCode = country.Code      WHERE country.Continent = "Asia") 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Africa"   AND country.Region = "Asia"   AND city.Population <     (SELECT min(population)      FROM city      JOIN country ON city.CountryCode = country.Code      WHERE country.Continent = "Asia") 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Asia"   AND city.Population >     (SELECT max(Population)      FROM city      WHERE country Continent = "Africa") 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Asia"   AND city.Population >     (SELECT max(Population)      FROM city      WHERE country.Continent = "Africa") 
 SELECT country_code FROM city WHERE country_code NOT IN     (SELECT country_code      FROM countrylanguage      WHERE language = "english") 
 SELECT country.code FROM city JOIN country ON city.countrycode = country.code WHERE countrylanguage.isofficial = 0   AND countrylanguage.percentage > 0.05   AND country.lifeexpectancy > 25   AND country.gnp > 100000   AND country.gnpoold > 100000   AND country.localname!= "English"   AND country.headofstate!= "English"   AND country.capital!= "English"   AND country.countrycode!= "USA"; 
 SELECT country.code FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language!= 'English' 
 SELECT country.code FROM city JOIN country ON city.countrycode = country.code WHERE countrylanguage.language!= 'English' 
 SELECT country.code FROM city JOIN country ON city.countrycode = country.code WHERE countrylanguage.isofficial = "False"   AND countrygovernmentform!= "Republic" 
 SELECT country.Code FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = "Republics"   AND countrylanguage.IsOfficial = "No"   AND country.LifeExpectancy < 55   AND country.GNP < 100000   AND country.GNPOld < 100000   AND country.LocalName!= "English" 
 SELECT city.District FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Europe"   AND country.Language!= "English"   AND country.LocalName!= "English"   AND country.GovernmentForm = "Official"   AND country.HeadOfState!= "English"   AND country.Capital!= "English"   AND country.Code2!= "English"; 
 SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = "Europe"   AND countrylanguage.language!= "English"   AND countrycapital!= 1 
 SELECT DISTINCT city.District FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrycontinent = "Asia"   AND countrylanguage.IsOfficial = "Yes"   AND countrylanguage.Language = "Chinese"   AND country.Percentage > 0.5; 
 SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia"   AND country.Language = "Chinese"   AND country.IsOfficial = "Yes" 
 SELECT country.Name,        country.IndepYear,        country.SurfaceArea FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population =     (SELECT MIN (city.Population)      FROM city) 
 SELECT country.Name,        country.IndepYear,        country.SurfaceArea FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population =     (SELECT min(population)      FROM city) 
 SELECT city.population,        city.Name,        country.HeadOfState FROM city JOIN country ON city.CountryCode = country.Code WHERE country.SurfaceArea =     (SELECT MAX (SurfaceArea)      FROM country) 
 SELECT country.Name,        city.Population,        country.HeadOfState FROM city JOIN country ON city.CountryCode = country.Code WHERE country.SurfaceArea =     (SELECT MAX (SurfaceArea)      FROM country) 
 SELECT country.Name,        countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.language = countrylanguage.Language GROUP BY city.CountryCode HAVING count(*) >= 3 
 SELECT country.Name,        countrylanguage.Percentage FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.language = countrylanguage.Language GROUP BY city.CountryCode HAVING count(*) > 2 
 SELECT city.District,        city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Population >     (SELECT avg(city.Population)      FROM city) 
 SELECT city.District,        city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Population >     (SELECT avg(population)      FROM city) 
 SELECT countrygovernmentform,        country.population FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylifeexpectancy > 72 GROUP BY countrygovernmentform 
 SELECT countrygovernmentform,        sum(country.population) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylifeexpectancy > 72 GROUP BY countrygovernmentform 
 SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'North America' UNION SELECT avg(country.lifeexpectancy),        sum(city.population) FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = '
 SELECT country.continent,        country.region,        country.population,        country.lifeexpectancy FROM city JOIN country ON city.countrycode = country.code WHERE country.lifeexpectancy < 72 GROUP BY country.continent,          country.region 
 SELECT country.Name,        city.District FROM city JOIN country ON city.CountryCode = country.Code WHERE country.SurfaceArea =     (SELECT MAX (SurfaceArea)      FROM country) ORDER BY city.SurfaceArea DESC LIMIT 5; 
 SELECT country.Name,        country.SurfaceArea FROM city JOIN country ON city.CountryCode = country.Code ORDER BY city.Population DESC LIMIT 5; 
 SELECT country.localname FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.population =     (SELECT max(population)      FROM city) ORDER BY city.population DESC LIMIT 3; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population =     (SELECT MAX (city.Population)      FROM city      JOIN country ON city.CountryCode = country.Code) ORDER BY city.Population DESC LIMIT 3; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population =     (SELECT MIN (city.Population)      FROM city) ORDER BY city.Population DESC LIMIT 3; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population =     (SELECT MIN (city.Population)      FROM city      JOIN country ON city.CountryCode = country.Code) GROUP BY city.District ORDER BY city.Population DESC LIMIT 3; 
 SELECT COUNT (DISTINCT country.Name) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia"   AND country.Region = "Asia"; 
 SELECT count(*) FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Asia"   AND country.Region = "Asia"   AND city.District = "Asia"   AND country.LifeExpectancy > 25   AND country.GNP > 100000   AND country.GNPOld > 100000   AND country.LocalName!= "China"   AND country.GovernmentForm = "Constitutional Monarchy"   AND country.HeadOfState!= "Xi Jinping"   AND country.Capital!= "Beijing"   AND country.Code2 = "CN"   AND country.Language = "English"; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Europe"   AND city.Population = 80000 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country Continent = "Europe"   AND city.Population = 80000 
 SELECT sum(country.population),        country.area FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = "North America"   AND country.area > 3000 GROUP BY city.district 
 SELECT sum(country.population),        country.surfacearea FROM city JOIN country ON city.countrycode = country.code WHERE countrycontinent = "North America"   AND country.region = "North America"   AND city.district = "North America" GROUP BY city.district HAVING sum(country.surfacearea) > 3000 
 SELECT city.District FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Population BETWEEN 160000 AND 900000 
 SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Population BETWEEN 160000 AND 900000 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1 
 SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = country.language.code GROUP BY countrylanguage.language ORDER BY count(*) DESC LIMIT 1 
 SELECT countrylanguage.language,        country.region FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.region ORDER BY count(*) DESC LIMIT 1 
 SELECT country.countrycode,        countrylanguage.language,        countrylanguage.percentage FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.language = countrylanguage.language WHERE city.population > 150000 GROUP BY country.language ORDER BY countrylanguage.percentage DESC LIMIT 10; 
 SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage)   AND countrylanguage.IsOfficial = 'yes'   AND country.Name = (SELECT LocalName                         FROM country                         WHERE Continent = "North America"                           AND Region = "North America"                           AND SurfaceArea > 500000                           AND Population > 1000000                           AND LifeExpectancy > 25                           AND GNP > 100000                           AND GNPOld > 100000                           AND HeadOfState = "Monarchy"                           AND Capital = "Paris"                           AND Code2 = "FR"                           AND Country.Name = "France") GROUP BY city.District ORDER BY count(*) DESC LIMIT 1; 
 SELECT COUNT(*) FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "Spanish"   AND countrylanguage.Percentage > 50; 
 SELECT country.Code FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Percentage =     (SELECT max(Percentage)      FROM countrylanguage      WHERE Language = "Spanish")   AND country.LifeExpectancy =     (SELECT max(LifeExpectancy)      FROM country      WHERE Continent = "North America"        AND Region = "Canada")   AND country.GNP > 100000   AND country.GNPOld > 100000   AND city.District = "Canada" 
 SELECT country.Code FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "Spanish" GROUP BY city.CountryCode HAVING SUM (countrylanguage.Percentage) > 50; 
 SELECT count(*) FROM conductor WHERE name!= "Unknown"   AND age > 40   AND nationality!= "Unknown"   AND year_of_work > 2000 
 SELECT count(*) FROM conductor WHERE age > 40   AND nationality = "UK"   OR nationality = "Australia"   OR nationality = "Canada"   OR nationality = "United States"   OR nationality = "Germany"   OR nationality = "France"   OR nationality = "Italy"   OR nationality = "Sweden"   OR nationality = "Switzerland"   OR nationality = "United Kingdom"   OR nationality = "United States"   OR nationality = "Canada"   OR nationality = "Australia"   OR nationality = "Germany"   OR nationality = "France"   OR nationality = "Italy"   OR nationality = "Sweden"   OR nationality = "Switzerland"   OR nationality = "United Kingdom"   OR nationality = "United States"   OR nationality = "Canada"   OR nationality = "Australia"   OR nationality = "Germany"   OR nationality = "France"   OR nationality = "Italy"   OR nationality = "Sweden"   OR nationality = "Switzerland"   OR nationality = "United Kingdom"   OR nationality = "United States"   OR nationality = "Canada"   OR nationality = "Australia"   OR nationality = "Germany" 
 SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC 
 SELECT conductor.Name FROM conductor ORDER BY conductor.Age DESC 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Record_Company!= "USA" 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE orchestra.Record_Company!= "USA"   AND show.Result = "Yes"   AND show.Attendance > 100   AND conductor.Nationality!= "USA"   AND conductor.Age > 40   AND conductor.Year_of_Work > 2000 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded DESC 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded DESC 
 SELECT avg(Show.Attendance) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.Result = "Yes"   AND show.Attendance > 0 ORDER BY show.Attendance DESC LIMIT 1; 
 SELECT avg(Show.Attendance) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON show.Performance_ID = performance.Performance_ID WHERE orchestra.Year_of_Founded > 1800   AND orchestra.Major_Record_Format = "CD"   AND show.Result = "Yes"   AND show.Attendance > 100 
 SELECT max(Show.share),        min(Show.share) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE performance.Type!= "Live final" 
 SELECT max(Show.share),        min(Show.share) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID WHERE performance.Type!= "Live final" 
 SELECT count(DISTINCT conductor.Nationality) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID GROUP BY conductor.Nationality 
 SELECT count(DISTINCT conductor.Nationality) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID ORDER BY performance.Year_of_Work DESC 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID JOIN show ON performance.Performance_ID = show.Performance_ID ORDER BY performance.Year_of_Work DESC 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON performance.performance_id = show.performance_id WHERE performance.Type = "Show" GROUP BY conductor.name ORDER BY conductor.year_of_work DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON performance.performance_id = show.performance_id WHERE orchestra.year_of_work =     (SELECT max(year_of_work)      FROM conductor      JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id      JOIN performance ON orchestra.orchestra_id = performance.orchestra_id      JOIN show ON performance.performance_id = show.performance_id      GROUP BY show.show_id      ORDER BY show.show_id DESC      LIMIT 1) 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name,        orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY count(*) DESC LIMIT 1 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 
 SELECT DISTINCT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Record_Company 
 SELECT count(*),        orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Record_Company 
 SELECT orchestra.major_record_format FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY count(*) ASC 
 SELECT Major_Record_Format FROM orchestra ORDER BY show.Result DESC 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Record_Company ORDER BY count(*) DESC LIMIT 1 
 SELECT orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 1800   AND orchestra.Major_Record_Format = "CD"   AND orchestra.Record_Company = "Warner Music Group"   AND conductor.Name = "Maurice Anderson"   AND conductor.Age > 50   AND conductor.Nationality = "USA"   AND show.If_first_show = 0   AND show.Result = "No"   AND show.Attendance < 100 
 SELECT ORCHESTRA.orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Record_Company = ""   AND orchestra.Year_of_Founded = ""   AND orchestra.Major_Record_Format = ""   AND conductor.Name = ""   AND conductor.Age = 0   AND conductor.Nationality = ""   AND performance.Type = ""   AND performance.Date = ""   AND performance.Official_ratings_(millions) = 0   AND performance.Weekly_rank = ""   AND performance.Share = ""   AND show.If_first_show = 0   AND show.Result = ""   AND show.Attendance = 0 
 SELECT DISTINCT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded < 2003   OR orchestra.Year_of_Founded > 2003 
 SELECT orchestra.Record_Company FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded < 2003 INTERSECT   SELECT orchestra.Record_Company   FROM conductor   JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2003 
 SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Major_Record_Format = "CD"   OR orchestra.Major_Record_Format = "DVD"   AND orchestra.Year_of_Founded > 1800 
 SELECT count(*) FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Major_Record_Format = "CD"   OR orchestra.Major_Record_Format = "DVD" 
 SELECT DISTINCT orchestra.year_of_founded FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.year_of_founded HAVING count(*) > 1 
 SELECT DISTINCT orchestra.year_of_founded FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON performance.performance_id = show.performance_id GROUP BY orchestra.year_of_founded HAVING count(*) > 1 
 SELECT count(*) FROM Highschooler WHERE grade = 9 
 SELECT count(*) FROM highschooler WHERE grade = 9 
 SELECT Highschooler.name,        Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Likes.liked_id = Highschooler.ID 
 SELECT Highschooler.name,        Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT DISTINCT grade FROM highschooler 
 SELECT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.grade 
 SELECT DISTINCT highschooler.grade FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = friend.friend_id WHERE highschooler.name = "Kyle" 
 SELECT grade FROM highschooler WHERE name = "Kyle" 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.grade = 10 
 SELECT name FROM highschooler WHERE grade = 10 
 SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.name = "Kyle"   AND Highschooler.grade = 9; 
 SELECT Highschooler.id FROM Highschooler JOIN Friend ON Highschooler.id = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.name = "Kyle"   AND Likes.liked_id = Highschooler.id   AND Highschooler.grade = 9; 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT count(*) FROM highschooler WHERE grade = 9   OR grade = 10 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade,        count(*) FROM Highschooler GROUP BY grade 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
 SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4 
 SELECT Highschooler.ID,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT count(*),        highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID HAVING count(*) >= 3 
 SELECT name FROM highschooler WHERE id IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.friend_id = likes.liked_id      GROUP BY friend.friend_id      HAVING count(*) >= 3) 
 SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.name = "Kyle"   AND Likes.liked_id IN     (SELECT ID      FROM Highschooler      WHERE name = "Kyle") 
 SELECT DISTINCT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = "Kyle"   AND Likes.student_id = Highschooler.ID 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle"   AND likes.liked_id IN     (SELECT likes.liked_id      FROM likes      JOIN friend ON likes.liked_id = friend.liked_id      WHERE friend.friend_id = highschooler.id) 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle"   AND likes.liked_id = highschooler.id GROUP BY highschooler.id 
 SELECT id FROM highschooler WHERE grade = 9 EXCEPT SELECT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.liked_id = highschooler.id WHERE highschooler.grade = 9 
 SELECT id FROM highschooler WHERE grade = 9 EXCEPT SELECT highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON highschooler.id = likes.liked_id WHERE likes.student_id = highschooler.id 
 SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.friend_id = likes.liked_id      WHERE likes.student_id = highschooler.id) 
 SELECT name FROM highschooler WHERE id NOT IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.friend_id = likes.liked_id      WHERE likes.student_id = highschooler.id) 
 SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.grade = 1   AND Highschooler.name!= "Friend" 
 SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.grade = 1   AND Highschooler.name!= "Friend" 
 SELECT name FROM highschooler WHERE id IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON friend.friend_id = likes.liked_id      WHERE likes.student_id = highschooler.id) UNION SELECT name FROM highschooler WHERE id IN     (SELECT likes.liked_id      FROM likes      JOIN friend ON likes.liked_id = friend.friend_id      WHERE friend.student_id = highschooler.id) 
 SELECT name FROM highschooler WHERE id IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON likes.liked_id = friend.friend_id      WHERE likes.student_id = highschooler.id)   AND id IN     (SELECT likes.liked_id      FROM likes      JOIN friend ON likes.liked_id = friend.friend_id      WHERE likes.student_id = highschooler.id) 
 SELECT count(*),        highschooler.id FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.liked_id = friend.friend_id GROUP BY highschooler.id 
 SELECT likes.liked_id,        count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = highschooler.id GROUP BY likes.liked_id 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT Highschooler.name,        count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID ORDER BY count(*) DESC LIMIT 1 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID HAVING count(*) >= 2 
 SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID HAVING count(*) >= 2 
 SELECT name FROM highschooler WHERE grade > 5 INTERSECT   SELECT highschooler.name   FROM highschooler   JOIN friend ON highschooler.id = friend.friend_id   JOIN likes ON likes.liked_id = friend.id GROUP BY highschooler.name HAVING count(*) >= 2 
 SELECT name FROM highschooler WHERE grade > 5 UNION SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id GROUP BY friend.friend_id HAVING count(*) >= 2 
 SELECT count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id WHERE Highschooler.name = "Kyle"   AND Highschooler.grade = 9; 
 SELECT count(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle"   AND likes.liked_id = highschooler.id GROUP BY likes.liked_id ORDER BY count(*) DESC; 
 SELECT avg(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Likes ON Friend.friend_id = Likes.liked_id GROUP BY Highschooler.ID 
 SELECT avg(highschooler.grade) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id JOIN likes ON likes.student_id = friend.student_id WHERE friend.friend_id IN     (SELECT friend_id      FROM friend      GROUP BY friend_id      HAVING count(*) > 1) 
 SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON likes.liked_id = friend.friend_id      WHERE likes.student_id = highschooler.id) 
 SELECT min(grade) FROM highschooler WHERE id NOT IN     (SELECT friend.friend_id      FROM friend      JOIN likes ON likes.liked_id = friend.friend_id      WHERE likes.student_id = highschooler.id) 
 SELECT owners.street,        owners.city,        owners.state,        professionals.first_name,        professionals.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN professionals ON professionals.professional_id = breeds.breed_code WHERE breeds.breed_name = "Labrador Retriever"   AND breeds.breed_name = "German Shepherd"   AND breeds.breed_name = "Golden Retriever"   AND breeds.breed_name = "Doberman Pinscher"   AND breeds.breed_name = "Boxer"   AND breeds.breed_name = "Bulldog"   AND breeds.breed_name = "Poodle"   AND breeds.breed_name = "Chihuahua"   AND breeds.breed_name = "Pug"   AND breeds.breed_name = "Shih Tzu"   AND breeds.breed_name = "Yorkshire Terrier"   AND breeds.breed_name = "Corgi"   AND breeds.breed_name = "Cocker
 SELECT owners.state,        professionals.street FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN professionals ON professionals.professional_id = breeds.breed_code WHERE breeds.breed_name = "Labrador Retriever"   AND breeds.breed_name = "German Shepherd"   AND breeds.breed_name = "Dachshund"   AND breeds.breed_name = "Bulldog"   AND breeds.breed_name = "Beagle"   AND breeds.breed_name = "Boxer"   AND breeds.breed_name = "Poodle"   AND breeds.breed_name = "Chihuahua"   AND breeds.breed_name = "Yorkshire Terrier"   AND breeds.breed_name = "Corgi"   AND breeds.breed_name = "Cocker Spaniel"   AND breeds.breed_name = "Collie"   AND breeds.breed_name = "Greyhound"   AND breeds.breed_name = "Whippet"   AND breeds
 SELECT avg(dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN professionals ON dogs.owner_id = professionals.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id AND professionals.professional_id = treatments.professional_id WHERE treatments.treatment_type_code = "TREATMENT"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = "94107"   AND dogs.breed_name = "Labrador Retriever"   AND dogs.size_description = "Medium"   AND dogs.gender = "Male"   AND dogs.weight > 50   AND dogs.date_arrived < "2010-01-01"   AND dogs.date_departed > "2005-01-01"; 
 SELECT avg(dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON treatment_types.treatment_type_description = dogs.breed_name JOIN charges ON charges.charge_id = treatment_types.treatment_type_code JOIN professionals ON professionals.professional_id = treatment_types.professional_id JOIN dogs ON dogs.dog_id = treatment_types.dog_id JOIN owners ON owners.owner_id = dogs.owner_id JOIN sizes ON sizes.size_description = dogs.size_description JOIN treatment_types ON treatment_types.treatment_type_description = dogs.breed_name JOIN charges ON charges.charge_id = treatment_types.treatment_type_code JOIN professionals ON professionals.professional_id = treatment_types.professional_id JOIN dogs ON dogs.dog_id = treatment_types.dog_id JOIN owners ON owners.owner_id = dogs.owner_id JOIN sizes ON sizes.size_description = dogs.size_description JOIN treatment_types ON treatment_types.treatment_type_description = dogs.breed_name JOIN charges ON charges.charge_id = treatment_types.treatment_type_code JOIN professionals ON professionals.professional_id = treatment_types.professional_id JOIN dogs ON dogs.dog_id = treatment
 SELECT Professionals.professional_id,        Professionals.first_name,        Professionals.cell_number FROM Dogs JOIN Professionals ON Dogs.owner_id = Professionals.owner_id WHERE Professionals.city = "Indiana"   OR Treatment_Types.treatment_type_description = "treatment" GROUP BY Professionals.professional_id HAVING count(*) > 2 
 SELECT Professionals.professional_id,        Professionals.first_name,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Professionals.owner_id WHERE Owners.state = "Indiana"   OR Treatment_Types.treatment_type_description = "more than two" 
 SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN charges ON dogs.breed_code = charges.breed_code JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_code WHERE charges.charge_amount > 1000   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = 94107   AND dogs.gender = "male"   AND dogs.age > 3   AND dogs.weight > 50   AND dogs.date_arrived < "2015-12-25 23:59:59"   AND dogs.date_departed < "2018-12-25 23:59:59"; 
 SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.email_address!= "no email"   AND owners.home_phone!= "no phone"   AND owners.cell_number!= "no phone"   AND owners.city!= "San Francisco"   AND owners.state!= "CA"   AND owners.zip_code!= "94107"   AND dogs.breed_code!= "Labrador Retriever"   AND dogs.size_code!= "Large"   AND dogs.age > 5   AND dogs.gender!= "male"   AND dogs.weight > 50   AND dogs.date_arrived < "2015-12-25 23:59:59"   AND dogs.date_departed < "2018-12-25 23:59:59"   AND dogs.date_of_birth < "2003-12-25 23:59:59"   AND dogs.abandoned_yn = "no"   AND dogs.breed_name!= "Labrador Retriever"   AND dogs.breed_name!= "Golden Retriever"   AND dogs.breed_name!= "French Bulldog"   AND dogs.breed_name!= "Poodle"   AND
 SELECT Professionals.first_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Charges.charge_id = Owners.charge_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id WHERE Owners.first_name!= Dogs.name   AND Owners.last_name!= Dogs.name   AND Owners.street!= Dogs.street   AND Owners.city!= Dogs.city   AND Owners.state!= Dogs.state   AND Owners.zip_code!= Dogs.zip_code   AND Dogs.gender!= Dogs.age   AND Dogs.weight!= Dogs.date_arrived   AND Dogs.date_adopted!= Dogs.date_departed 
 SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Owners ON Owners.owner_id = Professionals.professional_id WHERE Owners.street = "123 Main St"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = "94107"   AND Dogs.name!= Dogs.name   AND Dogs.age > 3   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Dogs.date_arrived > "2015-01-01"   AND Dogs.date_adopted > "2010-01-01"   AND Dogs.date_departed > "2015-01-01"; 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Dogs.dogs JOIN Professionals ON Professionals.professional_id = Dogs.dogs.owner_id WHERE Charges.charge_amount = 0   AND Treatment_Types.treatment_type_description = "operated"   AND Sizes.size_description = "small"   AND Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Owners.street = "123 Main St"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Professionals.home_phone = "123-456-7890"   AND Professionals.cell_number = "987-654-3210"; 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Dogs.dogs WHERE Charges.charge_amount = 0   AND Treatment_Types.treatment_type_description = "none"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Dogs.name!= "Abandoned Dog"   AND Dogs.age > 3   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Dogs.date_arrived > "2015-01-01"   AND Dogs.date_adopted > "2015-01-01"   AND Dogs.date_departed > "2015-01-01"; 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.abandoned_yn = "N" ORDER BY owners.email_address LIMIT 1; 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.name = "Bella"   AND dogs.age > 3   AND dogs.gender = "female"   AND dogs.weight > 50 ORDER BY treatments.cost_of_treatment DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.professional_id WHERE Dogs.gender = "Male"   AND Dogs.age > 10   AND Dogs.weight > 50   AND Charges.date_of_treatment > "2010-01-01"   AND Charges.date_departed < "2015-12-31"   AND Charges.date_of_birth < "2005-12-31"   AND Charges.charge_amount > 100   AND Charges.charge_type = "Rent"   AND Treatment_Types.treatment_type_description = "Trained"   AND Professionals.email_address = "sarah.benson@example.com"   AND Professionals.home_phone = "123-456-7890"   AND Professionals.cell_number = "987-654-3210" 
 SELECT Professionals.professional_id,        Professionals.role_code,        Professionals.first_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Professionals.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT breeds.breed_name FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_code JOIN owners ON charges.owner_id = owners.owner_id JOIN dogs ON dogs.dog_id = owners.dog_id JOIN professionals ON owners.home_phone = professionals.home_phone AND owners.cell_number = professionals.cell_number WHERE owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = 94107 GROUP BY breeds.breed_name ORDER BY count(*) DESC LIMIT 1; 
 SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Dogs.treatment_type_code WHERE Dogs.abandoned_yn = "Y" GROUP BY Breeds.breed_name ORDER BY count(*) DESC LIMIT 1; 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON dogs.dog_id = dogs.owner_id JOIN professionals ON professionals.professional_id = dogs.owner_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.gender ='male'   AND dogs.age > 10 ORDER BY treatments.cost_of_treatment DESC LIMIT 1; 
 SELECT owners.owner_id,        owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.age > 10   AND dogs.gender = "male" ORDER BY treatments.cost_of_treatment DESC LIMIT 1 
 SELECT treatment_types.treatment_type_description FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON dogs.dog_id = treatment_types.dog_id JOIN professionals ON professionals.professional_id = dogs.owner_id JOIN treatments ON treatments.treatment_id = dogs.dog_id AND professionals.professional_id = dogs.owner_id GROUP BY treatment_types.treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT 1 
 SELECT treatment_types.treatment_type_description FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON dogs.dog_id = dogs.owner_id JOIN professionals ON professionals.professional_id = dogs.owner_id JOIN treatments ON treatments.treatment_id = dogs.dog_id AND treatments.professional_id = professionals.professional_id WHERE dogs.age > 5 GROUP BY treatment_types.treatment_type_description ORDER BY sum(treatments.cost_of_treatment) ASC LIMIT 1 
 SELECT owners.owner_id,        owners.zip_code FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT owners.owner_id,        owners.zip_code FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_code JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_description JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.professional_id WHERE Dogs.gender = "Male"   AND Dogs.age > 10   AND Dogs.weight > 50   AND Charges.charge_amount > 100 GROUP BY Professionals.professional_id HAVING count(*) >= 2 
 SELECT Professionals.professional_id,        Professionals.cell_number FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_description JOIN Owners ON Owners.owner_id = Professionals.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.owner_id = Dogs.owner_id GROUP BY Professionals.professional_id HAVING count(*) >= 2 
;
 SELECT Professionals.first_name,        Professionals.last_name FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.professional_id WHERE Charges.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Charges) 
 SELECT treatment_type_description,        Professionals.first_name,        Professionals.last_name,        Dogs.date_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Professionals ON Professionals.professional_id = Dogs.dog_id FROM Dogs JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Professionals ON Professionals.professional_id = Dogs.dog_id WHERE Dogs.breed_name = "Labrador Retriever"   AND Dogs.age > 3   AND Dogs.gender = "Male"   AND Dogs.weight > 50   AND Dogs.date_arrived < "2015-12-31"   AND Dogs.date_departed > "2010-12-31"   AND Dogs.date_of_birth > "2000-12-31"   AND Dogs.name IN     (SELECT name      FROM Dogs      WHERE breed_name = "Labrador Retriever"        AND size_description = "Large") 
;
 SELECT Treatment_Types.treatment_type_description,        sum(Treatment_Types.cost_of_treatment) FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Owners.home_phone = Professionals.home_phone AND Professionals.cell_number = Owners.cell_number JOIN Treatments ON Dogs.dog_id = Treatments.dog_id AND Professionals.professional_id = Treatments.professional_id GROUP BY Treatment_Types.treatment_type_description ORDER BY sum(Treatment_Types.cost_of_treatment) DESC LIMIT 10; 
 SELECT Treatment_Types.treatment_type_description,        Charges.cost_of_treatment FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Treatments ON Treatments.treatment_id = Dogs.dog_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.date_arrived < "2015-12-25 23:59:59"   AND Dogs.date_departed > "2010-12-25 23:59:59" 
 SELECT Owners.first_name,        Owners.last_name,        Sizes.size_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id AND Treatments.professional_id = Professionals.professional_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Sizes.size_description = "small"   AND Charges.charge_amount > 100 
 SELECT Owners.first_name,        Owners.last_name,        Sizes.size_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.charge_type = Charges.charge_type JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Treatment_Types ON Treatment_Types.treatment_type_description = Breeds.breed_description WHERE Dogs.age > 10   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Sizes.size_description = "large"   AND Treatment_Types.treatment_type_description = "boarding" 
 SELECT owners.first_name,        dogs.name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON dogs.dog_id = dogs.owner_id WHERE owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = 94107   AND dogs.abandoned_yn = "F"   AND dogs.age > 3   AND dogs.weight > 50   AND dogs.date_arrived > "2015-01-01"   AND dogs.date_departed < "2018-01-01"; 
;
 SELECT dogs.name,        treatment_types.treatment_type_description,        dogs.date_of_treatment FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatment_types ON charges.charge_type = treatment_types.charge_type JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON owners.owner_id = dogs.owner_id JOIN professionals ON owners.owner_id = professionals.owner_id JOIN treatment_Types ON treatment_Types.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_name = "Rottweiler" ORDER BY treatment_Types.treatment_type_description LIMIT 1; 
 SELECT dogs.name,        dogs.date_of_birth,        dogs.date_adopted,        dogs.date_departed FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN charges ON dogs.breed_code = charges.breed_code JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_code JOIN owners ON dogs.owner_id = owners.owner_id JOIN professionals ON dogs.owner_id = professionals.owner_id WHERE breeds.breed_name = "rare breed" ORDER BY breeds.breed_name LIMIT 1; 
 SELECT owners.first_name,        dogs.name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = dogs.owner_id WHERE owners.city = "Virginia"   AND owners.state = "Virginia"   AND owners.zip_code = "zip_code" ORDER BY dogs.age DESC 
 SELECT owners.first_name,        dogs.name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = dogs.owner_id WHERE owners.city = "Virginia"   AND owners.state = "Virginia"   AND owners.zip_code = "94001"   AND dogs.breed_code = breeds.breed_code   AND dogs.size_code = sizes.size_code   AND dogs.name!= "Adopted"   AND dogs.age > 10   AND dogs.weight > 50 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Dogs.breed_code JOIN Charges ON Charges.charge_id = Treatment_Types.charge_id JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Breeds ON Breeds.breed_code = Dogs.breed_code WHERE Breeds.breed_name = "Bulldog"   AND Sizes.size_description = "large"   AND Treatment_Types.treatment_type_description = "treatment"   AND Charges.charge_amount > 100 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Dogs.breed_code JOIN Charges ON Charges.charge_id = Treatment_Types.charge_id JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Breeds ON Breeds.breed_code = Dogs.breed_code WHERE Breeds.breed_name = "Bulldog"   AND Sizes.size_description = "large"   AND Treatment_Types.treatment_type_description = "treatment"   AND Charges.charge_amount > 100 
 SELECT owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.age = 1   AND dogs.gender = "male" ORDER BY dogs.date_arrived LIMIT 1; 
 SELECT owners.first_name,        owners.last_name FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE dogs.age = 1   AND dogs.name = "youngest"   AND breeds.gender = "male"   AND breeds.breed_name = "Labrador Retriever"   AND breeds.breed_description = "friendly"   AND breeds.breed_code = "Labrador Retriever"   AND breeds.size_description = "large"   AND breeds.breed_code = "Labrador Retriever"   AND breeds.breed_name = "Labrador Retriever"   AND breeds.breed_description = "friendly"   AND breeds.breed_code = "Labrador Retriever"   AND breeds.breed_name = "Labrador Retriever"   AND breeds.breed_description
 SELECT Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_description JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Breeds.breed_code WHERE Owners.city = "Hawaii"   OR Owners.city = "Wisconsin"   OR Owners.state = "Hawaii"   OR Owners.state = "Wisconsin"   OR Owners.street = "Hawaii"   OR Owners.street = "Wisconsin"   OR Owners.zip_code = "Hawaii"   OR Owners.zip_code = "Wisconsin"   OR Owners.first_name = "Hawaii"   OR Owners.first_name = "Wisconsin"   OR Owners.last_name = "Hawaii"   OR Owners.last_name = "Wisconsin"   OR Owners.date_of_birth = "Hawaii"   OR Owners.date_of_birth = "Wisconsin"   OR Owners.date_arrived = "Hawaii"   OR Owners.date_arrived = "Wisconsin"   OR Owners.date_adopted = "
 SELECT Professionals.email_address FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_description JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Owners.city = "Hawaii"   OR Owners.city = "Wisconsin"   OR Owners.state = "Hawaii"   OR Owners.state = "Wisconsin"   OR Dogs.age > 10   OR Dogs.gender = "female"   OR Dogs.weight > 50   OR Dogs.date_arrived > "1970-01-01"   OR Dogs.date_departed < "2000-01-01" 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Dogs.breed_code JOIN Charges ON Charges.charge_id = Treatment_Types.charge_amount JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Breeds ON Breeds.breed_code = Dogs.breed_code WHERE Breeds.breed_name = "Bulldog"   AND Sizes.size_description = "large"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Dogs.date_of_birth > 1990   AND Dogs.name!= "Abandoned Dog" 
 SELECT Dogs.date_arrived,        Dogs.date_departed FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Professionals ON Owners.owner_id = Professionals.owner_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Dogs.breed_code JOIN Charges ON Charges.charge_id = Treatment_Types.charge_amount JOIN Sizes ON Sizes.size_code = Dogs.size_code JOIN Breeds ON Breeds.breed_code = Dogs.breed_code WHERE Breeds.breed_name = "Labrador Retriever"   AND Sizes.size_description = "large"   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = "94107"   AND Dogs.breed_code = Breeds.breed_code   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Dogs.date_of_birth > 1990   AND Dogs.date_of_birth < 2015 
 SELECT count(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE dogs.breed_code = "Labrador Retriever"   AND dogs.size_code = "Medium"   AND dogs.gender = "Male"   AND dogs.age > 3   AND dogs.weight > 50   AND professionals.role_code = "Veterinarian"   AND professionals.email_address = "sarah.bradshaw@example.com"   AND professionals.home_phone = "555-123-4567"   AND professionals.cell_number = "555-123-4567"   AND treatment_types.treatment_description = "surgery" 
 SELECT count(*) FROM Dogs JOIN Treatment_Types ON Dogs.dog_id = Treatment_Types.dog_id JOIN Professionals ON Treatment_Types.treatment_type_code = Professionals.role_code WHERE Professionals.email_address = "owner@example.com"   AND Professionals.home_phone = "1234567890"   AND Professionals.cell_number = "9876543210"   AND Dogs.abandoned_yn = "0"   AND Dogs.breed_code = "Labrador"   AND Dogs.size_code = "Medium"   AND Dogs.name = "Buddy"   AND Dogs.age > 3   AND Dogs.weight > 50   AND Dogs.date_arrived < "2015-12-31 23:59:59"   AND Dogs.date_adopted < "2010-12-31 23:59:59"   AND Dogs.date_departed < "2015-12-31 23:59:59"; 
 SELECT count(*) FROM breeds JOIN charges ON breeds.breed_code = charges.breed_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE breeds.breed_name = "Labrador Retriever"   AND sizes.size_description = "large"   AND treatment_types.treatment_type_description = "treatment"   AND owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = "94107"   AND dogs.name = "Buddy"   AND dogs.age > 3   AND dogs.gender = "male"   AND dogs.weight > 50   AND dogs.date_arrived > "2015-01-01"   AND dogs.date_adopted > "2015-01-01"   AND dogs.date_departed > "2015-01
 SELECT count(*) FROM breeds JOIN charges ON breeds.breed_code = charges.breed_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND dogs.name = "Bella"   AND dogs.age > 3   AND dogs.gender = "female"   AND dogs.weight > 50   AND breeds.breed_name = "Labrador Retriever"   AND treatment_types.treatment_type_description = "Trained"   AND treatments.cost_of_treatment < 100 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Breeds.breed_name LIKE '%West%'   AND Owners.city LIKE '%West%'   AND Owners.state LIKE '%West%' 
 SELECT Professionals.role_code,        Professionals.street,        Professionals.city,        Professionals.state FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.breed_code JOIN Sizes ON Breeds.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Treatment_Types.treatment_type_description = "West"   AND Owners.city LIKE "%West%"   AND Owners.state = "CA"   AND Owners.zip_code = "94107" 
 SELECT owners.first_name,        owners.last_name,        owners.email_address FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners JOIN dogs JOIN professionals JOIN treatments WHERE breeds.breed_name LIKE '%North%'   AND owners.state = 'North'   AND dogs.dog_id IN     (SELECT dog_id      FROM dogs      WHERE abandoned_yn = 'Y')   AND professionals.role_code = 'Veterinarian'   AND treatments.cost_of_treatment > 100 
 SELECT owners.first_name,        owners.last_name,        owners.email_address FROM breeds JOIN charges ON breeds.breed_code = charges.charge_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id JOIN treatments ON treatments.treatment_id = dogs.dog_id WHERE breeds.breed_name LIKE '%North%'   AND owners.state LIKE '%North%'   AND owners.city LIKE '%North%'   AND owners.zip_code LIKE '%North%' 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs) 
 SELECT count(*) FROM dogs WHERE age <     (SELECT avg(age)      FROM dogs)   AND breed_code = "Labrador Retriever"   AND size_code = "Medium"   AND treatment_type_description = "Trained"   AND treatment_type_code = "Trained"   AND owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = "94107"   AND owners.email_address = "susan@example.com"   AND owners.home_phone = "415-123-4567"   AND owners.cell_number = "415-123-4567"; 
 SELECT max(TREATMENTS.cost_of_treatment) FROM BREEDS JOIN CHARGES ON BREEDS.breed_code = CHARGES.charge_type JOIN SIZES ON CHARGES.charge_amount = SIZES.size_description JOIN TREATMENT_TYPES ON CHARGES.treatment_type_code = TREATMENT_TYPES.treatment_type_description JOIN OWNERS JOIN DOGS JOIN PROFESSIONALS JOIN TREATMENTS WHERE SIZES.size_description = "small"   AND TREATMENT_TYPES.treatment_type_description = "treat"   AND OWNERS.email_address = "email"   AND OWNERS.home_phone = "home_phone"   AND OWNERS.cell_number = "cell"   AND DOGS.name = "name"   AND DOGS.age = "age"   AND DOGS.date_arrived = "date_arrived"   AND DOGS.date_adopted = "date_adopted"   AND DOGS.date_departed = "date_departed"   AND BREEDS.breed_name = "breed_name"   AND BREEDS.breed_code = "breed_code"   AND CHARGES.charge_type = "
 SELECT min(cost_of_treatment) FROM CHARGES JOIN SIZES ON CHARGES.charge_type = SIZES.size_description JOIN TREATMENT_TYPES ON CHARGES.treatment_type_code = TREATMENT_TYPES.treatment_type_description JOIN OWNERS JOIN DOGS JOIN PROFESSIONALS JOIN TREATMENTS WHERE SIZES.size_description = "small"   AND TREATMENT_TYPES.treatment_type_description = "vaccination"   AND OWNERS.street = "123 Main St"   AND OWNERS.city = "San Francisco"   AND OWNERS.state = "CA"   AND OWNERS.zip_code = 94107   AND DOGS.name = "Bella"   AND DOGS.age = 3   AND DOGS.gender = "female"   AND DOGS.weight = 20   AND DOGS.date_arrived = "2018-04-20"   AND DOGS.date_adopted = "2018-04-20"   AND DOGS.date_departed = "2018-04-20"   AND Professionals.email_address = "sarah@example.com"   AND Professionals.home_phone = "415-123
 SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) 
 SELECT count(*) FROM Dogs WHERE dog_id NOT IN     (SELECT dog_id      FROM Treatments) WHERE breed_code NOT IN     (SELECT breed_code      FROM Breeds)   AND size_code NOT IN     (SELECT size_code      FROM Sizes)   AND age NOT IN     (SELECT age      FROM Dogs)   AND gender = "male"   AND weight > 50   AND date_arrived > date_of_birth   AND date_departed < date_adopted   AND email_address NOT IN     (SELECT email_address      FROM Owners)   AND home_phone NOT IN     (SELECT home_phone      FROM Owners)   AND cell_number NOT IN     (SELECT cell_number      FROM Owners)   AND city NOT IN     (SELECT city      FROM Owners)   AND state NOT IN     (SELECT state      FROM Owners)   AND zip_code NOT IN     (SELECT zip_code      FROM Owners); 
 SELECT count(*) FROM owners WHERE first_name = ""   AND last_name = ""   AND street = ""   AND city = ""   AND state = ""   AND zip_code = ""   AND email_address = ""   AND home_phone = ""   AND cell_number = ""   AND abandoned_yn = "Y"   AND dog_id NOT IN     (SELECT dog_id      FROM dogs      WHERE breed_code = "Labrador Retriever"        OR breed_code = "German Shepherd"        OR breed_code = "Golden Retriever"        OR breed_code = "Bulldog"        OR breed_code = "Poodle"        OR breed_code = "Chihuahua"        OR breed_code = "Shih Tzu"        OR breed_code = "Yorkshire Terrier"        OR breed_code = "Pug"        OR breed_code = "French Bulldog"        OR breed_code = "Boxer"        OR breed_code = "Beagle"        OR breed_code = "Corgi"        OR breed_code = "Dachshund"        OR breed_code = "Greyhound"        OR breed_code = "Whippet"        OR breed
 SELECT count(*) FROM owners WHERE first_name = ""   AND last_name = ""   AND city = ""   AND state = ""   AND zip_code = ""   AND email_address = ""   AND home_phone = ""   AND cell_number = ""   AND dog_id = 0   AND size_code = ""   AND breed_code = ""   AND name = ""   AND age = ""   AND date_of_birth = ""   AND date_adopted = ""   AND date_departed = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND charge_type = ""   AND treatment_type_description = ""   AND charge_amount = 0   AND
 SELECT count(*) FROM breeds JOIN charges ON breeds.breed_code = charges.breed_code JOIN sizes ON breeds.size_code = sizes.size_code JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_code JOIN owners ON owners.owner_id = breeds.breed_code JOIN dogs ON dogs.dog_id = breeds.breed_code JOIN professionals ON professionals.professional_id = dogs.dog_id WHERE breeds.breed_name = "Labrador Retriever"   AND sizes.size_description = "small"   AND treatment_types.treatment_type_description = "operated"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = "94107"   AND dogs.abandoned_yn = "0"   AND dogs.date_arrived = "1975-01-01"   AND dogs.date_departed = "1985-01-01"   AND dogs.name = "Buddy"   AND dogs.age = "3"   AND dogs.weight = "20"   AND professionals.role_code = "operates" 
 SELECT count(*) FROM Professionals WHERE email_address NOT IN     (SELECT Professionals.email_address      FROM Professionals      JOIN Dogs ON Professionals.professional_id = Dogs.professional_id      WHERE Dogs.breed_code = "Labrador Retriever")   AND home_phone NOT IN     (SELECT Professionals.home_phone      FROM Professionals      JOIN Dogs ON Professionals.professional_id = Dogs.professional_id      WHERE Dogs.breed_code = "Labrador Retriever")   AND cell_number NOT IN     (SELECT Professionals.cell_number      FROM Professionals      JOIN Dogs ON Professionals.professional_id = Dogs.professional_id      WHERE Dogs.breed_code = "Labrador Retriever")   AND city NOT IN     (SELECT Professionals.city      FROM Professionals      JOIN Dogs ON Professionals.professional_id = Dogs.professional_id      WHERE Dogs.breed_code = "Labrador Retriever")   AND state NOT IN     (SELECT Professionals.state      FROM Professionals      JOIN Dogs ON Professionals.professional_id = Dogs.professional_id      WHERE Dogs.breed_code = "Labrador Retriever")   AND zip_code NOT IN     (SELECT Professionals.zip_code     
 SELECT dogs.name,        dogs.age,        dogs.weight FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.abandoned_yn = 1 
 SELECT dogs.name,        dogs.age,        dogs.weight FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.abandoned_yn = 1 
 SELECT avg(dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON dogs.dog_id = treatment_types.dog_id JOIN professionals ON treatment_types.treatment_type_code = professionals.role_code WHERE owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND dogs.breed_name = "Labrador Retriever"   AND dogs.gender = "male"   AND dogs.weight > 50   AND dogs.date_arrived < "2010-01-01"   AND dogs.date_departed > "2005-01-01"; 
 SELECT avg(dogs.age) FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON dogs.dog_id = treatment_types.dog_id JOIN professionals ON treatment_types.treatment_type_code = professionals.role_code WHERE owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND dogs.breed_name = "Labrador Retriever"   AND dogs.gender = "male"   AND dogs.weight > 50   AND dogs.date_arrived < "2010-01-01"   AND dogs.date_departed > "2005-01-01"; 
 SELECT dogs.age FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON dogs.dog_id = treatment_types.dog_id JOIN charges ON treatment_types.treatment_type_code = charges.treatment_type_code JOIN professionals ON treatment_types.professional_id = professionals.professional_id WHERE owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND dogs.breed_name = "Labrador Retriever"   AND dogs.size_description = "Medium"   AND dogs.gender = "Male"   AND dogs.weight > 50 ORDER BY dogs.age DESC LIMIT 1 
 SELECT dogs.age FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN treatment_types ON dogs.dog_id = treatment_types.dog_id JOIN charges ON treatment_types.treatment_type_code = charges.treatment_type_code JOIN professionals ON treatment_types.professional_id = professionals.professional_id WHERE owners.street = "123 Main St"   AND owners.city = "San Francisco"   AND owners.state = "CA"   AND dogs.breed_name = "Labrador Retriever"   AND dogs.size_description = "Medium"   AND dogs.gender = "Male"   AND dogs.weight > 50 ORDER BY dogs.age DESC LIMIT 1 
 SELECT Treatment_Types.treatment_type_description,        Charges.charge_amount FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Owners.owner_id JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Treatments ON Treatments.treatment_id = Dogs.dog_id JOIN Owners ON Owners.owner_id = Professionals.professional_id WHERE Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.date_arrived > "2015-01-01"   AND Dogs.date_departed < "2018-01-01"; 
 SELECT Charges.charge_type,        Charges.charge_amount FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Charges.owner_id = Owners.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Professionals ON Dogs.dog_id = Professionals.dog_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id AND Professionals.professional_id = Treatments.professional_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.size_code = "Large"   AND Dogs.date_arrived < "2015-12-25 00:00:00"   AND Dogs.date_departed > "2018-12-25 00:00:00"; 
 SELECT max(treatment_types.cost_of_treatment) FROM breeds JOIN charges ON breeds.breed_code = charges.breed_type JOIN sizes ON breeds.size_code = sizes.size_description JOIN treatment_types ON charges.treatment_type_code = treatment_types.treatment_type_description JOIN owners ON owners.owner_id = dogs.owner_id JOIN dogs ON dogs.dog_id = dogs JOIN professionals ON professionals.professional_id = dogs.owner_id WHERE owners.city = "San Francisco"   AND owners.state = "CA"   AND owners.zip_code = 94107   AND dogs.name = "Bella"   AND dogs.age > 3   AND dogs.gender = "female"   AND dogs.weight > 50   AND dogs.date_arrived < "2015-12-31 23:59:59"   AND dogs.date_departed < "2018-12-31 23:59:59"; 
 SELECT Charges.charge_amount FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_description JOIN Owners ON Owners.owner_id = Breeds.breed_code JOIN Dogs ON Dogs.dog_id = Breeds.breed_code JOIN Professionals ON Professionals.professional_id = Breeds.breed_code JOIN Dogs.Dogs ON Dogs.dog_id = Dogs.dog_id JOIN Professionals.Professionals ON Professionals.professional_id = Professionals.professional_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.date_arrived < "2015-12-25 23:59:59"   AND Dogs.date_departed > "2018-12-25 23:59:59"   AND Dogs.date_of_birth > "2005-12-25 23:59:59"   AND Breeds.breed_name = "Labrador Retriever"   AND Breeds.breed_name = "German Shepherd"   AND Breeds.b
 SELECT Professionals.email_address,        Professionals.cell_number,        Professionals.home_phone FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.charge_type = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.weight > 50   AND Sizes.size_description = "Large"   AND Treatment_Types.treatment_type_description = "Trained"   AND Charges.charge_amount > 100 
 SELECT Professionals.email_address,        Professionals.cell_number,        Professionals.home_phone FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Breeds.size_code = Sizes.size_description JOIN Treatment_Types ON Charges.charge_type = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Owners.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Dogs.name = "Bella"   AND Dogs.age > 3   AND Dogs.gender = "female"   AND Dogs.weight > 50   AND Sizes.size_description = "Large"   AND Treatment_Types.treatment_type_description = "Trained"   AND Charges.charge_amount > 100 
 SELECT Breeds.breed_name,        Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code UNION SELECT Treatment_Types.treatment_type_description,        Owners.size_code FROM Owners JOIN Sizes ON Owners.size_code = Sizes.size_code JOIN Treatment_Types ON Owners.cell_number = Treatment_Types.cell_number 
 SELECT DISTINCT Breeds.breed_name,                 Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Professionals ON Dogs.dog_id = Professionals.dog_id JOIN Treatment_Types ON Professionals.role_code = Treatment_Types.treatment_type_code WHERE Dogs.abandoned_yn = "N" ORDER BY Breeds.breed_name 
 SELECT Professionals.first_name,        Treatment_Types.treatment_type_description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Treatment_Types.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.dog_id JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Breeds.breed_code WHERE Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Dogs.abandoned_yn = "F"   AND Dogs.name!= "Fido"   AND Dogs.age > 3   AND Dogs.weight > 50   AND Dogs.date_arrived < "2015-12-31 23:59:59"   AND Dogs.date_adopted < "2015-12-31 23:59:59"   AND Dogs.date_departed < "2015-12-31 23:59:59"; 
 SELECT Professionals.first_name,        Professionals.description FROM Breeds JOIN Charges ON Breeds.breed_code = Charges.charge_type JOIN Sizes ON Charges.size_code = Sizes.size_code JOIN Treatment_Types ON Charges.treatment_type_code = Treatment_Types.treatment_type_code JOIN Owners ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.dog_id = Treatment_Types.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.owner_id WHERE Dogs.age > 10   AND Dogs.gender = "male"   AND Dogs.weight > 50   AND Owners.city = "San Francisco"   AND Owners.state = "CA"   AND Owners.zip_code = 94107   AND Owners.email_address = "sfbayareal@gmail.com"   AND Owners.cell_number = "415-123-4567"   AND Owners.street = "Haight"   AND Owners.home_phone = "415-123-4567"   AND Treatment_Types.treatment_type_description = "Trained in agility and obedience"   AND Treatment_Types.treatment_type_description = "Trained in therapy" 
 SELECT count(*) FROM singer WHERE Birth_Year > 1980   AND Net_Worth_Millions > 100   AND Citizenship = "USA"   OR Birth_Year < 1980   OR Net_Worth_Millions < 100   OR Citizenship = "Canada" 
 SELECT count(*) FROM singer WHERE Birth_Year > 1980   AND Net_Worth_Millions > 100   AND Citizenship = "USA"   OR Birth_Year < 1980   OR Net_Worth_Millions < 100   OR Citizenship = "Canada" 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions ASC 
 SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC 
 SELECT singer.birth_year,        singer.citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT singer.birth_year,        singer.citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Citizenship!= "France" 
 SELECT Name FROM singer WHERE Birth_Year NOT IN     (SELECT Birth_Year      FROM singer      WHERE Citizenship = "France") 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year = 1948   OR singer.Birth_Year = 1949 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year = 1948   OR singer.Birth_Year = 1949 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY song.Highest_Position DESC LIMIT 1 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions DESC LIMIT 1 
 SELECT singer.Citizenship,        COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
 SELECT singer.Citizenship,        COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
 SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
 SELECT singer.Citizenship,        max(singer.Net_Worth_Millions) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
 SELECT singer.Citizenship,        max(singer.Net_Worth_Millions) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Citizenship 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT song.Title,        singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name 
 SELECT singer.Name,        sum(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name 
 SELECT Name FROM singer WHERE Net_Worth_Millions = 0 
 SELECT name FROM singer WHERE net_worth_millions > 0   AND citizenship!= "United States" 
 SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year < 1945   OR singer.Birth_Year > 1955 
 SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year < 1945 INTERSECT   SELECT singer.Citizenship   FROM singer   JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Birth_Year > 1955 
 SELECT sum(Other_Available_Features.feature_name) FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code JOIN Properties ON Other_Available_Features.property_id = Properties.property_id WHERE Properties.property_address = "123 Main St"   AND Properties.room_count > 100   AND Properties.buyer_offered_price > 150000   AND Properties.agreed_selling_price > 200000   AND Properties.apt_feature_1 = "Kitchen"   AND Properties.apt_feature_2 = "Bathroom"   AND Properties.apt_feature_3 = "Living Room"   AND Properties.fld_feature_1 = "Bedroom"   AND Properties.fld_feature_2 = "Bathroom"   AND Properties.fld_feature_3 = "Living Room"   AND Properties.hse_feature_1 = "Kitchen"   AND Properties.hse_feature_2 = "Bathroom"   AND Properties.hse_feature_3 = "Living Room"   AND Properties.oth_feature_1 = "Bedroom"   AND Properties.oth_feature_2 = "Bathroom"   AND Properties
 SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code JOIN Properties ON Other_Available_Features.feature_id = Properties.feature_id WHERE Properties.property_name = "AirCon"   AND Properties.property_address = "123 Main St"   AND Properties.room_count = 3   AND Properties buyer_offered_price > 100000   AND Properties buyer_sold_date > 2015-01-01   AND Properties buyer_agreed_selling_price > 100000   AND Properties.apt_feature_1 = "Yes"   AND Properties.apt_feature_2 = "Yes"   AND Properties.apt_feature_3 = "Yes"   AND Properties.fld_feature_1 = "Yes"   AND Properties.fld_feature_2 = "Yes"   AND Properties.fld_feature_3 = "Yes"   AND Properties.hse_feature_1 = "Yes"   AND Properties.hse_feature_2 = "Yes"   AND Properties.hse_feature_3 = "Yes"   AND Properties.oth_feature_1 = "Yes" 
 SELECT Ref_Property_Types.property_type_description FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.property_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Ref_Feature_Types.feature_type_code JOIN Properties ON Properties.property_type_code = Ref_Property_Types.property_type_code JOIN Other_Property_Features ON Other_Property_Features.property_id = Properties.property_id 
 SELECT Properties.property_name FROM Ref_Feature_Types JOIN Ref_Property_Types ON Ref_Feature_Types.feature_type_code = Ref_Property_Types.property_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Ref_Feature_Types.feature_type_code JOIN Properties ON Properties.property_id = Other_Available_Features.property_id WHERE Properties.room_count > 1   OR Properties.property_address = "Houses"   OR Properties.property_address = "Apartments" 
