SELECT count(*) FROM singer 
SELECT count(*) FROM singer 
SELECT singer.Name,  singer.Country,  singer.Age FROM singer  JOIN singer_in_concert  ON singer.Singer_ID  =  singer_in_concert.Singer_ID ORDER BY singer.Age 
SELECT Name,  Country,  Age FROM singer ORDER BY Age DESC 
SELECT avg(age),  min(age),  max(age) FROM singer WHERE Country  =  'France' 
SELECT avg(age),  min(age),  max(age) FROM singer WHERE Country  =  'France' 
SELECT singer.Name,  singer.Release_year FROM singer  JOIN singer_in_concert  ON singer.Singer_ID  =  singer_in_concert.Singer_ID ORDER BY singer.Age ASC LIMIT 1 
SELECT singer.Name,  singer.Release_year FROM singer  JOIN singer_in_concert  ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Is_male  =  '0' ORDER BY singer.Age,  singer.Release_year 
SELECT DISTINCT Country FROM singer WHERE Age  >  20 
SELECT DISTINCT Country FROM singer WHERE Age  >  20 
SELECT Country,  COUNT(*) FROM singer GROUP BY Country 
SELECT country,  COUNT(*) FROM singer GROUP BY country 
SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer) 
SELECT Song_Name FROM singer WHERE Age  >  (SELECT avg(Age) FROM singer) 
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
SELECT LOCATION,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
SELECT max(capacity),  avg(capacity) FROM stadium 
SELECT avg(capacity),  max(capacity) FROM stadium 
SELECT stadium.name,  stadium.capacity FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id ORDER BY average_attendance DESC LIMIT 1 
SELECT stadium.name,  stadium.capacity FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id ORDER BY average DESC LIMIT 1 
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 
SELECT stadium.name,  count(*) FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id GROUP BY stadium.stadium_id 
SELECT stadium.capacity,  count(*) FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id GROUP BY stadium.stadium_id 
SELECT stadium.name,  stadium.capacity FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  >  2014 
SELECT stadium.name,  stadium.capacity FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  >  2013 GROUP BY stadium.stadium_id ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT stadium.name FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE stadium.capacity  =  "0" 
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) 
SELECT Country FROM singer WHERE Age  >  40 INTERSECT SELECT Country FROM singer WHERE Age  <  30 
SELECT stadium.name FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 
SELECT stadium.name FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 
SELECT concert_name,  count(*),  singer_in_concert.theme FROM concert  JOIN singer_in_concert  ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert.concert_id 
SELECT concert_name,  theme,  count(*) FROM concert GROUP BY concert_name 
SELECT singer.Name,  count(*) FROM concert  JOIN singer  ON concert.Singer_ID  =  singer.Singer_ID GROUP BY concert.Singer_ID 
SELECT singer.Name,  count(*) FROM singer_in_concert  JOIN singer  ON singer_in_concert.Singer_ID  =  singer.Singer_ID JOIN concert  ON singer_in_concert.concert_ID  =  concert.concert_ID GROUP BY singer.Name 
SELECT singer.Name FROM concert  JOIN singer_in_concert  ON concert.concert_ID  =  singer_in_concert.concert_ID WHERE concert.Year  =  2014 
SELECT singer.Name FROM concert  JOIN singer_in_concert  ON concert.concert_id  =  singer_in_concert.concert_id JOIN singer  ON singer_in_concert.singer_id  =  singer.Singer_ID WHERE concert.Year  =  2014 
SELECT singer.Name,  singer.Country FROM singer  JOIN singer_in_concert  ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Song_Name  =  "Hey" 
SELECT singer.Name,  singer.Country FROM singer  JOIN singer_in_concert  ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Song_Name LIKE "%Hey%" 
SELECT stadium.name,  stadium.location FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 INTERSECT SELECT stadium.name,  stadium.location FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2015 
SELECT stadium.name,  stadium.location FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 INTERSECT SELECT stadium.name,  stadium.location FROM stadium  JOIN concert  ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2015 
SELECT count(*) FROM concert  JOIN stadium  ON concert.stadium_id  =  stadium.stadium_id ORDER BY stadium.highest DESC LIMIT 1 
SELECT count(*) FROM concert  JOIN stadium  ON concert.stadium_id  =  stadium.stadium_id ORDER BY stadium.capacity DESC LIMIT 1 
SELECT count(*) FROM Pets WHERE weight  >  10 
SELECT count(*) FROM Pets WHERE weight  >  10 
SELECT pet_age FROM Pets WHERE weight  =  (SELECT min(weight) FROM Pets) 
SELECT pet_age FROM Pets WHERE pet_type  =  "Dog" ORDER BY weight LIMIT 1 
SELECT max(pet_age),  pettype FROM Pets GROUP BY pettype 
SELECT max(pet_age),  pettype FROM Pets GROUP BY pettype 
SELECT count(*) FROM Has_pet  JOIN student  ON has_pet.stuid  =  student.stuid WHERE student.age  >  20 
SELECT count(*) FROM Has_pet  JOIN Pets  ON has_pet.petid  =  Pets.petid JOIN student  ON has_pet.stuid  =  student.stuid WHERE student.age  >  20 
SELECT count(*) FROM Has_pet  JOIN Pets  ON has_pet.petid  =  Pets.petid JOIN Student  ON has_pet.stuid  =  Student.stuid WHERE Student.sex  =  'F' 
SELECT count(*) FROM Has_pet  JOIN Pets  ON has_pet.petid  =  Pets.petid JOIN Student  ON has_pet.stuid  =  Student.stuid WHERE Student.sex  =  'F' 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT count(DISTINCT pet_type) FROM Pets 
SELECT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' OR pets.pettype  =  'dog' 
SELECT DISTINCT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' OR pets.pettype  =  'dog' 
SELECT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' INTERSECT SELECT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog' 
SELECT DISTINCT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' INTERSECT SELECT DISTINCT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog' 
SELECT major,  age FROM student WHERE major!= 'CAT' 
SELECT major FROM student WHERE major!= "PetType" AND has_pet.petid!= "Cat" 
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_pet WHERE PetType  =  'Cat' 
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_pet WHERE PetType  =  'Cat' 
SELECT student.fname,  student.age FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog' EXCEPT SELECT student.fname,  student.age FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' 
SELECT DISTINCT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog' EXCEPT SELECT DISTINCT student.fname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat' 
SELECT pet_type,  weight FROM Pets ORDER BY pet_age LIMIT 1 
SELECT pet_type FROM Pets ORDER BY pet_age LIMIT 1 
SELECT pet_id,  weight FROM Pets WHERE pet_age  >  1 
SELECT pet_id,  weight FROM Pets WHERE pet_age  >  1 
SELECT pet_type,  avg(pet_age),  max(pet_age) FROM Pets GROUP BY pet_type 
SELECT avg(pet_age),  max(pet_age),  pet_type FROM Pets GROUP BY pet_type 
SELECT avg(pet_age),  pettype FROM Pets GROUP BY pettype 
SELECT avg(pet_age),  pettype FROM Pets GROUP BY pettype 
SELECT student.fname,  student.age FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid 
SELECT DISTINCT student.fname,  student.age FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid 
SELECT pet_id FROM has_pet WHERE StuID IN (SELECT StuID FROM student WHERE LName  =  'Smith') 
SELECT pet_id FROM has_pet WHERE StuID = (SELECT StuID FROM student WHERE LName = 'Smith') 
SELECT count(*),  student.stuid FROM has_pet  JOIN student  ON has_pet.stuid  =  student.stuid JOIN pets  ON has_pet.petid  =  pets.petid GROUP BY student.stuid 
SELECT StuID,  count(*) FROM Has_pet GROUP BY StuID 
SELECT student.fname,  student.sex FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid GROUP BY student.stuid HAVING count(*)  >  1 
SELECT student.fname,  student.sex FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid GROUP BY student.stuid HAVING count(*)  >  1 
SELECT student.lname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  "Cat" AND pets.pet_age  =  3 
SELECT student.lname FROM student  JOIN has_pet  ON student.stuid  =  has_pet.stuid JOIN pets  ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  "Cat" AND pets.pet_age  =  3 
SELECT avg(age) FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM Has_pet) 
SELECT avg(age) FROM STUDENT WHERE stuid NOT IN (SELECT stuid FROM has_pet) 
SELECT count(DISTINCT continent) FROM continents; 
SELECT count(*) FROM continents 
SELECT count(*),  Continent,  COUNT(*) FROM continents GROUP BY Continent 
SELECT continent.ContId,  continent.Continent,  COUNT(*) FROM continents  JOIN countries  ON continents.ContId  =  countries.ContId GROUP BY continents.ContId 
SELECT count(DISTINCT ContId) FROM continents 
SELECT count(*) FROM continents; 
SELECT car_makers.FullName,  car_makers.Id,  COUNT(*) FROM car_makers  JOIN car_names  ON car_makers.Id  =  car_names.MakeId GROUP BY car_makers.FullName 
SELECT car_makers.FullName,  COUNT(*) FROM car_makers  JOIN model_list  ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.FullName 
SELECT cars_data.Model FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Horsepower  =  (SELECT min(Horsepower) FROM car_names) 
SELECT cars_data.Model FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId ORDER BY Horsepower LIMIT 1 
SELECT cars_data.Model FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Weight  <  (SELECT avg(Weight) FROM car_names) 
SELECT model FROM cars_data WHERE Weight  <  (SELECT avg(Weight) FROM cars_data) 
SELECT car_makers.Maker FROM model_list  JOIN car_names  ON model_list.MakeId  =  car_names.MakeId JOIN cars_data  ON model_list.MakeId  =  cars_data.MakeId WHERE model_list.Year  =  1970 
SELECT DISTINCT car_makers.Maker FROM model_list  JOIN car_names  ON model_list.MakeId  =  car_names.MakeId JOIN cars_data  ON model_list.MakeId  =  cars_data.MakeId WHERE model_list.Year  =  1970 
SELECT car_names.Make,  cars_data.Year FROM cars_data  JOIN car_names  ON cars_data.Make  =  car_names.Make ORDER BY cars_data.Year LIMIT 1 
SELECT car_makers.Maker,  model_list.Year FROM model_list  JOIN car_names  ON model_list.Model  =  car_names.Model JOIN cars_data  ON cars_data.MakeId  =  car_names.MakeId WHERE cars_data.Year  =  (SELECT min(Year) FROM cars_data) 
SELECT DISTINCT model FROM car_names WHERE YEAR  >  1980 
SELECT DISTINCT model FROM model_list WHERE YEAR  >  1980 
SELECT count(*),  continents.Continent FROM continents  JOIN car_makers  ON continents.ContId  =  car_makers.ContId GROUP BY continents.ContId 
SELECT count(*),  continent FROM continents GROUP BY continent 
SELECT country FROM car_makers GROUP BY country ORDER BY count(*) DESC LIMIT 1 
SELECT country FROM car_makers GROUP BY country ORDER BY count(*) DESC LIMIT 1 
SELECT car_makers.FullName,  COUNT(*) FROM model_list  JOIN car_makers  ON model_list.Maker  =  car_makers.Id GROUP BY car_makers.FullName 
SELECT car_makers.FullName,  count(*) FROM model_list  JOIN car_makers  ON model_list.Maker  =  car_makers.Id GROUP BY car_makers.FullName 
SELECT cars_data.Accelerate FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId JOIN model_list  ON cars_data.ModelId  =  model_list.ModelId WHERE model_list.Make  =  "amc" AND model_list.Model  =  "hornet sportabout" 
SELECT cars_data.Accelerate FROM cars_data  JOIN model_list  ON cars_data.MakeId  =  model_list.MakeId JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE model_list.Model  =  "amc hornet sportabout" AND car_names.Make  =  "amc"; 
SELECT count(*) FROM car_makers WHERE country  =  'france' 
SELECT count(*) FROM car_makers WHERE country  =  'France' 
SELECT count(*) FROM model_list WHERE country  =  'usa'; 
SELECT count(*) FROM model_list WHERE country  =  'United States' 
SELECT avg(cars_data.mpg) FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Cylinders  =  4 
SELECT avg(cars_data.MPG) FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE cars_data.Cylinders  =  4 
SELECT min(Weight) FROM cars_data WHERE Cylinders  =  8 AND YEAR  =  1974 
SELECT min(Weight) FROM cars_data WHERE YEAR  =  1974 AND Cylinders  =  8 
SELECT car_makers.Maker,  model_list.Model FROM car_makers  JOIN model_list  ON car_makers.Id  =  model_list.Maker 
SELECT car_makers.Maker,  model_list.Model FROM car_makers  JOIN model_list  ON car_makers.Id  =  model_list.Maker 
SELECT car_makers.FullName,  car_makers.CountryId FROM car_makers  JOIN model_list  ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.CountryId HAVING count(*)  >=  1 
SELECT car_makers.Maker,  countries.ContId FROM countries  JOIN car_makers  ON countries.ContId  =  car_makers.ContId JOIN model_list  ON model_list.Maker  =  car_makers.Maker WHERE car_makers.FullName  =  "Car Maker" GROUP BY car_makers.Maker HAVING COUNT(*)  >=  1 
SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
SELECT count(*) FROM cars_data WHERE Horsepower  >  150 
SELECT avg(Weight) FROM cars_data 
SELECT avg(Weight),  avg(Year) FROM cars_data GROUP BY YEAR 
SELECT countries.Continent FROM countries  JOIN car_makers  ON countries.ContId  =  car_makers.ContId GROUP BY countries.ContId HAVING count(*)  >=  3 
SELECT country FROM car_makers GROUP BY country HAVING COUNT(*)  >=  3 
SELECT max(Horsepower),  car_names.Make FROM car_names  JOIN cars_data  ON cars_data.Make  =  car_names.Make WHERE cars_data.Cylinders  =  3 
SELECT cars_data.Horsepower,  car_names.Make FROM cars_data  JOIN car_names  ON cars_data.Make  =  car_names.Make WHERE car_names.Cylinders  =  3 AND cars_data.MPG  =  (SELECT MAX (MPG) FROM cars_data) 
SELECT car_names.Model FROM car_names  JOIN car_names  ON car_names.Make  =  car_names.MakeId WHERE car_names.MPG  =  (SELECT max(MPG) FROM car_names) 
SELECT car_names.Model FROM car_names  JOIN car_names  ON car_names.Make  =  car_names.MakeId WHERE car_names.MPG  =  (SELECT MAX (car_names.MPG) FROM car_names) 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR  <  1980 
SELECT avg(Horsepower) FROM cars_data WHERE YEAR  <  1980 
SELECT avg(cars_data.Edispl) FROM model_list  JOIN car_names  ON model_list.MakeId  =  car_names.MakeId JOIN cars_data  ON cars_data.Id  =  car_names.MakeId WHERE model_list.FullName  =  "Volvo" 
SELECT avg(Edispl) FROM cars_data WHERE Make  =  "Volvo"; 
SELECT max(Accelerate),  Cylinders FROM cars_data GROUP BY Cylinders 
SELECT max(Accelerate) FROM cars_data 
SELECT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1 
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM cars_data WHERE Cylinders  >  4 
SELECT count(*) FROM cars_data WHERE Cylinders  >  4 
SELECT count(*) FROM cars_data WHERE YEAR  =  1980; 
SELECT count(*) FROM model_list WHERE YEAR  =  1980 
SELECT count(*) FROM car_names  JOIN model_list  ON car_names.MakeId  =  model_list.MakeId WHERE model_list.FullName  =  "American Motor Company" 
SELECT count(*) FROM car_names  JOIN car_makers  ON car_names.MakeId  =  car_makers.Id WHERE car_makers.Maker  =  "American Motor Company" 
SELECT car_makers.FullName,  car_names.MakeId FROM car_names  JOIN model_list  ON car_names.MakeId  =  model_list.MakeId JOIN car_makers  ON model_list.Maker  =  car_makers.Id GROUP BY car_makers.FullName HAVING count(*)  >  3 
SELECT car_makers.Maker,  COUNT(*) FROM model_list  JOIN car_makers  ON model_list.Maker  =  car_makers.Id GROUP BY car_makers.Maker HAVING COUNT(*)  >  3 
SELECT DISTINCT model_list.Model FROM model_list  JOIN car_names  ON model_list.Model  =  car_names.MakeId WHERE car_names.Make  =  "General Motors" OR car_names.Weight  >  3500 
SELECT DISTINCT cars_data.Model FROM cars_data  JOIN car_makers  ON cars_data.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "General Motors" OR cars_data.Weight  >  3500 
SELECT YEAR FROM cars_data WHERE Weight  >=  3000 AND Weight  <=  4000 
SELECT DISTINCT YEAR FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE Weight  >  3000 
SELECT cars_data.Horsepower FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId ORDER BY cars_data.Accelerate DESC LIMIT 1 
SELECT cars_data.Horsepower FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId ORDER BY cars_data.Accelerate DESC LIMIT 1 
SELECT cars_data.Cylinders FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Make  =  "volvo" ORDER BY cars_data.Accelerate LIMIT 1 
SELECT cars_data.Cylinders FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Make  =  "Volvo" ORDER BY cars_data.Accelerate LIMIT 1 
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data) 
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data) 
SELECT count(*) FROM car_makers WHERE country  >  2 
SELECT count(*) FROM car_makers WHERE country  >  2 
SELECT count(*) FROM cars_data WHERE Cylinders  >  6 
SELECT count(*) FROM cars_data WHERE Cylinders  >  6 
SELECT cars_data.Model FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Cylinders  =  4 GROUP BY cars_data.Model ORDER BY max(cars_data.Horsepower) DESC LIMIT 1 
SELECT cars_data.Model FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Cylinders  =  4 GROUP BY cars_data.Model ORDER BY sum(cars_data.Horsepower) DESC LIMIT 1 
SELECT car_names.Make,  car_names.Make FROM cars_data  JOIN car_names  ON cars_data.Make  =  car_names.Make WHERE cars_data.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) AND car_names.Make!= "Citroen" 
SELECT car_names.Make,  car_names.Model FROM car_names  JOIN car_names  ON car_names.Make  =  car_names.Make WHERE car_names.Horsepower  <  4 
SELECT max(cars_data.MPG) FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Make  =  "Chevrolet" AND cars_data.Cylinders  =  8 AND cars_data.Year  <  1980 
SELECT max(cars_data.MPG) FROM cars_data  JOIN car_names  ON cars_data.MakeId  =  car_names.MakeId WHERE car_names.Cylinders  =  8 AND cars_data.Year  <  1980 
SELECT model FROM car_names WHERE Weight  <  3500 AND Make!= 'Ford Motor Company' 
SELECT DISTINCT model FROM cars_data WHERE Weight  <  3500 AND Make!= "Ford Motor Company" 
SELECT country FROM countries WHERE countryid NOT IN (SELECT countryid FROM car_makers) 
SELECT country FROM countries WHERE contid NOT IN (SELECT contid FROM car_makers) 
SELECT car_makers.id,  car_makers.maker FROM car_makers  JOIN model_list  ON car_makers.id  =  model_list.maker_id GROUP BY car_makers.id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.id,  car_makers.maker FROM car_makers  JOIN model_list  ON car_makers.id  =  model_list.maker_id GROUP BY car_makers.id HAVING count(*)  >  3 
SELECT car_makers.id,  car_makers.maker FROM car_makers  JOIN model_list  ON car_makers.id  =  model_list.maker GROUP BY car_makers.id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.id,  car_makers.maker FROM car_makers  JOIN model_list  ON car_makers.id  =  model_list.maker GROUP BY car_makers.id HAVING count(*)  >  3 
SELECT car_makers.Country,  car_names.Make FROM car_names  JOIN model_list  ON car_names.Model  =  model_list.Model JOIN car_makers  ON car_makers.Id  =  model_list.Maker WHERE car_makers.FullName  =  'Fiat' GROUP BY car_makers.Country HAVING count(*)  >  3 
SELECT car_makers.id,  car_makers.maker FROM car_makers  JOIN model_list  ON car_makers.id  =  model_list.maker_id WHERE model_list.full_name  =  "Fiat" GROUP BY car_makers.id HAVING count(*)  >  3 OR car_makers.full_name  =  "Fiat" 
SELECT Country FROM airlines WHERE Airline  =  "JetBlue Airways" 
SELECT Country FROM airlines WHERE Airline  =  "Jetblue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline  =  "JetBlue Airways" 
SELECT Abbreviation FROM airlines WHERE Airline  =  "Jetblue Airways" 
SELECT Airline,  Abbreviation FROM airlines WHERE Country  =  "USA" 
SELECT Airline,  Abbreviation FROM airlines WHERE Country  =  'USA' 
SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
SELECT AirportCode,  AirportName FROM airports WHERE City  =  "Anthony" 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airlines 
SELECT count(*) FROM airports 
SELECT count(*) FROM airports 
SELECT count(*) FROM flights 
SELECT count(*) FROM flights 
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
SELECT Airline FROM airlines WHERE Abbreviation  =  'UAL' 
SELECT count(*) FROM airlines WHERE Country  =  'USA' 
SELECT count(*) FROM airlines WHERE Country  =  'USA' 
SELECT City,  Country FROM airports WHERE AirportCode  =  "ALT" 
SELECT City,  Country FROM airports WHERE AirportCode  =  "ALT" 
SELECT airports.AirportName FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  'AKO' 
SELECT airports.City FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE flights.AirportCode  =  'AKO' 
SELECT AirportName FROM airports WHERE City  =  'Aberdeen' 
SELECT AirportName FROM airports WHERE Country  =  "United Kingdom" AND City  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  'APG' 
SELECT count(*) FROM flights WHERE DestAirport  =  'APG' 
SELECT count(*) FROM flights WHERE DestAirport  =  "ATO" 
SELECT count(*) FROM flights WHERE DestAirport  =  "ATO" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.City  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.City WHERE airports.City  =  'Aberdeen' AND airports.CityAbbrev  =  'Ashley' 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode JOIN airports  ON flights.SourceAirport  =  airports.AirportCode WHERE airports.City  =  "Aberdeen" AND airports.AirportName  =  "Ashley" 
SELECT count(*) FROM flights  JOIN airlines  ON flights.DestAirport  =  airlines.Airline WHERE airlines.Airline  =  'JetBlue Airways' 
SELECT count(*) FROM flights  JOIN airlines  ON flights.DestAirport  =  airlines.Airline WHERE airlines.Airline  =  "JetBlue Airways" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.AirportName  =  "ASY" AND airports.Country  =  "United States" AND airports.CountryAbbrev  =  "US" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.AirportName  =  "ASY" AND airports.Country  =  "United States" AND airports.CountryAbbrev  =  "US" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.AirportName  =  "AHD" AND airports.Country  =  "United States" AND airports.AirportCode  =  "AHD" 
SELECT count(*) FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.AirportName  =  "AHD" AND airports.Country  =  "United States" AND airports.CountryAbbrev  =  "USA" 
SELECT count(*) FROM flights  JOIN airlines  ON flights.DestAirport  =  airlines.AirportCode WHERE airlines.Airline  =  'United Airlines' AND airports.City  =  'Aberdeen' 
SELECT count(*) FROM flights  JOIN airlines  ON flights.DestAirport  =  airlines.AirportCode WHERE airlines.Airline  =  "United Airlines" AND airports.City  =  "Aberdeen" 
SELECT airports.City FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT airports.City FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1 
SELECT SourceAirport FROM airports GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1 
SELECT airports.AirportCode FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) ASC LIMIT 1 
SELECT airports.AirportCode FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) LIMIT 1 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1 
SELECT airlines.abbreviation,  airlines.country FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.abbreviation ORDER BY count(*) LIMIT 1 
SELECT airlines.abbreviation,  airlines.country FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.abbreviation ORDER BY count(*) LIMIT 1 
SELECT flights.SourceAirport FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.City  =  'AHD' 
SELECT flights.SourceAirport FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.City  =  "AHD" 
SELECT flights.SourceAirport FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.City  =  'AHD' 
SELECT flights.DestAirport FROM flights  JOIN airports  ON flights.DestAirport  =  airports.AirportCode WHERE airports.City  =  "AHD" 
SELECT flights.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport INTERSECT SELECT flights.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.SourceAirport 
SELECT airlines.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "APG" INTERSECT SELECT airports.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.SourceAirport WHERE airports.City  =  "CVO" 
SELECT airlines.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  'CVO' EXCEPT SELECT airlines.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.SourceAirport 
SELECT airlines.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "CVO" EXCEPT SELECT airlines.Airline FROM airports  JOIN flights  ON airports.AirportCode  =  flights.SourceAirport 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline HAVING count(*)  >=  10 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline HAVING count(*)  >=  10 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline HAVING count(*)  <  200 
SELECT airlines.Airline FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport GROUP BY airlines.Airline HAVING count(*)  <  200 
SELECT flights.FlightNo FROM airlines  JOIN flights  ON airlines.uid  =  flights.DestAirport WHERE airlines.Airline  =  "United Airlines" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.Airline  =  "United Airlines" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "APG" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "APG" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "APG" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "APG" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "Aberdeen" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "Aberdeen" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "Aberdeen" 
SELECT flights.FlightNo FROM airports  JOIN flights  ON airports.AirportCode  =  flights.DestAirport WHERE airports.City  =  "Aberdeen" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" OR DestAirport  =  "Abilene" 
SELECT count(*) FROM flights WHERE DestAirport  =  "Aberdeen" OR DestAirport  =  "Abilene" 
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DestAirport FROM flights) 
SELECT AirportCode FROM airports WHERE AirportName!= "Departing" AND AirportName!= "Arriving" 
SELECT count(*) FROM employee 
SELECT count(*) FROM employee 
SELECT name FROM employee ORDER BY age ASC 
SELECT name,  age FROM employee ORDER BY age ASC 
SELECT count(*),  city FROM employee GROUP BY city 
SELECT count(*),  city FROM employee GROUP BY city 
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION 
SELECT count(*),  LOCATION FROM shop GROUP BY LOCATION 
SELECT manager_name,  district FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT employee.manager_name,  shop.district FROM shop  JOIN employee  ON shop.shop_id  =  employee.shop_id ORDER BY number_products DESC LIMIT 1 
SELECT min(number_products),  max(number_products) FROM shop 
SELECT min(Number_products),  max(Number_products) FROM shop 
SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
SELECT name,  LOCATION,  district FROM shop ORDER BY number_products DESC 
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) 
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) 
SELECT employee.name FROM employee  JOIN evaluation  ON employee.employee_id  =  evaluation.employee_id GROUP BY employee.employee_id ORDER BY count(*) DESC LIMIT 1 
SELECT employee.Name FROM employee  JOIN evaluation  ON employee.Employee_ID  =  evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY count(*) DESC LIMIT 1 
SELECT employee.name FROM employee  JOIN hiring  ON employee.employee_id  =  hiring.employee_id JOIN evaluation  ON hiring.employee_id  =  evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1 
SELECT employee.name FROM employee  JOIN evaluation  ON employee.employee_id  =  evaluation.employee_id ORDER BY bonus DESC LIMIT 1 
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation) 
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation) 
SELECT shop.name FROM hiring  JOIN shop  ON hiring.shop_id  =  shop.shop_id GROUP BY hiring.shop_id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) 
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) 
SELECT count(*),  shop.name FROM hiring  JOIN shop  ON hiring.shop_id  =  shop.shop_id GROUP BY hiring.shop_id 
SELECT count(*),  shop.name FROM shop  JOIN hiring  ON shop.shop_id  =  hiring.shop_id GROUP BY hiring.shop_id 
SELECT sum(bonus) FROM evaluation 
SELECT sum(bonus) FROM evaluation 
SELECT * FROM hiring 
SELECT * FROM hiring 
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000 
SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(DISTINCT LOCATION) FROM shop 
SELECT count(*) FROM Documents 
SELECT count(*) FROM Documents 
SELECT Document_ID,  Document_Name,  Document_Description FROM Documents 
SELECT document_id,  document_name,  document_description FROM documents 
SELECT Documents.document_name,  Templates.template_id FROM Documents  JOIN Templates  ON Documents.template_id  =  Templates.template_id WHERE Documents.document_description LIKE "%w%" 
SELECT Documents.document_name,  Templates.template_id FROM Documents  JOIN Templates  ON Documents.template_id  =  Templates.template_id WHERE Templates.template_type_description  =  "letter w" 
SELECT Documents.document_id,  Templates.template_id,  Documents.document_description FROM Documents  JOIN Templates  ON Documents.template_id  =  Templates.template_id JOIN Documents  ON Documents.document_id  =  Templates.template_id WHERE Documents.document_name  =  "Robbin CV" 
SELECT Documents.document_id,  Templates.template_id,  Documents.document_name FROM Documents  JOIN Templates  ON Documents.template_id  =  Templates.template_id JOIN Documents  ON Documents.document_id  =  Templates.template_id WHERE Documents.document_name  =  "Robbin CV" 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(DISTINCT template_id) FROM Documents 
SELECT count(*) FROM Documents  JOIN Templates  ON Documents.Template_ID  =  Templates.Template_ID WHERE Templates.Template_Type_Code  =  'PPT' 
SELECT count(*) FROM Documents  JOIN Templates  ON Documents.Template_ID  =  Templates.Template_ID WHERE Templates.Template_Type_Code  =  "PPT" 
SELECT templates.template_id,  count(*) FROM templates  JOIN documents  ON templates.template_id  =  documents.template_id GROUP BY templates.template_id 
SELECT count(*),  templates.template_id FROM documents  JOIN templates  ON documents.template_id  =  templates.template_id GROUP BY templates.template_id 
SELECT templates.template_id,  ref_template_types.template_type_code FROM templates  JOIN ref_template_types  ON templates.template_type_code  =  ref_template_types.template_type_code GROUP BY templates.template_id ORDER BY count(*) DESC LIMIT 1 
SELECT templates.template_id,  ref_template_types.template_type_code FROM templates  JOIN ref_template_types  ON templates.template_type_code  =  ref_template_types.template_type_code GROUP BY templates.template_id ORDER BY count(*) DESC LIMIT 1 
SELECT templates.template_id FROM templates  JOIN documents  ON templates.template_id  =  documents.template_id GROUP BY templates.template_id HAVING count(*)  >  1 
SELECT templates.template_id FROM templates  JOIN documents  ON templates.template_id  =  documents.template_id GROUP BY templates.template_id HAVING count(*)  >  1 
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents 
SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents 
SELECT count(*) FROM Templates 
SELECT count(*) FROM Templates 
SELECT template_id,  version_number,  template_type_code FROM Templates 
SELECT template_id,  version_number,  template_type_code FROM Templates 
SELECT DISTINCT Template_Type_Code FROM Templates 
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types 
SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT' 
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT' 
SELECT count(*) FROM Templates WHERE Template_Type_Code  =  "CV" 
SELECT count(*) FROM Templates WHERE Template_Type_Code  =  "CV" 
SELECT template_type_code,  template_type_description FROM Ref_template_types WHERE template_type_description  =  "Later than 5" 
SELECT Date_Effective_From,  Template_Type_Code FROM Templates WHERE Date_Effective_To  >  5 
SELECT Ref_template_types.template_type_code,  count(*) FROM ref_template_types  JOIN templates  ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY ref_template_types.template_type_code 
SELECT count(*),  Ref_template_types.template_type_code FROM ref_template_types  JOIN templates  ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY ref_template_types.template_type_code 
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING count(*)  <  3 
SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  "Template Type 1" GROUP BY template_type_code HAVING count(*)  <  3 
SELECT min(Version_Number),  Ref_Template_Types.template_type_code FROM Templates  JOIN Ref_Template_Types  ON Templates.template_type_code  =  Ref_Template_Types.template_type_code GROUP BY Ref_Template_Types.template_type_code 
SELECT min(Version_Number),  Ref_Template_Types.template_type_code FROM Templates  JOIN Ref_Template_Types  ON Templates.template_type_code  =  Ref_Template_Types.template_type_code GROUP BY Ref_Template_Types.template_type_code 
SELECT templates.template_type_code FROM documents  JOIN templates  ON documents.template_id  =  templates.template_id WHERE documents.document_name  =  "Data base" 
SELECT templates.template_type_code FROM documents  JOIN templates  ON documents.template_id  =  templates.template_id WHERE documents.document_name  =  "Data base" 
SELECT Document_Name FROM Documents WHERE Template_Type_Code  =  'BK' 
SELECT Documents.Document_Name FROM Documents  JOIN Templates  ON Documents.Template_ID  =  Templates.Template_ID WHERE Templates.Template_Type_Code  =  'BK' 
SELECT Ref_Template_Types.template_type_code,  count(*) FROM Templates  JOIN Documents  ON Templates.template_id  =  Documents.template_id GROUP BY Ref_Template_Types.template_type_code 
SELECT count(DISTINCT template_type_code),  template_type_code FROM ref_template_types GROUP BY template_type_code 
SELECT Ref_template_types.template_type_code FROM ref_template_types  JOIN documents  ON ref_template_types.template_type_code  =  documents.template_id GROUP BY ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Ref_template_types.template_type_code FROM ref_template_types  JOIN templates  ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY count(*) DESC LIMIT 1 
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Documents 
SELECT template_type_code FROM ref_template_types EXCEPT SELECT template_type_code FROM documents 
SELECT template_type_code,  template_type_description FROM Ref_template_types 
SELECT template_type_code,  template_type_description FROM Ref_template_types 
SELECT Ref_template_types.template_type_description FROM ref_template_types  JOIN templates  ON ref_template_types.template_type_code  =  templates.template_type_code WHERE ref_template_types.template_type_description  =  "AD" 
SELECT Ref_template_types.template_type_description FROM ref_template_types  JOIN templates  ON ref_template_types.template_type_code  =  templates.template_type_code WHERE ref_template_types.template_type_description  =  "AD" 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book" 
SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  "Book" 
SELECT DISTINCT ref_template_types.template_type_description FROM documents  JOIN ref_template_types  ON documents.template_id  =  ref_template_types.template_id 
SELECT DISTINCT Documents.document_description FROM Documents  JOIN Templates  ON Documents.template_id  =  Templates.template_id 
SELECT template_id FROM Templates WHERE template_type_description  =  "Presentation" 
SELECT template_id FROM templates WHERE template_details  =  'Presentation' 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Paragraphs 
SELECT count(*) FROM Documents  JOIN Paragraphs  ON Documents.Document_ID  =  Paragraphs.Document_ID WHERE Documents.Document_Name  =  'Summer Show' 
SELECT count(*) FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Documents.document_name  =  'Summer Show' 
SELECT Paragraphs.Paragraph_Text FROM Paragraphs  JOIN Documents  ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Documents.Document_Description  =  'Korea ' 
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text  =  'Korea' 
SELECT Paragraphs.paragraph_id,  Paragraphs.paragraph_text FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Documents.document_name  =  'Welcome to NY' 
SELECT Paragraphs.paragraph_id,  Paragraphs.paragraph_text FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Documents.document_name  =  'Welcome to NY' 
SELECT Paragraphs.Paragraph_Text FROM Documents  JOIN Paragraphs  ON Documents.Document_ID  =  Paragraphs.Document_ID WHERE Documents.Document_Name  =  "Customer reviews" 
SELECT Paragraphs.Paragraph_Text FROM Documents  JOIN Paragraphs  ON Documents.Document_ID  =  Paragraphs.Document_ID WHERE Documents.Document_Name  =  'Customer reviews' 
SELECT document_id,  count(*) FROM Documents GROUP BY document_id ORDER BY count(*) 
SELECT document_id,  count(*) FROM Documents GROUP BY document_id ORDER BY count(*) DESC 
SELECT document_id,  document_name,  count(*) FROM Documents GROUP BY document_id 
SELECT document_id,  count(*),  document_name FROM documents GROUP BY document_id 
SELECT document_id FROM documents GROUP BY document_id HAVING count(*)  >=  2 
SELECT document_id FROM documents GROUP BY document_id HAVING count(*)  >=  2 
SELECT Documents.document_id,  Documents.document_name FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id GROUP BY Documents.document_id ORDER BY count(*) DESC LIMIT 1 
SELECT document_id,  document_name FROM documents ORDER BY count(*) DESC LIMIT 1 
SELECT document_id FROM documents ORDER BY count(*) LIMIT 1 
SELECT document_id FROM documents ORDER BY count(*) LIMIT 1 
SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text LIKE "%1%") 
SELECT document_id FROM documents WHERE document_name  =  "Document 1" AND paragraph_id BETWEEN 1 AND 2 
SELECT Documents.document_id FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Paragraphs.paragraph_text  =  'Brazil' INTERSECT SELECT Documents.document_id FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Paragraphs.paragraph_text  =  'Ireland' 
SELECT Documents.document_id FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Paragraphs.paragraph_text  =  'Brazil' INTERSECT SELECT Documents.document_id FROM Documents  JOIN Paragraphs  ON Documents.document_id  =  Paragraphs.document_id WHERE Paragraphs.paragraph_text  =  'Ireland' 
SELECT count(DISTINCT teacher_id) FROM teacher 
SELECT count(*) FROM teacher 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Name FROM teacher ORDER BY Age ASC 
SELECT Age,  Hometown FROM teacher 
SELECT Age,  Hometown FROM teacher 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Hometown!= "Little Lever Urban District" 
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
SELECT name FROM teacher ORDER BY age LIMIT 1 
SELECT count(*),  Hometown FROM teacher GROUP BY Hometown 
SELECT count(DISTINCT teacher_id),  hometown FROM teacher GROUP BY hometown 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2 
SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(*)  >=  2 
SELECT teacher.Name,  course_arrange.Course_ID FROM course_arrange  JOIN course  ON course_arrange.Course_ID  =  course.Course_ID JOIN teacher  ON course_arrange.Teacher_ID  =  teacher.Teacher_ID 
SELECT name,  course FROM teacher 
SELECT teacher.Name,  course_arrange.Course_ID FROM course_arrange  JOIN course  ON course_arrange.Course_ID  =  course.Course_ID JOIN teacher  ON course_arrange.Teacher_ID  =  teacher.Teacher_ID ORDER BY teacher.Name 
SELECT Name,  Course FROM teacher ORDER BY Name ASC 
SELECT Name FROM teacher WHERE Course  =  'Math' 
SELECT Name FROM teacher WHERE CLASS_CODE  =  'MATH' 
SELECT name,  count(*) FROM teacher GROUP BY name 
SELECT name,  count(*) FROM teacher GROUP BY name 
SELECT Name FROM teacher GROUP BY Name HAVING COUNT(*)  >=  2 
SELECT name FROM teacher GROUP BY name HAVING count(*)  >=  2 
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange) 
SELECT Name FROM teacher WHERE Course_ID NOT IN (SELECT Course_ID FROM course_arrange) 
SELECT count(*) FROM visitor WHERE Age  <  30 
SELECT Name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership 
SELECT avg(age) FROM visitor WHERE membership_level!= 4 
SELECT Name,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY Age 
SELECT museum.Museum_ID,  museum.Name FROM museum  JOIN visit  ON museum.Museum_ID  =  visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY count(*) DESC LIMIT 1 
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year  <  2009 
SELECT open_year,  num_of_staff FROM museum WHERE name  =  "Plaza Museum" 
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010) 
SELECT visitor.ID,  visitor.Name,  visitor.Age FROM visit  JOIN visitor  ON visit.visitor_ID  =  visitor.ID GROUP BY visit.visitor_ID HAVING count(*)  >  1 
SELECT visitor.ID,  museum.Name,  museum.open_year,  max(visit.num_of_ticket) FROM visit  JOIN museum  ON visit.museum_id  =  museum.museum_id JOIN visitor  ON visit.visitor_id  =  visitor.visitor_id GROUP BY visitor.id 
SELECT museum.Museum_ID,  museum.Name FROM visit  JOIN museum  ON visit.Museum_ID  =  museum.Museum_ID GROUP BY visit.Museum_ID ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit) 
SELECT visitor.Name,  visitor.Age FROM visit  JOIN visitor  ON visit.visitor_ID  =  visitor.ID GROUP BY visit.visitor_ID ORDER BY count(*) DESC LIMIT 1 
SELECT avg(Num_of_Ticket),  max(Num_of_Ticket) FROM visit 
SELECT sum(visit.Num_of_Ticket) FROM visitor  JOIN visit  ON visitor.ID  =  visit.visitor_ID WHERE visitor.Level_of_membership  =  1 
SELECT visitor.Name FROM visit  JOIN visitor  ON visit.visitor_id  =  visitor.id JOIN museum  ON visit.museum_id  =  museum.museum_id WHERE museum.open_year  <  2009 INTERSECT SELECT visitor.Name FROM visit  JOIN visitor  ON visit.visitor_id  =  visitor.id JOIN museum  ON visit.museum_id  =  museum.museum_id WHERE museum.open_year  >  2011 
SELECT count(*) FROM visitor WHERE age!= 1 AND open_year  >  2010 
SELECT count(*) FROM museum WHERE Open_Year  >  2013 OR Open_Year  <  2008 
SELECT count(*) FROM players 
SELECT count(*) FROM players 
SELECT count(*) FROM matches 
SELECT count(*) FROM matches 
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA' 
SELECT first_name,  birth_date FROM players WHERE country_code  =  'USA' 
SELECT avg(loser_age),  avg(winner_age) FROM matches 
SELECT avg(loser_age),  avg(winner_age) FROM matches 
SELECT avg(rank) FROM matches 
SELECT avg(rank) FROM matches WHERE winner_rank!= "Winner" 
SELECT max(loser_rank) FROM matches 
SELECT max(loser_rank) FROM matches 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT country_code) FROM players 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT count(DISTINCT loser_name) FROM matches 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 
SELECT players.player_id FROM players  JOIN matches  ON players.player_id  =  matches.winner_id WHERE matches.tourney_date  =  "2013" INTERSECT SELECT players.player_id FROM players  JOIN matches  ON players.player_id  =  matches.loser_id WHERE matches.tourney_date  =  "2016" 
SELECT players.player_id FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id WHERE rankings.year  =  2013 INTERSECT SELECT players.player_id FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id WHERE rankings.year  =  2016 
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 
SELECT count(*) FROM matches WHERE tourney_date LIKE "%2013%" OR tourney_date LIKE "%2016%" 
SELECT players.country_code,  players.first_name FROM players  JOIN rankings  ON players.player_id  =  rankings.loser_id JOIN matches  ON rankings.match_num  =  matches.match_num JOIN players  ON players.player_id  =  matches.winner_id WHERE matches.tourney_id  =  'WTA Championships' INTERSECT SELECT players.country_code,  players.first_name FROM players  JOIN rankings  ON players.player_id  =  rankings.winner_id JOIN matches  ON rankings.match_num  =  matches.match_num JOIN players  ON players.player_id  =  matches.loser_id WHERE matches.tourney_id  =  'Australian Open' 
SELECT players.first_name,  players.country_code FROM players  JOIN matches  ON players.player_id  =  matches.loser_id INTERSECT SELECT players.first_name,  players.country_code FROM players  JOIN matches  ON players.player_id  =  matches.winner_id 
SELECT players.first_name,  players.country_code FROM players  JOIN players  ON players.player_id  =  players.player_id ORDER BY players.age DESC LIMIT 1 
SELECT players.first_name,  players.country_code FROM players  JOIN players  ON players.player_id  =  players.player_id ORDER BY players.age DESC LIMIT 1 
SELECT first_name,  last_name FROM players ORDER BY birth_date 
SELECT first_name,  last_name FROM players ORDER BY birth_date 
SELECT players.first_name,  players.last_name FROM players  JOIN matches  ON players.player_id  =  matches.loser_id WHERE players.hand  =  "L" ORDER BY players.birth_date 
SELECT players.first_name,  players.last_name FROM players  JOIN matches  ON players.player_id  =  matches.loser_id WHERE players.hand  =  'left' ORDER BY players.birth_date 
SELECT players.first_name,  players.country_code FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY rankings.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT players.first_name,  players.country_code FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY rankings.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 
SELECT players.name,  rankings.rank,  rankings.rank_points FROM rankings  JOIN players  ON rankings.player_id  =  players.player_id GROUP BY rankings.player_id ORDER BY count(*) DESC LIMIT 1 
SELECT players.name,  players.rank,  players.rank_points FROM players  JOIN rankings  ON players.player_id  =  rankings.loser_id WHERE rankings.rank  =  (SELECT max(rank) FROM rankings) 
SELECT players.name FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id WHERE rankings.tourney_id  =  "Australian Open" ORDER BY rankings.rank_points DESC LIMIT 1 
SELECT players.name FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id WHERE rankings.tournament_id  =  "Australian Open" GROUP BY players.player_id ORDER BY rankings.rank_points DESC LIMIT 1 
SELECT loser_name,  winner_name FROM matches ORDER BY minutes DESC LIMIT 1 
SELECT players.name,  players.name FROM matches  JOIN players  ON matches.loser_id  =  players.player_id JOIN matches  ON matches.match_num  =  matches.match_num JOIN players  ON matches.winner_id  =  players.player_id ORDER BY matches.minutes DESC LIMIT 1 
SELECT avg(ranking),  players.first_name FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY players.first_name 
SELECT players.first_name,  avg(rankings.ranking) FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY players.player_id 
SELECT sum(ranking_points),  players.first_name FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY players.first_name 
SELECT players.first_name,  sum(rankings.ranking_points) FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id GROUP BY players.player_id 
SELECT count(*),  country_code FROM players GROUP BY country_code 
SELECT country_code,  count(*) FROM players GROUP BY country_code 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*)  >  50 
SELECT sum(tours),  ranking_date FROM rankings GROUP BY ranking_date 
SELECT ranking,  count(*) FROM rankings GROUP BY ranking 
SELECT count(*),  YEAR FROM matches GROUP BY YEAR 
SELECT count(*),  YEAR FROM matches GROUP BY YEAR 
SELECT players.name,  rankings.rank FROM players  JOIN rankings  ON players.player_id  =  rankings.loser_id WHERE players.age  =  (SELECT min(age) FROM players) 
SELECT players.first_name,  players.last_name,  rankings.rank FROM rankings  JOIN players  ON rankings.player_id  =  players.player_id ORDER BY players.age LIMIT 3 
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_level  =  "WTA Championships" AND winner_hand  =  "left" 
SELECT count(*) FROM matches  JOIN players  ON matches.loser_id  =  players.player_id WHERE players.hand  =  'left' AND matches.tourney_name  =  'WTA Championships' 
SELECT players.first_name,  players.country_code,  players.birth_date FROM players  JOIN rankings  ON players.player_id  =  rankings.loser_id ORDER BY rankings.rank_points DESC LIMIT 1 
SELECT players.first_name,  players.country_code,  players.birth_date FROM players  JOIN rankings  ON players.player_id  =  rankings.player_id ORDER BY rankings.rank_points DESC LIMIT 1 
SELECT count(*),  hand FROM players GROUP BY hand 
SELECT count(*),  hand FROM players GROUP BY hand 
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured' 
SELECT name,  tonnage FROM ship ORDER BY name DESC 
SELECT name,  date,  result FROM battle 
SELECT max(death.killed),  min(death.killed),  death.caused_by_ship_id FROM death  JOIN ship  ON death.caused_by_ship_id  =  ship.id GROUP BY death.caused_by_ship_id 
SELECT avg(injured) FROM death 
SELECT death.caused_by_ship_id,  death.killed ,  death.injured FROM death  JOIN ship  ON death.caused_by_ship_id  =  ship.id WHERE ship.tonnage  =  't' 
SELECT name,  result FROM battle WHERE bulgarian_commander!= 'Boril' 
SELECT id,  name FROM battle WHERE ship_type  =  'Brig' 
SELECT battle.id,  battle.name FROM battle  JOIN death  ON battle.id  =  death.caused_by_ship_id GROUP BY battle.id HAVING count(*)  >  10 
SELECT ship.id,  ship.name FROM ship  JOIN death  ON ship.id  =  death.caused_by_ship_id GROUP BY death.caused_by_ship_id ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT battle.name FROM battle  JOIN battle  ON battle.bulgarian_commander  =  'Kaloyan' INTERSECT SELECT DISTINCT battle.name FROM battle  JOIN battle  ON battle.latin_commander  =  'Baldwin I' 
SELECT count(DISTINCT result) FROM battle 
SELECT count(*) FROM battle WHERE lost_in_battle!= 0 AND tonnage  =  225 
SELECT battle.name,  battle.date FROM battle  JOIN ship  ON battle.id  =  ship.id WHERE ship.name  =  'Lettice' INTERSECT SELECT battle.name,  battle.date FROM battle  JOIN ship  ON battle.id  =  ship.id WHERE ship.name  =  'HMS Atalanta' 
SELECT battle.name,  battle.result,  battle.bulgarian_commander FROM battle  JOIN ship  ON battle.id  =  ship.id WHERE ship.ship_type  =  'English Channel' EXCEPT SELECT battle.name,  battle.result,  battle.bulgarian_commander FROM battle  JOIN ship  ON battle.id  =  ship.id WHERE ship.ship_type  =  'English Channel' 
SELECT note FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE ship_type  =  'East') 
SELECT addresses.line_1,  addresses.line_2 FROM addresses  JOIN addresses  ON addresses.address_id  =  addresses.address_id WHERE addresses.line_1  =  "line 1" AND addresses.line_2  =  "line 2" 
SELECT line_1,  line_2 FROM addresses 
SELECT count(*) FROM Courses 
SELECT count(*) FROM Courses 
SELECT course_description FROM Courses WHERE course_name  =  "Maths" 
SELECT course_description FROM Courses WHERE course_name  =  "Mathematics" 
SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea"; 
SELECT zip_postcode FROM addresses WHERE city  =  "Port Chelsea"; 
SELECT department_name,  department_id FROM departments GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
SELECT department_name,  department_id FROM DEPARTMENTS GROUP BY department_id ORDER BY count(*) DESC LIMIT 1 
SELECT count(DISTINCT department_id) FROM degree_programs 
SELECT count(DISTINCT department_id) FROM degree_programs 
SELECT count(DISTINCT degree_summary_name) FROM degree_programs 
SELECT count(DISTINCT degree_summary_description) FROM degree_programs 
SELECT count(*) FROM DEPARTMENTS  JOIN Degree_Programs  ON DEPARTMENTS.department_id  =  Degree_Programs.department_id WHERE DEPARTMENTS.department_name  =  "Engineering" 
SELECT count(*) FROM departments  JOIN degree_programs  ON departments.department_id  =  degree_programs.department_id WHERE degree_programs.degree_summary_description  =  "Engineering" 
SELECT DISTINCT section_name,  section_description FROM sections 
SELECT DISTINCT section_name,  section_description FROM sections 
SELECT course_name,  course_id FROM Courses GROUP BY course_id HAVING count(*)  <=  2 
SELECT course_name,  course_id FROM Courses GROUP BY course_id HAVING count(*)  <  2 
SELECT section_name FROM SECTIONS ORDER BY section_name 
SELECT section_name FROM SECTIONS ORDER BY section_name DESC 
SELECT semesters.semester_name,  student_enrolment.student_id FROM student_enrolment  JOIN semesters  ON student_enrolment.semester_id  =  semesters.semester_id GROUP BY student_enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT semester_id,  count(*) FROM students GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1 
SELECT department_description FROM departments WHERE department_name LIKE "%the computer%" 
SELECT department_description FROM departments WHERE department_name LIKE "%computer%" 
SELECT students.first_name,  students.middle_name,  students.last_name,  student_enrolment.student_id FROM student_enrolment  JOIN students  ON student_enrolment.student_id  =  students.student_id JOIN student_enrolment_courses  ON student_enrolment.student_id  =  student_enrolment_courses.student_id JOIN courses  ON student_enrolment_courses.course_id  =  courses.course_id WHERE courses.course_name  =  "BUS 111" AND student_enrolment.semester_id  =  1 
SELECT students.first_name,  students.middle_name,  students.last_name,  student_enrolment.student_id FROM student_enrolment  JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id JOIN student_enrolment  ON student
SELECT students.first_name,  students.middle_name,  students.last_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id JOIN student_enrolment_courses  ON student_enrolment.student_id  =  student_enrolment_courses.student_enrolment_id WHERE student_enrolment_courses.degree_program_id  =  "Bachelor" 
SELECT first_name,  middle_name,  last_name FROM student_enrolment WHERE degree_summary_name  =  "Bachelor" 
SELECT DISTINCT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs  JOIN Student_Enrolment  ON Degree_Programs.degree_summary_description = Student_Enrolment.degree_summary_description GROUP BY Degree_Programs.degree_summary_name ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT student_enrolment.degree_program_id,  student_enrolment.degree_summary_name FROM student_enrolment  JOIN student_enrolment  ON student_enrolment.student_id  =  student_enrolment.student_id GROUP BY student_enrolment.degree_program_id ORDER BY count(*) DESC LIMIT 1 
SELECT degree_program_id,  degree_summary_name FROM Degree_Programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1 
SELECT students.student_id,  count(*),  students.first_name,  students.middle_name,  students.last_name,  students.student_id FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id GROUP BY student_enrolment.student_id ORDER BY count(*) DESC LIMIT 1 
SELECT student_id,  first_name,  middle_name,  last_name,  count(*),  student_id FROM student_enrolment GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 
SELECT semester_name FROM semesters EXCEPT SELECT semesters.semester_name FROM semesters  JOIN student_enrolment  ON semesters.semester_id  =  student_enrolment.semester_id 
SELECT semester_name FROM semesters EXCEPT SELECT semesters.semester_name FROM semesters  JOIN student_enrolment  ON semesters.semester_id  =  student_enrolment.semester_id 
SELECT DISTINCT Courses.course_name FROM Courses  JOIN Student_Enrolment  ON Courses.course_id  =  Student_Enrolment.course_id 
SELECT DISTINCT Courses.course_name FROM Courses  JOIN Student_Enrolment  ON Courses.course_id  =  Student_Enrolment.course_id 
SELECT course_name FROM student_enrolment GROUP BY course_name ORDER BY count(*) DESC LIMIT 1 
SELECT course_name FROM student_enrolment GROUP BY course_name ORDER BY count(*) DESC LIMIT 1 
SELECT students.last_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id WHERE students.state_province_county  =  "North Carolina" EXCEPT SELECT students.last_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id WHERE students.state_province_county  =  "North Carolina" AND student_enrolment.degree_summary_description  =  "Bachelor's degree" 
SELECT students.last_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id WHERE students.state_province_county  =  "North Carolina" AND student_enrolment.student_id NOT IN (SELECT student_id FROM student_enrolment_courses) 
SELECT transcripts.transcript_date,  transcripts.transcript_id FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_course_id  =  student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING count(*)  >=  2 
SELECT transcripts.transcript_date,  transcripts.transcript_id FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_course_id  =  student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING count(*)  >=  2 
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward"; 
SELECT email_address FROM students WHERE first_name = "Timmothy" AND last_name = "Ward"; 
SELECT first_name,  middle_name,  last_name FROM students WHERE date_registered  =  (SELECT date_registered FROM students ORDER BY date_registered LIMIT 1) 
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_registered DESC LIMIT 1 
SELECT students.first_name,  students.middle_name,  students.last_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id WHERE student_enrolment.semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(*) ASC LIMIT 1) 
SELECT first_name,  middle_name,  last_name FROM students ORDER BY date_left ASC LIMIT 1 
SELECT first_name FROM students WHERE permanent_address_id!= current_address_id 
SELECT students.first_name FROM students  JOIN addresses  ON students.permanent_address_id  =  addresses.address_id JOIN addresses  ON addresses.address_id  =  students.current_address_id WHERE addresses.address_description  =  "Permanent address" AND addresses.address_description  =  "Current address" AND addresses.address_id!= students.current_address_id 
SELECT address_id,  line_1 FROM addresses ORDER BY count(*) DESC LIMIT 1 
SELECT addresses.address_id,  addresses.line_1,  addresses.line_2 FROM addresses  JOIN student_enrolment  ON addresses.address_id  =  student_enrolment.address_id GROUP BY student_enrolment.address_id ORDER BY count(*) DESC LIMIT 1 
SELECT avg(transcripts.transcript_date) FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_course_id  =  student_enrolment_courses.student_course_id 
SELECT avg(transcript_date) FROM TRANSCRIPTS 
SELECT Transcripts.transcript_date,  Transcripts.other_details FROM Transcripts  JOIN Student_Enrolment_Courses  ON Transcripts.student_course_id  =  Student_Enrolment_Courses.student_course_id 
SELECT transcripts.transcript_date,  transcripts.other_details FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_course_id  =  student_enrolment_courses.student_course_id 
SELECT count(*) FROM Transcripts 
SELECT count(*) FROM TRANSCRIPTS 
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1 
SELECT transcripts.transcript_date FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_course_id  =  student_enrolment_courses.student_course_id WHERE student_enrolment_courses.date_left  =  (SELECT max(date_left) FROM student_enrolment_courses) 
SELECT count(*),  student_enrolment_id FROM student_enrolment GROUP BY student_enrolment_id HAVING count(*)  <=  4 
SELECT max(count(DISTINCT student_enrolment_id)),  student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id 
SELECT transcripts.transcript_date,  transcripts.student_course_id FROM transcripts  JOIN student_enrolment_courses  ON transcripts.student_enrolment_id  =  student_enrolment_courses.student_enrolment_id GROUP BY transcripts.transcript_date ORDER BY count(*) LIMIT 1 
SELECT transcripts.transcript_date,  transcripts.transcript_id FROM transcripts  JOIN transcript_contents  ON transcripts.transcript_id  =  transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY count(*) LIMIT 1 
SELECT semesters.semester_name FROM student_enrolment  JOIN student_enrolment_courses  ON student_enrolment.student_id  =  student_enrolment_courses.student_id JOIN semesters  ON semesters.semester_id  =  student_enrolment.semester_id WHERE student_enrolment.degree_summary_description  =  "Master" INTERSECT SELECT semesters.semester_name FROM student_enrolment  JOIN student_enrolment_courses  ON student_enrolment.student_id  =  student_enrolment_courses.student_id JOIN semesters  ON semesters.semester_id  =  student_enrolment.semester_id WHERE student_enrolment.degree_summary_description  =  "Bachelor" 
SELECT semester_id FROM student_enrolment WHERE degree_summary_name  =  "Masters" INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_summary_name  =  "Bachelors" 
SELECT count(DISTINCT address_id) FROM students 
SELECT DISTINCT addresses.line_1 FROM addresses  JOIN student_enrolment  ON addresses.address_id  =  student_enrolment.student_address_id 
SELECT * FROM STUDENTS ORDER BY last_name 
SELECT other_student_details FROM STUDENTS ORDER BY last_name 
SELECT section_name FROM SECTIONS; 
SELECT section_description FROM SECTIONS WHERE section_name  =  "h"; 
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country  =  "Haiti") OR cell_mobile_number LIKE "%09700166582%" 
SELECT students.first_name FROM students  JOIN student_enrolment  ON students.student_id  =  student_enrolment.student_id WHERE students.first_name LIKE "%Haiti%" OR students.cell_mobile_number LIKE "%09700166582%" 
SELECT Title FROM Cartoon ORDER BY Title 
SELECT Title FROM Cartoon ORDER BY Title ASC 
SELECT title FROM Cartoon WHERE directed_by  =  "Ben Jones" 
SELECT title FROM Cartoon WHERE directed_by  =  "Ben Jones" 
SELECT count(*) FROM cartoon WHERE written_by  =  "Joseph Kuhr"; 
SELECT count(*) FROM Cartoon WHERE written_by  =  "Joseph Kuhr" 
SELECT title,  directed_by FROM Cartoon ORDER BY original_air_date 
SELECT title,  directed_by FROM cartoon ORDER BY original_air_date 
SELECT title FROM cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti" 
SELECT title FROM Cartoon WHERE directed_by  =  "Ben Jones" OR directed_by  =  "Brandon Vietti" 
SELECT Country,  COUNT(*) FROM TV_channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Country,  COUNT(*) FROM TV_channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT count(DISTINCT series_name),  count(DISTINCT Content) FROM TV_Channel 
SELECT count(DISTINCT series_name),  count(DISTINCT Content) FROM TV_Channel 
SELECT Content FROM TV_Channel WHERE series_name  =  "Sky Radio" 
SELECT Content FROM TV_series WHERE id = 10; 
SELECT Package_Option FROM TV_channel WHERE series_name  =  "Sky Radio" 
SELECT Package_Option FROM TV_Channel WHERE series_name  =  "Sky Radio" 
SELECT count(*) FROM TV_channel WHERE Language  =  "english" 
SELECT count(*) FROM TV_channel WHERE Language  =  'english' 
SELECT Language,  COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT LANGUAGE,  COUNT(*) FROM TV_channel GROUP BY LANGUAGE ORDER BY COUNT(*) LIMIT 1 
SELECT Language,  COUNT(*) FROM TV_channel GROUP BY Language 
SELECT count(*),  language FROM TV_channel GROUP BY language 
SELECT TV_Channel.series_name FROM TV_series  JOIN TV_Channel  ON TV_series.channel  =  TV_Channel.id WHERE TV_series.title  =  "The Rise of the Blue Beetle!" 
SELECT TV_channel.series_name FROM TV_channel  JOIN TV_series  ON TV_channel.id  =  TV_series.channel WHERE TV_series.title  =  "The Rise of the Blue Beetle" 
SELECT Cartoon.title FROM Cartoon  JOIN TV_Channel  ON Cartoon.channel  =  TV_Channel.id WHERE TV_Channel.series_name  =  "Sky Radio" 
SELECT Cartoon.title FROM Cartoon  JOIN TV_Channel  ON Cartoon.channel  =  TV_Channel.id WHERE TV_Channel.series_name  =  "Sky Radio" 
SELECT Episode FROM TV_series ORDER BY Rating 
SELECT Episode FROM TV_series ORDER BY Rating_Share 
SELECT Episode,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT Episode,  max(Rating) FROM TV_series GROUP BY Episode ORDER BY max(Rating) DESC LIMIT 3 
SELECT min(Share),  max(Share) FROM TV_series 
SELECT max(Share),  min(Share) FROM TV_series 
SELECT TV_series.Air_Date FROM TV_series  JOIN TV_Channel  ON TV_series.Channel  =  TV_Channel.id WHERE TV_series.Episode  =  "A Love of a Lifetime" 
SELECT Air_Date FROM TV_series WHERE Episode  =  "A Love of a Lifetime"; 
SELECT Rank FROM TV_series WHERE Episode  =  "A Love of a Lifetime" 
SELECT weekly_rank FROM TV_series WHERE Episode  =  "A Love of a Lifetime" 
SELECT TV_Channel.series_name FROM TV_series  JOIN TV_Channel  ON TV_series.Channel  =  TV_Channel.id WHERE TV_series.Episode  =  "A Love of a Lifetime" 
SELECT TV_series.Episode FROM TV_series  JOIN TV_Channel  ON TV_series.Channel  =  TV_Channel.id WHERE TV_series.Episode  =  "A Love of a Lifetime" 
SELECT Episode FROM TV_series WHERE Channel  =  "Sky Radio" 
SELECT Episode FROM TV_series WHERE id = 10; 
SELECT count(*),  directed_by FROM Cartoon GROUP BY directed_by 
SELECT count(*),  directed_by FROM Cartoon GROUP BY directed_by 
SELECT production_code,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
SELECT Production_code,  Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1 
SELECT package_option,  series_name FROM TV_channel WHERE Hight_definition_TV  =  'Yes' 
SELECT Package_Option,  series_name FROM TV_Channel WHERE Hight_definition_TV  =  'Yes' 
SELECT TV_channel.Country FROM TV_channel  JOIN Cartoon  ON TV_channel.id  =  Cartoon.channel WHERE Cartoon.written_by  =  "Todd Casey" 
SELECT TV_Channel.Country FROM TV_Channel  JOIN Cartoon  ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey" 
SELECT DISTINCT TV_channel.Country FROM TV_channel  JOIN TV_channel  ON TV_channel.id  =  TV_channel.id JOIN TV_channel  ON TV_channel.id  =  TV_channel.id WHERE TV_channel.channel!= "Cartoon" AND TV_channel.Content!= "Cartoon written by Todd Casey" 
SELECT DISTINCT Country FROM TV_Channel WHERE Written_by!= "Todd Casey" 
SELECT TV_channel.series_name,  TV_channel.country FROM TV_channel  JOIN Cartoon  ON TV_channel.id  =  Cartoon.channel WHERE Cartoon.directed_by  =  "Ben Jones" AND Cartoon.written_by  =  "Michael Chang" 
SELECT TV_channel.series_name,  TV_channel.country FROM TV_channel  JOIN Cartoon  ON TV_channel.id  =  Cartoon.channel WHERE Cartoon.directed_by  =  "Ben Jones" INTERSECT SELECT TV_channel.series_name,  TV_channel.country FROM TV_channel  JOIN Cartoon  ON TV_channel.id  =  Cartoon.channel WHERE Cartoon.directed_by  =  "Michael Chang" 
SELECT Pixel_aspect_ratio_PAR,  Country FROM TV_channel WHERE Language!= "english" 
SELECT Pixel_aspect_ratio_PAR,  Country FROM TV_channel WHERE Language!= "English" 
SELECT id FROM TV_channel WHERE Country  >  2 
SELECT id FROM TV_channel GROUP BY id HAVING count(*)  >  2 
SELECT id FROM TV_channel WHERE channel!= "Cartoon" 
SELECT id FROM TV_channel WHERE channel!= "Cartoon" 
SELECT package_option FROM TV_channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by  =  "Ben Jones") 
SELECT package_option FROM TV_channel WHERE id NOT IN (SELECT channel FROM Cartoon) 
SELECT count(*) FROM poker_player 
SELECT count(*) FROM poker_player 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Final_Table_Made,  Best_Finish FROM poker_player 
SELECT Final_Table_Made,  Best_Finish FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT avg(Earnings) FROM poker_player 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000 
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID WHERE poker_player.Earnings  >  300000 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID WHERE poker_player.Earnings  >  300000 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID ORDER BY poker_player.Final_Table_Made ASC 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID ORDER BY count(*) DESC 
SELECT Birth_Date FROM people ORDER BY Earnings LIMIT 1 
SELECT Birth_Date FROM people ORDER BY Earnings LIMIT 1 
SELECT Money_Rank FROM poker_player WHERE Height  =  (SELECT MAX (Height) FROM poker_player) 
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1 
SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
SELECT avg(Earnings) FROM poker_player WHERE Height  >  200 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID ORDER BY poker_player.Earnings DESC 
SELECT people.Name FROM poker_player  JOIN people  ON poker_player.People_ID  =  people.People_ID ORDER BY Earnings DESC 
SELECT Nationality,  COUNT(*) FROM people GROUP BY Nationality 
SELECT count(*),  nationality FROM people GROUP BY nationality 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 
SELECT Name,  Birth_Date FROM people ORDER BY Name ASC 
SELECT Name,  Birth_Date FROM people ORDER BY Name 
SELECT Name FROM people WHERE Nationality!= "Russia" 
SELECT Name FROM people WHERE Nationality!= "Russia" 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(DISTINCT Nationality) FROM people 
SELECT count(*) FROM AREA_CODE_STATE 
SELECT contestant_number,  contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC 
SELECT vote_id,  phone_number,  state FROM VOTES 
SELECT max(area_code),  min(area_code) FROM AREA_CODE_STATE 
SELECT created FROM VOTES WHERE state  =  'CA' 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name!= 'Jessie Alloway' 
SELECT DISTINCT state,  created FROM VOTES 
SELECT contestant_number,  contestant_name FROM CONTESTANTS GROUP BY contestant_number HAVING count(*)  >=  2 
SELECT contestant_number,  contestant_name FROM CONTESTANTS ORDER BY count(*) ASC LIMIT 1 
SELECT count(*) FROM VOTES WHERE state  =  'NY' OR state  =  'CA' 
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES) 
SELECT area_code FROM VOTES GROUP BY area_code ORDER BY count(*) DESC LIMIT 1 
SELECT votes.create_date,  AREA_CODE_STATE.state,  AREA_CODE_STATE.phone_number FROM votes  JOIN AREA_CODE_STATE  ON votes.contestant_number  =  AREA_CODE_STATE.contestant_number WHERE AREA_CODE_STATE.state  =  'Texas' AND AREA_CODE_STATE.phone_number  =  '512' 
SELECT area_code FROM VOTES WHERE contestant_number  =  '100' INTERSECT SELECT area_code FROM VOTES WHERE contestant_number  =  '101' 
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%' 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.indepYear  >  1950 
SELECT name FROM country WHERE independyry  >  1950 
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic' 
SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic' 
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean" 
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Carribean"; 
SELECT Continent FROM country WHERE Name  =  "Anguilla"; 
SELECT Continent FROM country WHERE name  =  "Anguilla"; 
SELECT city.Region FROM city  JOIN citylanguage  ON city.ID  =  citylanguage.CountryCode WHERE city.Name  =  "Kabul" 
SELECT name FROM city WHERE district  =  "Kabul"; 
SELECT language FROM countrylanguage WHERE countrycode  =  'ARU' AND language  =  'English' ORDER BY percentage DESC LIMIT 1 
SELECT countrylanguage.Language FROM countrylanguage  JOIN countrylanguage  ON countrylanguage.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Aruban" AND countrylanguage.Percentage  >  0.50 
SELECT population,  lifeexpectancy FROM country WHERE name  =  "Brazil"; 
SELECT population,  lifeexpectancy FROM country WHERE name  =  "Brazil"; 
SELECT name,  population FROM country WHERE name  =  "Angola"; 
SELECT country.Region,  country.Population FROM country  JOIN city  ON country.id  =  city.id WHERE city.name  =  "Angola" 
SELECT avg(LifeExpectancy) FROM country WHERE region  =  "Central Africa" 
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Central Africa"; 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "Asia" AND country.lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country WHERE lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country WHERE country.continent  =  "Asia")) 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "Asia" AND country.continent  =  "Asia" AND country.lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country) 
SELECT sum(Population),  max(GNP) FROM country WHERE Continent  =  'Asia' 
SELECT GNP FROM country WHERE Region  =  "Asia" GROUP BY GNP ORDER BY max(GNP) DESC LIMIT 1 
SELECT avg(LifeExpectancy) FROM country WHERE Country.Continent  =  'Africa' AND Country.Region  =  'Republic' 
SELECT avg(LifeExpectancy) FROM country WHERE Country.Continent  =  'Africa' AND Country.Regions  =  'Republics' 
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' INTERSECT SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Europe' 
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe' 
SELECT population FROM city WHERE district  =  "Gelderland"; 
SELECT sum(Population) FROM city WHERE district  =  "Gelderland" 
SELECT avg(GNP),  sum(Population) FROM country WHERE country.GovernmentForm  =  'US Territory' 
SELECT avg(GNP),  sum(Population) FROM country WHERE country.Continent  =  'US' 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(DISTINCT language) FROM countrylanguage 
SELECT count(*) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Presidential" 
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa" 
SELECT sum(countrylanguage.Percentage) FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode  =  country.Code WHERE country.Name  =  "Aruba" 
SELECT count(*) FROM countrylanguage WHERE countrycode  =  "Aruba"; 
SELECT COUNT (DISTINCT language) FROM countrylanguage WHERE country  =  "Afghanistan"; 
SELECT COUNT (DISTINCT language) FROM countrylanguage WHERE countrycode  =  "AFG" 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode GROUP BY country.name ORDER BY count(*) DESC LIMIT 1 
SELECT country.name FROM countrylanguage  JOIN country  ON country.code  =  countrylanguage.countrycode GROUP BY country.name ORDER BY sum(countrylanguage.percentage) DESC LIMIT 1 
SELECT country.Continent FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode  =  country.Code GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT country.Continent FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode  =  country.Code GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1 
SELECT count(*) FROM countrylanguage WHERE language  =  "English" INTERSECT SELECT count(*) FROM countrylanguage WHERE language  =  "Dutch" 
SELECT count(*) FROM countrylanguage WHERE language  =  "English" INTERSECT SELECT count(*) FROM countrylanguage WHERE language  =  "Dutch" 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.language  =  "English" INTERSECT SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.language  =  "French" 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "English" INTERSECT SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "French" 
SELECT country.name FROM countrylanguage  JOIN country  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  'English' INTERSECT SELECT country.name FROM countrylanguage  JOIN country  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  'French' 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "English" INTERSECT SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE countrylanguage.language  =  "French" 
SELECT count(DISTINCT country.Continent) FROM country  JOIN countrylanguage  ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Chinese" 
SELECT count(DISTINCT country.Continent) FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Chinese" 
SELECT country.Region FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" OR countrylanguage.Language  =  "Dutch" 
SELECT country.Region FROM country  JOIN countrylanguage  ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Dutch" OR countrylanguage.Language  =  "English" 
SELECT country.CountryName FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.CountryName FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Dutch' 
SELECT country.CountryCode FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.CountryCode FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Dutch' 
SELECT language FROM countrylanguage WHERE country.Continent  =  'Asia' ORDER BY percentage DESC LIMIT 1 
SELECT language FROM countrylanguage WHERE percentage  =  ( SELECT MAX ( percentage ) FROM countrylanguage WHERE countrycode IN ( SELECT countrycode FROM country WHERE region  =  "Asia" ) ) 
SELECT language FROM countrylanguage WHERE isocode IN (SELECT isocode FROM country WHERE governmentform  =  'Republic') GROUP BY language HAVING COUNT(*)  =  1 
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT countrycode FROM country WHERE governmentform  =  'Republic') 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.ID  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" GROUP BY city.ID ORDER BY city.Population DESC LIMIT 1 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.CountryCode  =  countrylanguage.CountryCode JOIN citylanguage  ON citylanguage.Language  =  city.Name WHERE countrylanguage.Language  =  "English" GROUP BY city.Name ORDER BY city.Population DESC LIMIT 1 
SELECT country.name,  country.population,  country.lifeexpectancy FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.continent  =  "Asia" ORDER BY country.population DESC LIMIT 1 
SELECT name,  population,  lifeexpectancy FROM country WHERE region  =  'Asia' ORDER BY population DESC LIMIT 1 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT avg(LifeExpectancy) FROM country WHERE Language!= "English" 
SELECT sum(Population) FROM country WHERE Language!= "English" 
SELECT count(*) FROM country WHERE language  =  "english" AND isocode NOT IN (SELECT countrycode FROM countrylanguage) 
SELECT countrylanguage.Language FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode  =  country.Code WHERE country.HeadOfState  =  "Beatrix" 
SELECT countrylanguage.Language FROM countrylanguage  JOIN country  ON countrylanguage.CountryCode  =  country.Code WHERE country.HeadOfState  =  "Beatrix" 
SELECT sum(count) FROM countrylanguage WHERE iso  =  "fr" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "de" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "it" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "es" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "ru" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "zh" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "ko" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "id" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "pl" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "no" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "be" INTERSECT SELECT sum(count) FROM countrylanguage WHERE iso  =  "uk" INTER
SELECT count(DISTINCT language) FROM countrylanguage WHERE iso3  <  'AD' AND official  =  'Y' AND founded  <  1930 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.surfacearea  >  (SELECT max(surfacearea) FROM country WHERE country.continent  =  'Europe') 
SELECT name FROM country WHERE area  >  (SELECT max(area) FROM country WHERE continent  =  'Europe') 
SELECT city.Name FROM city  JOIN country  ON city.CountryCode  =  country.Code WHERE country.Continent  =  'Africa' AND country.Population  <  (SELECT min(Population) FROM country WHERE Continent  =  'Asia') 
SELECT city.Name FROM city  JOIN country  ON city.CountryCode  =  country.Code WHERE country.Continent  =  'Africa' AND country.Population  <  country.Population WHERE city.Name NOT IN (SELECT city.Name FROM city  JOIN country  ON city.CountryCode  =  country.Code WHERE country.Continent  =  'Asia') 
SELECT country.name FROM city  JOIN country  ON city.countrycode  =  country.code WHERE city.population  >  (SELECT max(population) FROM country WHERE continent  =  'Asia') 
SELECT country.Asia,  country.Population FROM country  JOIN city  ON city.CountryCode  =  country.CountryCode WHERE city.Population  >  (SELECT max(Population) FROM city WHERE CountryCode  =  'Africa') 
SELECT country.CountryCode FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" EXCEPT SELECT country.CountryCode FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" 
SELECT country.CountryCode FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" EXCEPT SELECT country.CountryCode FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" 
SELECT country.CountryCode FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language!=  'English' 
SELECT country.CountryCode FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language!=  "English" 
SELECT country.code FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.governmentform!= 'Republic' 
SELECT country.Code FROM country  JOIN countrylanguage  ON country.Code  =  countrylanguage.CountryCode WHERE country.Language  =  "English" INTERSECT SELECT country.Code FROM country  JOIN countrylanguage  ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.GovernmentForm  =  "Republic" 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.ID  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" AND country.Continent  =  "Europe" 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.ID  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" AND country.Continent  =  "Europe" 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Chinese' AND country.Continent  =  'Asian' 
SELECT city.Name FROM city  JOIN countrylanguage  ON city.ID  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Chinese" AND country.Continent  =  "Asia" 
SELECT name,  indepYear,  surfaceArea FROM country ORDER BY population ASC LIMIT 1 
SELECT name,  indepYear,  surfaceArea FROM country ORDER BY population ASC LIMIT 1 
SELECT population,  name,  head_of_state FROM country ORDER BY area DESC LIMIT 1 
SELECT name,  population,  head_of_state FROM country ORDER BY area DESC LIMIT 1 
SELECT country.name,  countrylanguage.language,  count(*) FROM countrylanguage  JOIN country  ON countrylanguage.countrycode  =  country.code GROUP BY countrylanguage.countrycode HAVING count(*)  >=  3 
SELECT country.name,  countrylanguage.language,  country.Population,  count(*) FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode GROUP BY country.name HAVING count(*)  >  2 
SELECT count(*),  city.district FROM city  JOIN citylanguage  ON city.id  =  citylanguage.cityid GROUP BY city.district HAVING avg(city.population)  >  (SELECT avg(city.population) FROM city  JOIN citylanguage  ON city.id  =  citylanguage.cityid) 
SELECT city.district,  count(*) FROM city  JOIN citylanguage  ON city.id  =  citylanguage.cityid GROUP BY city.district HAVING avg(city.population)  >  (SELECT avg(city.population) FROM city  JOIN citylanguage  ON city.id  =  citylanguage.cityid) 
SELECT governmentform,  avg(lifeexpectancy),  city.Population FROM city  JOIN country  ON city.CountryCode  =  country.Code WHERE country.LifeExpectancy  >  72 GROUP BY governmentform 
SELECT country.GovernmentForm,  sum(country.Population) FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode WHERE countrylanguage.Percentage  >  72 GROUP BY country.GovernmentForm 
SELECT avg(lifeexpectancy),  avg(population),  Continent FROM country WHERE lifeexpectancy  <  72 GROUP BY Continent 
SELECT Continent,  sum(Population),  avg(LifeExpectancy) FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent 
SELECT country.name,  country.area FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode ORDER BY country.area DESC LIMIT 5 
SELECT name,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5 
SELECT country.name FROM country  JOIN city  ON country.id  =  city.id ORDER BY city.population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT name FROM country ORDER BY population DESC LIMIT 3 
SELECT country.name FROM country  JOIN city  ON country.id  =  city.id GROUP BY country.name ORDER BY count(*) LIMIT 3 
SELECT count(*) FROM country WHERE Continent  =  'Asia' 
SELECT count(*) FROM country WHERE Continent  =  'Asia' 
SELECT country.name FROM country  JOIN countrylanguage  ON country.code  =  countrylanguage.countrycode WHERE country.continent  =  "Europe" AND country.population  >  80000 
SELECT country.name FROM country  JOIN city  ON city.id  =  country.capital WHERE city.country  =  'Europe' AND city.population  =  80000 
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE Continent  =  'North America' AND SurfaceArea  >  3000 
SELECT sum(Population),  avg(SurfaceArea) FROM country WHERE Country.Continent  =  'North America' AND SurfaceArea  >  3000 
SELECT city.Name FROM city  JOIN citylanguage  ON city.ID  =  citylanguage.CountryCode WHERE city.Population BETWEEN 160000 AND 900000 
SELECT city.Name FROM city  JOIN citylanguage  ON city.ID  =  citylanguage.CountryCode WHERE city.Population BETWEEN 160000 AND 900000 
SELECT language FROM countrylanguage ORDER BY COUNT(*) DESC LIMIT 1 
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT country.Language,  country.Percentage FROM countrylanguage  JOIN country  ON country.CountryCode  =  countrylanguage.CountryCode GROUP BY country.Language ORDER BY country.Percentage DESC LIMIT 1 
SELECT country.CountryCode,  countrylanguage.Language,  count(*) FROM country  JOIN countrylanguage  ON country.CountryCode  =  countrylanguage.CountryCode GROUP BY country.CountryCode ORDER BY count(*) DESC LIMIT 10 
SELECT count(*) FROM countrylanguage WHERE language  =  "Spanish" AND percentage  =  (SELECT max(percentage) FROM countrylanguage WHERE language  =  "Spanish") 
SELECT count(*) FROM countrylanguage WHERE language  =  "Spanish" 
SELECT country.Code FROM country  JOIN countrylanguage  ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Spanish" GROUP BY country.Code ORDER BY count(*) DESC LIMIT 1 
SELECT country.Code FROM countrylanguage  JOIN country  ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Spanish" 
SELECT count(*) FROM conductor 
SELECT count(*) FROM conductor 
SELECT Name FROM conductor ORDER BY Age ASC 
SELECT Name FROM conductor ORDER BY Age 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Name FROM conductor WHERE Nationality!= "USA" 
SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_Founded DESC 
SELECT Record_Company FROM orchestra ORDER BY YEAR_OF_Founded DESC 
SELECT avg(Attendance) FROM show 
SELECT avg(Attendance) FROM show 
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final" 
SELECT count(DISTINCT nationality) FROM conductor 
SELECT count(DISTINCT nationality) FROM conductor 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC 
SELECT Name FROM conductor ORDER BY YEAR_OF_WORK DESC LIMIT 1 
SELECT conductor.Name FROM conductor  JOIN performance  ON conductor.Conductor_ID  =  performance.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name,  orchestra.Orchestra FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID 
SELECT conductor.Name,  orchestra.Orchestra FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Name HAVING count(*)  >  1 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Name HAVING count(*)  >  1 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(*) DESC LIMIT 1 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID WHERE orchestra.Year_of_Founded  >  2008 
SELECT conductor.Name FROM conductor  JOIN orchestra  ON conductor.Conductor_ID  =  orchestra.Conductor_ID WHERE orchestra.Year_of_Founded  >  2008 
SELECT Record_Company,  COUNT(*) FROM orchestra GROUP BY Record_Company 
SELECT count(*),  ORCHESTRA.Record_Company FROM ORCHESTRA  JOIN conductor  ON ORCHESTRA.Conductor_ID  =  conductor.Conductor_ID GROUP BY ORCHESTRA.Record_Company 
SELECT ORCHESTRY FROM ORCHESTRY ORDER BY COUNT(*) ASC 
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) DESC 
SELECT Record_Company FROM ORCHESTRA GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
SELECT ORCHESTRY.Record_Company FROM ORCHESTRY  JOIN ORCHESTRY  ON ORCHESTRY.Orchestra_ID  =  ORCHESTRY.Orchestra_ID GROUP BY ORCHESTRY.Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Orchestra FROM ORCHESTRA WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance) 
SELECT Orchestra FROM ORCHESTRA WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance) 
SELECT ORCHESTRY.Record_Company FROM ORCHESTRY  JOIN ORCHESTRY  ON ORCHESTRY.Conductor_ID  =  ORCHESTRY.Conductor_ID WHERE ORCHESTRY.Year_of_Founded  <  2003 INTERSECT SELECT ORCHESTRY.Record_Company FROM ORCHESTRY  JOIN ORCHESTRY  ON ORCHESTRY.Conductor_ID  =  ORCHESTRY.Conductor_ID WHERE ORCHESTRY.Year_of_Founded  >  2003 
SELECT ORCHESTRY.Record_Company FROM ORCHESTRY  JOIN ORCHESTRY  ON ORCHESTRY.Orchestra_ID  =  ORCHESTRY.Orchestra_ID WHERE ORCHESTRY.Year_of_Founded  <  2003 INTERSECT SELECT ORCHESTRY.Record_Company FROM ORCHESTRY  JOIN ORCHESTRY  ON ORCHESTRY.Orchestra_ID  =  ORCHESTRY.Orchestra_ID WHERE ORCHESTRY.Year_of_Founded  >  2003 
SELECT count(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD" 
SELECT count(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD" 
SELECT YEAR_OF_FOUNDING FROM ORCHESTRAS WHERE YEAR_OF_FOUNDING  >  1 
SELECT YEAR_OF_FOUNDING FROM ORCHESTRA WHERE YEAR_OF_FOUNDING  >  1 
SELECT count(*) FROM highschooler 
SELECT count(*) FROM highschooler 
SELECT name,  grade FROM Highschooler 
SELECT name,  grade FROM highschooler 
SELECT grade FROM highschooler 
SELECT grade FROM highschooler 
SELECT grade FROM highschooler WHERE name  =  "Kyle" 
SELECT grade FROM highschooler WHERE name = "Kyle" 
SELECT name FROM highschooler WHERE grade  =  10 
SELECT name FROM highschooler WHERE grade  =  10 
SELECT highschooler.ID FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id WHERE friend.friend_id  =  "Kyle" 
SELECT student_id FROM highschooler WHERE name  =  "Kyle" 
SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10 
SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10 
SELECT count(*),  grade FROM highschooler GROUP BY grade 
SELECT count(*),  grade FROM highschooler GROUP BY grade 
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 
SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4 
SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4 
SELECT student_id,  count(*) FROM friend GROUP BY student_id 
SELECT count(*),  highschooler.name FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id GROUP BY highschooler.name 
SELECT Highschooler.name,  count(*) FROM Highschooler  JOIN Friend  ON Highschooler.id  =  Friend.friend_id GROUP BY Highschooler.id 
SELECT highschooler.name,  count(*) FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id GROUP BY highschooler.id 
SELECT highschooler.name FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id GROUP BY highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM highschooler ORDER BY count(*) DESC LIMIT 1 
SELECT name FROM highschooler WHERE count(*)  >=  3 
SELECT name FROM highschooler WHERE count(*)  >=  3 
SELECT friend.friend_id FROM friend  JOIN highschooler  ON friend.student_id  =  highschooler.id JOIN highschooler  ON friend.friend_id  =  highschooler.id WHERE highschooler.name  =  "Kyle" 
SELECT Friend.friend_id FROM Friend  JOIN Highschooler  ON Friend.student_id  =  Highschooler.id JOIN Highschooler  ON Friend.friend_id  =  Highschooler.id WHERE Highschooler.name  =  "Kyle" 
SELECT count(DISTINCT friend_id) FROM friend WHERE student_id  =  10; 
SELECT count(*) FROM friend  JOIN highschooler  ON friend.student_id  =  highschooler.id JOIN friend  ON friend.friend_id  =  highschooler.id WHERE highschooler.name  =  "Kyle" 
SELECT DISTINCT student_id FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT DISTINCT student_id FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend) 
SELECT name FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT highschooler.id FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id JOIN friend  ON likes.friend_id  =  friend.friend_id WHERE friend.student_id IN (SELECT highschooler.id FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id WHERE friend.student_id IN (SELECT highschooler.id FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id)) 
SELECT student_id FROM friend INTERSECT SELECT student_id FROM likes 
SELECT DISTINCT highschooler.name FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id JOIN friend  ON likes.friend_id  =  friend.friend_id WHERE friend.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id FROM friend WHERE likes.student_id IN (SELECT friend_id FROM friend WHERE likes.student_id NOT IN (SELECT friend_id
SELECT DISTINCT highschooler.name FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id INTERSECT SELECT DISTINCT highschooler.name FROM highschooler  JOIN friend  ON highschooler.id  =  friend.friend_id 
SELECT count(*),  student_id FROM likes GROUP BY student_id 
SELECT count(*),  student_id FROM Likes GROUP BY student_id 
SELECT student_id,  count(*) FROM Likes GROUP BY student_id 
SELECT student_id,  count(*) FROM likes GROUP BY student_id 
SELECT highschooler.name FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id GROUP BY highschooler.id ORDER BY count(*) DESC LIMIT 1 
SELECT student_id FROM likes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 
SELECT DISTINCT highschooler.name FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id GROUP BY highschooler.id HAVING count(*)  >=  2 
SELECT DISTINCT highschooler.name FROM highschooler  JOIN likes  ON highschooler.id  =  likes.liked_id GROUP BY highschooler.id HAVING count(*)  >=  2 
SELECT Highschooler.name FROM Highschooler  JOIN Friend  ON Highschooler.id  =  Friend.friend_id WHERE Highschooler.grade  >  5 GROUP BY Highschooler.id HAVING count(*)  >=  2 
SELECT name FROM highschooler WHERE grade  >  5 GROUP BY name HAVING count(*)  >=  2 
SELECT count(*) FROM Likes  JOIN Highschooler  ON Likes.student_id  =  Highschooler.ID WHERE Highschooler.name  =  "Kyle" 
SELECT count(*) FROM likes  JOIN highschooler  ON likes.student_id  =  highschooler.id WHERE highschooler.name  =  "Kyle" 
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend_id FROM friend) 
SELECT avg(grade) FROM friend 
SELECT min(grade) FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT min(grade) FROM highschooler WHERE student_id NOT IN (SELECT student_id FROM friend) 
SELECT state FROM OWNERS INTERSECT SELECT state FROM PROFESSIONALS 
SELECT state FROM OWNERS INTERSECT SELECT state FROM PROFESSIONALS 
SELECT avg(age) FROM Treatments 
SELECT avg(age) FROM Treatments 
SELECT professional_id,  last_name,  cell_number FROM treatments WHERE state  =  "Indiana" OR treatment_type_code  =  "Surgery" GROUP BY professional_id HAVING count(*)  >  2 
SELECT professionals.professional_id,  professionals.last_name,  professionals.cell_number FROM professionals  JOIN treatments  ON professionals.professional_id  =  treatments.professional_id WHERE treatments.state  =  "Indiana" OR treatments.cost_of_treatment  >  2 
SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING cost_of_treatment  >  1000) 
SELECT Dogs.name FROM Dogs  JOIN Owners  ON Dogs.owner_id  =  Owners.owner_id WHERE Owners.first_name  =  "Jane" AND Owners.last_name  =  "Smith" EXCEPT SELECT Dogs.name FROM Dogs  JOIN Owners  ON Dogs.owner_id  =  Owners.owner_id WHERE Owners.first_name  =  "Jane" AND Owners.last_name  =  "Smith" AND Owners.home_phone  >  1000 
SELECT first_name FROM professionals EXCEPT SELECT first_name FROM owners 
SELECT first_name FROM professionals EXCEPT SELECT professionals.first_name FROM professionals  JOIN owners  ON professionals.owner_id  =  owners.owner_id 
SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT professional_id,  role_code,  email_address FROM Treatments 
SELECT professional_id,  role_code,  email_address FROM Professionals EXCEPT SELECT Professionals.professional_id,  Professionals.role_code,  Professionals.email_address FROM Professionals  JOIN Treatments  ON Professionals.professional_id  =  Treatments.professional_id 
SELECT owners.owner_id,  owners.first_name,  owners.last_name FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,  owners.first_name,  owners.last_name FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT professional_id,  role_code,  first_name FROM professionals GROUP BY professional_id HAVING count(*)  >=  2 
SELECT professional_id,  role_code,  first_name FROM professionals GROUP BY role_code HAVING count(*)  >=  2 
SELECT breed_name FROM Breeds ORDER BY count(*) DESC LIMIT 1 
SELECT breeds.breed_name FROM dogs  JOIN breeds  ON dogs.breed_code  =  breeds.breed_code GROUP BY breeds.breed_name ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,  owners.last_name FROM treatments  JOIN owners  ON treatments.owner_id  =  owners.owner_id GROUP BY treatments.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT owners.owner_id,  owners.last_name FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id JOIN treatments  ON dogs.dog_id  =  treatments.dog_id GROUP BY treatments.owner_id ORDER BY count(*) DESC LIMIT 1 
SELECT treatment_types.treatment_type_description FROM treatments  JOIN treatment_types  ON treatments.treatment_type_code  =  treatment_types.treatment_type_code ORDER BY sum(treatments.cost_of_treatment) LIMIT 1 
SELECT treatment_types.treatment_type_description FROM treatments  JOIN treatment_types  ON treatments.treatment_type_code  =  treatment_types.treatment_type_code ORDER BY sum(treatments.cost_of_treatment) LIMIT 1 
SELECT owners.owner_id,  owners.zip_code FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id JOIN treatments  ON treatments.dog_id  =  dogs.dog_id JOIN charges  ON treatments.treatment_id  =  charges.charge_id WHERE charges.charge_amount  =  (SELECT max(charge_amount) FROM charges) 
SELECT owners.owner_id,  owners.zip_code FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id JOIN treatments  ON treatments.dog_id  =  dogs.dog_id JOIN professions  ON treatments.professional_id  =  professions.professional_id WHERE treatments.cost_of_treatment  =  (SELECT max(cost_of_treatment) FROM treatments) 
SELECT professional_id,  cell_number FROM treatments GROUP BY professional_id HAVING count(*)  >=  2 
SELECT professional_id,  home_phone FROM professionals GROUP BY home_phone HAVING count(*)  >=  2 
SELECT professionals.first_name,  professionals.last_name FROM treatments  JOIN professionals  ON treatments.professional_id  =  professionals.professional_id WHERE treatments.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments) 
SELECT professionals.first_name,  professionals.last_name FROM treatments  JOIN professionals  ON treatments.professional_id  =  professionals.professional_id JOIN dogs  ON dogs.dog_id  =  treatments.dog_id WHERE treatments.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments) 
SELECT date_of_treatment,  first_name FROM Treatments 
SELECT date_of_treatment,  first_name FROM Treatments 
SELECT cost_of_treatment,  treatment_type_description FROM Treatments 
SELECT cost_of_treatment,  treatment_type_description FROM Treatments 
SELECT owners.first_name,  owners.last_name,  Sizes.size_description FROM OWNERS  JOIN Dogs  ON OWNERS.owner_id  =  Dogs.owner_id JOIN Sizes  ON Sizes.size_code  =  Dogs.size_code 
SELECT owners.first_name,  owners.last_name,  dogs.size_code FROM dogs  JOIN owners  ON dogs.owner_id  =  owners.owner_id 
SELECT OWNERS.first_name,  Dogs.name FROM OWNERS  JOIN Dogs  ON OWNERS.owner_id  =  Dogs.owner_id 
SELECT owners.first_name,  dogs.name FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id 
SELECT dogs.name,  treatments.date_of_treatment FROM treatments  JOIN dogs  ON treatments.dog_id  =  dogs.dog_id JOIN breeds  ON breeds.breed_code  =  treatments.breed_type_code WHERE breeds.breed_name  =  "Rare" 
SELECT dogs.name,  treatments.date_of_treatment FROM dogs  JOIN treatments  ON dogs.dog_id  =  treatments.dog_id WHERE breeds.breed_name  =  "Rare" 
SELECT OWNERS.first_name,  Dogs.name FROM OWNERS  JOIN Dogs  ON OWNERS.owner_id  =  Dogs.owner_id WHERE OWNERS.state  =  "Virginia" 
SELECT OWNERS.first_name,  Dogs.name FROM OWNERS  JOIN Dogs  ON OWNERS.owner_id  =  Dogs.owner_id WHERE OWNERS.state  =  "Virginia" 
SELECT date_arrived,  date_departed FROM Dogs WHERE date_arrived  =  (SELECT max(date_arrived) FROM Dogs) AND date_departed  =  (SELECT min(date_departed) FROM Dogs) 
SELECT date_arrived,  date_departed FROM Dogs  JOIN Treatments  ON Dogs.dog_id  =  Treatments.dog_id 
SELECT OWNERS.last_name FROM OWNERS  JOIN DOGS  ON OWNERS.owner_id  =  DOGS.owner_id ORDER BY DOGS.age LIMIT 1 
SELECT owners.last_name FROM dogs  JOIN owners  ON dogs.owner_id  =  owners.owner_id ORDER BY dogs.age LIMIT 1 
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin" 
SELECT email_address FROM professionals WHERE state  =  "Hawaii" OR state  =  "Wisconsin" 
SELECT date_arrived,  date_departed FROM Dogs 
SELECT date_arrived,  date_departed FROM Dogs 
SELECT count(*) FROM Treatments 
SELECT count(*) FROM Treatments  JOIN Dogs  ON Treatments.dog_id  =  Dogs.dog_id 
SELECT count(*) FROM Treatments  JOIN Professionals  ON Treatments.professional_id  =  Professionals.professional_id JOIN Dogs  ON Treatments.dog_id  =  Dogs.dog_id 
SELECT count(*) FROM Treatments  JOIN Professionals  ON Treatments.professional_id  =  Professionals.professional_id JOIN Dogs  ON Treatments.dog_id  =  Dogs.dog_id 
SELECT professionals.role_code,  professionals.street,  professionals.city,  professionals.state FROM professionals  JOIN addresses  ON professionals.address_id  =  addresses.address_id WHERE addresses.city LIKE "%West%" 
SELECT role_code,  street,  city,  state FROM professionals WHERE city LIKE '%West%' 
SELECT owners.first_name,  owners.last_name,  owners.email_address FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id WHERE owners.state LIKE "%North%" 
SELECT owners.first_name,  owners.last_name,  owners.email_address FROM owners  JOIN dogs  ON owners.owner_id  =  dogs.owner_id WHERE owners.state LIKE "%North%" 
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs) 
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs) 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN (SELECT owner_id FROM DOGS) 
SELECT count(*) FROM OWNERS WHERE owner_id NOT IN (SELECT owner_id FROM DOGS) 
SELECT count(*) FROM professionals WHERE role_code!= "Treatment" 
SELECT count(*) FROM professionals WHERE role_code!= "Professional" 
SELECT name,  age,  weight FROM Dogs WHERE abandoned_yn  =  1 
SELECT name,  age,  weight FROM Dogs WHERE abandoned_yn  =  1 
SELECT avg(age) FROM DOGS 
SELECT avg(age) FROM DOGS 
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1 
SELECT charge_type,  charge_amount FROM CHARGES 
SELECT charge_type,  charge_amount FROM CHARGES 
SELECT sum(charges.charge_amount) FROM charges  JOIN treatments  ON charges.charge_id  =  treatments.charge_id JOIN treatments  ON treatments.treatment_id  =  charges.treatment_id WHERE treatments.treatment_type_code  =  "Most expensive" GROUP BY treatments.treatment_type_code ORDER BY sum(charges.charge_amount) DESC LIMIT 1 
SELECT charge_amount FROM CHARGES ORDER BY charge_amount DESC LIMIT 1 
SELECT email_address,  cell_number,  home_phone FROM professionals 
SELECT email_address,  home_phone,  cell_number FROM professionals 
SELECT breed_type_code,  size_type_code FROM Breeds 
SELECT DISTINCT breed_code,  size_code FROM Dogs 
SELECT professionals.first_name,  treatments.treatment_type_description FROM treatments  JOIN professionals  ON treatments.professional_id  =  professionals.professional_id 
SELECT professionals.first_name,  treatments.treatment_type_description FROM treatments  JOIN professionals  ON treatments.professional_id  =  professionals.professional_id 
SELECT count(*) FROM singer 
SELECT count(*) FROM singer 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC 
SELECT Birth_Year,  Citizenship FROM singer 
SELECT Birth_Year,  Citizenship FROM singer 
SELECT Name FROM singer WHERE Citizenship!= "France" 
SELECT Name FROM singer WHERE Citizenship!= 'French' 
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 
SELECT Citizenship,  COUNT(*) FROM singer GROUP BY Citizenship 
SELECT count(*),  Citizenship FROM singer GROUP BY Citizenship 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
SELECT max(Net_Worth_Millions),  Citizenship FROM singer 
SELECT Title,  singer.Name FROM song  JOIN singer  ON song.Singer_ID  =  singer.Singer_ID 
SELECT Title,  singer.Name FROM song  JOIN singer  ON song.Singer_ID  =  singer.Singer_ID 
SELECT DISTINCT singer.Name FROM song  JOIN singer  ON song.Singer_ID  =  singer.Singer_ID WHERE song.Sales  >  300000 
SELECT DISTINCT singer.Name FROM song  JOIN singer  ON song.Singer_ID  =  singer.Singer_ID WHERE song.Sales  >  300000 
SELECT singer.Name FROM singer  JOIN song  ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Name HAVING COUNT(*)  >  1 
SELECT singer.Name FROM singer  JOIN song  ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Name HAVING COUNT(*)  >  1 
SELECT singer.Name,  sum(song.Sales) FROM singer  JOIN song  ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Name 
SELECT singer.Name,  sum(song.Sales) FROM singer  JOIN song  ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Name 
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song) 
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song) 
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955 
SELECT count(*) FROM Other_available_features 
SELECT feature_type_name FROM Ref_feature_types WHERE feature_type_code  =  "AirCon" 
SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types  JOIN Other_Available_Features  ON Ref_Property_Types.property_type_code  =  Other_Available_Features.property_type_code 
SELECT property_name FROM properties WHERE property_type_code  =  "House" OR property_type_code  =  "Apartment" GROUP BY property_name HAVING count(*)  >  1 
